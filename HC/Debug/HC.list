
HC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08004d94  08004d94  00005d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005130  08005130  00006130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800513c  0800513c  0000613c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005140  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000270  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000adb5  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc2  00000000  00000000  00011e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  00013b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c4  00000000  00000000  00014530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002372f  00000000  00000000  00014cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be64  00000000  00000000  00038423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d463d  00000000  00000000  00044287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001188c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002eb8  00000000  00000000  00118908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  0011b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004d7c 	.word	0x08004d7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004d7c 	.word	0x08004d7c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b988 	b.w	8000940 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	468e      	mov	lr, r1
 8000650:	4604      	mov	r4, r0
 8000652:	4688      	mov	r8, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d14a      	bne.n	80006ee <__udivmoddi4+0xa6>
 8000658:	428a      	cmp	r2, r1
 800065a:	4617      	mov	r7, r2
 800065c:	d962      	bls.n	8000724 <__udivmoddi4+0xdc>
 800065e:	fab2 f682 	clz	r6, r2
 8000662:	b14e      	cbz	r6, 8000678 <__udivmoddi4+0x30>
 8000664:	f1c6 0320 	rsb	r3, r6, #32
 8000668:	fa01 f806 	lsl.w	r8, r1, r6
 800066c:	fa20 f303 	lsr.w	r3, r0, r3
 8000670:	40b7      	lsls	r7, r6
 8000672:	ea43 0808 	orr.w	r8, r3, r8
 8000676:	40b4      	lsls	r4, r6
 8000678:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	fbb8 f1fe 	udiv	r1, r8, lr
 8000684:	0c23      	lsrs	r3, r4, #16
 8000686:	fb0e 8811 	mls	r8, lr, r1, r8
 800068a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800068e:	fb01 f20c 	mul.w	r2, r1, ip
 8000692:	429a      	cmp	r2, r3
 8000694:	d909      	bls.n	80006aa <__udivmoddi4+0x62>
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	f101 30ff 	add.w	r0, r1, #4294967295
 800069c:	f080 80ea 	bcs.w	8000874 <__udivmoddi4+0x22c>
 80006a0:	429a      	cmp	r2, r3
 80006a2:	f240 80e7 	bls.w	8000874 <__udivmoddi4+0x22c>
 80006a6:	3902      	subs	r1, #2
 80006a8:	443b      	add	r3, r7
 80006aa:	1a9a      	subs	r2, r3, r2
 80006ac:	b2a3      	uxth	r3, r4
 80006ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80006b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80006be:	459c      	cmp	ip, r3
 80006c0:	d909      	bls.n	80006d6 <__udivmoddi4+0x8e>
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006c8:	f080 80d6 	bcs.w	8000878 <__udivmoddi4+0x230>
 80006cc:	459c      	cmp	ip, r3
 80006ce:	f240 80d3 	bls.w	8000878 <__udivmoddi4+0x230>
 80006d2:	443b      	add	r3, r7
 80006d4:	3802      	subs	r0, #2
 80006d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006da:	eba3 030c 	sub.w	r3, r3, ip
 80006de:	2100      	movs	r1, #0
 80006e0:	b11d      	cbz	r5, 80006ea <__udivmoddi4+0xa2>
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	2200      	movs	r2, #0
 80006e6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d905      	bls.n	80006fe <__udivmoddi4+0xb6>
 80006f2:	b10d      	cbz	r5, 80006f8 <__udivmoddi4+0xb0>
 80006f4:	e9c5 0100 	strd	r0, r1, [r5]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4608      	mov	r0, r1
 80006fc:	e7f5      	b.n	80006ea <__udivmoddi4+0xa2>
 80006fe:	fab3 f183 	clz	r1, r3
 8000702:	2900      	cmp	r1, #0
 8000704:	d146      	bne.n	8000794 <__udivmoddi4+0x14c>
 8000706:	4573      	cmp	r3, lr
 8000708:	d302      	bcc.n	8000710 <__udivmoddi4+0xc8>
 800070a:	4282      	cmp	r2, r0
 800070c:	f200 8105 	bhi.w	800091a <__udivmoddi4+0x2d2>
 8000710:	1a84      	subs	r4, r0, r2
 8000712:	eb6e 0203 	sbc.w	r2, lr, r3
 8000716:	2001      	movs	r0, #1
 8000718:	4690      	mov	r8, r2
 800071a:	2d00      	cmp	r5, #0
 800071c:	d0e5      	beq.n	80006ea <__udivmoddi4+0xa2>
 800071e:	e9c5 4800 	strd	r4, r8, [r5]
 8000722:	e7e2      	b.n	80006ea <__udivmoddi4+0xa2>
 8000724:	2a00      	cmp	r2, #0
 8000726:	f000 8090 	beq.w	800084a <__udivmoddi4+0x202>
 800072a:	fab2 f682 	clz	r6, r2
 800072e:	2e00      	cmp	r6, #0
 8000730:	f040 80a4 	bne.w	800087c <__udivmoddi4+0x234>
 8000734:	1a8a      	subs	r2, r1, r2
 8000736:	0c03      	lsrs	r3, r0, #16
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	b280      	uxth	r0, r0
 800073e:	b2bc      	uxth	r4, r7
 8000740:	2101      	movs	r1, #1
 8000742:	fbb2 fcfe 	udiv	ip, r2, lr
 8000746:	fb0e 221c 	mls	r2, lr, ip, r2
 800074a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800074e:	fb04 f20c 	mul.w	r2, r4, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d907      	bls.n	8000766 <__udivmoddi4+0x11e>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f10c 38ff 	add.w	r8, ip, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x11c>
 800075e:	429a      	cmp	r2, r3
 8000760:	f200 80e0 	bhi.w	8000924 <__udivmoddi4+0x2dc>
 8000764:	46c4      	mov	ip, r8
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	fbb3 f2fe 	udiv	r2, r3, lr
 800076c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000770:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000774:	fb02 f404 	mul.w	r4, r2, r4
 8000778:	429c      	cmp	r4, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x144>
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x142>
 8000784:	429c      	cmp	r4, r3
 8000786:	f200 80ca 	bhi.w	800091e <__udivmoddi4+0x2d6>
 800078a:	4602      	mov	r2, r0
 800078c:	1b1b      	subs	r3, r3, r4
 800078e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000792:	e7a5      	b.n	80006e0 <__udivmoddi4+0x98>
 8000794:	f1c1 0620 	rsb	r6, r1, #32
 8000798:	408b      	lsls	r3, r1
 800079a:	fa22 f706 	lsr.w	r7, r2, r6
 800079e:	431f      	orrs	r7, r3
 80007a0:	fa0e f401 	lsl.w	r4, lr, r1
 80007a4:	fa20 f306 	lsr.w	r3, r0, r6
 80007a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007b0:	4323      	orrs	r3, r4
 80007b2:	fa00 f801 	lsl.w	r8, r0, r1
 80007b6:	fa1f fc87 	uxth.w	ip, r7
 80007ba:	fbbe f0f9 	udiv	r0, lr, r9
 80007be:	0c1c      	lsrs	r4, r3, #16
 80007c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007cc:	45a6      	cmp	lr, r4
 80007ce:	fa02 f201 	lsl.w	r2, r2, r1
 80007d2:	d909      	bls.n	80007e8 <__udivmoddi4+0x1a0>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007da:	f080 809c 	bcs.w	8000916 <__udivmoddi4+0x2ce>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f240 8099 	bls.w	8000916 <__udivmoddi4+0x2ce>
 80007e4:	3802      	subs	r0, #2
 80007e6:	443c      	add	r4, r7
 80007e8:	eba4 040e 	sub.w	r4, r4, lr
 80007ec:	fa1f fe83 	uxth.w	lr, r3
 80007f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007f4:	fb09 4413 	mls	r4, r9, r3, r4
 80007f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000800:	45a4      	cmp	ip, r4
 8000802:	d908      	bls.n	8000816 <__udivmoddi4+0x1ce>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f103 3eff 	add.w	lr, r3, #4294967295
 800080a:	f080 8082 	bcs.w	8000912 <__udivmoddi4+0x2ca>
 800080e:	45a4      	cmp	ip, r4
 8000810:	d97f      	bls.n	8000912 <__udivmoddi4+0x2ca>
 8000812:	3b02      	subs	r3, #2
 8000814:	443c      	add	r4, r7
 8000816:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800081a:	eba4 040c 	sub.w	r4, r4, ip
 800081e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000822:	4564      	cmp	r4, ip
 8000824:	4673      	mov	r3, lr
 8000826:	46e1      	mov	r9, ip
 8000828:	d362      	bcc.n	80008f0 <__udivmoddi4+0x2a8>
 800082a:	d05f      	beq.n	80008ec <__udivmoddi4+0x2a4>
 800082c:	b15d      	cbz	r5, 8000846 <__udivmoddi4+0x1fe>
 800082e:	ebb8 0203 	subs.w	r2, r8, r3
 8000832:	eb64 0409 	sbc.w	r4, r4, r9
 8000836:	fa04 f606 	lsl.w	r6, r4, r6
 800083a:	fa22 f301 	lsr.w	r3, r2, r1
 800083e:	431e      	orrs	r6, r3
 8000840:	40cc      	lsrs	r4, r1
 8000842:	e9c5 6400 	strd	r6, r4, [r5]
 8000846:	2100      	movs	r1, #0
 8000848:	e74f      	b.n	80006ea <__udivmoddi4+0xa2>
 800084a:	fbb1 fcf2 	udiv	ip, r1, r2
 800084e:	0c01      	lsrs	r1, r0, #16
 8000850:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000854:	b280      	uxth	r0, r0
 8000856:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800085a:	463b      	mov	r3, r7
 800085c:	4638      	mov	r0, r7
 800085e:	463c      	mov	r4, r7
 8000860:	46b8      	mov	r8, r7
 8000862:	46be      	mov	lr, r7
 8000864:	2620      	movs	r6, #32
 8000866:	fbb1 f1f7 	udiv	r1, r1, r7
 800086a:	eba2 0208 	sub.w	r2, r2, r8
 800086e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000872:	e766      	b.n	8000742 <__udivmoddi4+0xfa>
 8000874:	4601      	mov	r1, r0
 8000876:	e718      	b.n	80006aa <__udivmoddi4+0x62>
 8000878:	4610      	mov	r0, r2
 800087a:	e72c      	b.n	80006d6 <__udivmoddi4+0x8e>
 800087c:	f1c6 0220 	rsb	r2, r6, #32
 8000880:	fa2e f302 	lsr.w	r3, lr, r2
 8000884:	40b7      	lsls	r7, r6
 8000886:	40b1      	lsls	r1, r6
 8000888:	fa20 f202 	lsr.w	r2, r0, r2
 800088c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000890:	430a      	orrs	r2, r1
 8000892:	fbb3 f8fe 	udiv	r8, r3, lr
 8000896:	b2bc      	uxth	r4, r7
 8000898:	fb0e 3318 	mls	r3, lr, r8, r3
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb08 f904 	mul.w	r9, r8, r4
 80008a6:	40b0      	lsls	r0, r6
 80008a8:	4589      	cmp	r9, r1
 80008aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008ae:	b280      	uxth	r0, r0
 80008b0:	d93e      	bls.n	8000930 <__udivmoddi4+0x2e8>
 80008b2:	1879      	adds	r1, r7, r1
 80008b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008b8:	d201      	bcs.n	80008be <__udivmoddi4+0x276>
 80008ba:	4589      	cmp	r9, r1
 80008bc:	d81f      	bhi.n	80008fe <__udivmoddi4+0x2b6>
 80008be:	eba1 0109 	sub.w	r1, r1, r9
 80008c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008c6:	fb09 f804 	mul.w	r8, r9, r4
 80008ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ce:	b292      	uxth	r2, r2
 80008d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d4:	4542      	cmp	r2, r8
 80008d6:	d229      	bcs.n	800092c <__udivmoddi4+0x2e4>
 80008d8:	18ba      	adds	r2, r7, r2
 80008da:	f109 31ff 	add.w	r1, r9, #4294967295
 80008de:	d2c4      	bcs.n	800086a <__udivmoddi4+0x222>
 80008e0:	4542      	cmp	r2, r8
 80008e2:	d2c2      	bcs.n	800086a <__udivmoddi4+0x222>
 80008e4:	f1a9 0102 	sub.w	r1, r9, #2
 80008e8:	443a      	add	r2, r7
 80008ea:	e7be      	b.n	800086a <__udivmoddi4+0x222>
 80008ec:	45f0      	cmp	r8, lr
 80008ee:	d29d      	bcs.n	800082c <__udivmoddi4+0x1e4>
 80008f0:	ebbe 0302 	subs.w	r3, lr, r2
 80008f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008f8:	3801      	subs	r0, #1
 80008fa:	46e1      	mov	r9, ip
 80008fc:	e796      	b.n	800082c <__udivmoddi4+0x1e4>
 80008fe:	eba7 0909 	sub.w	r9, r7, r9
 8000902:	4449      	add	r1, r9
 8000904:	f1a8 0c02 	sub.w	ip, r8, #2
 8000908:	fbb1 f9fe 	udiv	r9, r1, lr
 800090c:	fb09 f804 	mul.w	r8, r9, r4
 8000910:	e7db      	b.n	80008ca <__udivmoddi4+0x282>
 8000912:	4673      	mov	r3, lr
 8000914:	e77f      	b.n	8000816 <__udivmoddi4+0x1ce>
 8000916:	4650      	mov	r0, sl
 8000918:	e766      	b.n	80007e8 <__udivmoddi4+0x1a0>
 800091a:	4608      	mov	r0, r1
 800091c:	e6fd      	b.n	800071a <__udivmoddi4+0xd2>
 800091e:	443b      	add	r3, r7
 8000920:	3a02      	subs	r2, #2
 8000922:	e733      	b.n	800078c <__udivmoddi4+0x144>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	443b      	add	r3, r7
 800092a:	e71c      	b.n	8000766 <__udivmoddi4+0x11e>
 800092c:	4649      	mov	r1, r9
 800092e:	e79c      	b.n	800086a <__udivmoddi4+0x222>
 8000930:	eba1 0109 	sub.w	r1, r1, r9
 8000934:	46c4      	mov	ip, r8
 8000936:	fbb1 f9fe 	udiv	r9, r1, lr
 800093a:	fb09 f804 	mul.w	r8, r9, r4
 800093e:	e7c4      	b.n	80008ca <__udivmoddi4+0x282>

08000940 <__aeabi_idiv0>:
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <shiftIn>:
// faster CPUs like ESP32, Teensy 3.x and friends.
// See also:
// - https://github.com/bogde/HX711/issues/75
// - https://github.com/arduino/Arduino/issues/6561
// - https://community.hiveeyes.org/t/using-bogdans-canonical-hx711-library-on-the-esp32/539
static uint8_t shiftIn(HX711 *hx, uint8_t bitOrder) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 8; ++i) {
 8000954:	2300      	movs	r3, #0
 8000956:	73bb      	strb	r3, [r7, #14]
 8000958:	e050      	b.n	80009fc <shiftIn+0xb8>
		HAL_GPIO_WritePin(hx->PD_SCK_Port, hx->PD_SCK_Pin, GPIO_PIN_SET);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	889b      	ldrh	r3, [r3, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	4619      	mov	r1, r3
 8000966:	f001 fe7b 	bl	8002660 <HAL_GPIO_WritePin>
		for (uint16_t i = 0; i < SMALL_DELAY; i++) {} // Small delay
 800096a:	2300      	movs	r3, #0
 800096c:	81bb      	strh	r3, [r7, #12]
 800096e:	e002      	b.n	8000976 <shiftIn+0x32>
 8000970:	89bb      	ldrh	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	81bb      	strh	r3, [r7, #12]
 8000976:	89bb      	ldrh	r3, [r7, #12]
 8000978:	2b09      	cmp	r3, #9
 800097a:	d9f9      	bls.n	8000970 <shiftIn+0x2c>
		if (bitOrder == LSBFIRST)
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d113      	bne.n	80009aa <shiftIn+0x66>
			value |= HAL_GPIO_ReadPin(hx->DOUT_Port, hx->DOUT_Pin) << i;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	899b      	ldrh	r3, [r3, #12]
 800098a:	4619      	mov	r1, r3
 800098c:	4610      	mov	r0, r2
 800098e:	f001 fe4f 	bl	8002630 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	b25a      	sxtb	r2, r3
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e014      	b.n	80009d4 <shiftIn+0x90>
		else
			value |= HAL_GPIO_ReadPin(hx->DOUT_Port, hx->DOUT_Pin) << (7 - i);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	899b      	ldrh	r3, [r3, #12]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4610      	mov	r0, r2
 80009b6:	f001 fe3b 	bl	8002630 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	f1c3 0307 	rsb	r3, r3, #7
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	b25a      	sxtb	r2, r3
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(hx->PD_SCK_Port, hx->PD_SCK_Pin, GPIO_PIN_RESET);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	889b      	ldrh	r3, [r3, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	f001 fe3e 	bl	8002660 <HAL_GPIO_WritePin>
		for (uint16_t i = 0; i < SMALL_DELAY; i++) {} // Small delay
 80009e4:	2300      	movs	r3, #0
 80009e6:	817b      	strh	r3, [r7, #10]
 80009e8:	e002      	b.n	80009f0 <shiftIn+0xac>
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	3301      	adds	r3, #1
 80009ee:	817b      	strh	r3, [r7, #10]
 80009f0:	897b      	ldrh	r3, [r7, #10]
 80009f2:	2b09      	cmp	r3, #9
 80009f4:	d9f9      	bls.n	80009ea <shiftIn+0xa6>
	for (i = 0; i < 8; ++i) {
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73bb      	strb	r3, [r7, #14]
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d9ab      	bls.n	800095a <shiftIn+0x16>
	}
	return value;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HX711_begin>:

void HX711_begin(HX711 *hx, GPIO_TypeDef* PD_SCK_Port, uint16_t PD_SCK_Pin, GPIO_TypeDef* DOUT_Port, uint16_t DOUT_Pin, uint8_t gain) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	80fb      	strh	r3, [r7, #6]
	// Digital output
	hx->PD_SCK_Port = PD_SCK_Port;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	601a      	str	r2, [r3, #0]
	hx->PD_SCK_Pin = PD_SCK_Pin;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	88fa      	ldrh	r2, [r7, #6]
 8000a26:	809a      	strh	r2, [r3, #4]
	// Digital pull-up input
	hx->DOUT_Port = DOUT_Port;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	609a      	str	r2, [r3, #8]
	hx->DOUT_Pin = DOUT_Pin;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	8b3a      	ldrh	r2, [r7, #24]
 8000a32:	819a      	strh	r2, [r3, #12]
	// Set gain
	HX711_set_gain(hx, gain);
 8000a34:	7f3b      	ldrb	r3, [r7, #28]
 8000a36:	4619      	mov	r1, r3
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f000 f81a 	bl	8000a72 <HX711_set_gain>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HX711_is_ready>:

bool HX711_is_ready(HX711 *hx) {
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return !HAL_GPIO_ReadPin(hx->DOUT_Port, hx->DOUT_Pin);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	899b      	ldrh	r3, [r3, #12]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4610      	mov	r0, r2
 8000a5a:	f001 fde9 	bl	8002630 <HAL_GPIO_ReadPin>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf0c      	ite	eq
 8000a64:	2301      	moveq	r3, #1
 8000a66:	2300      	movne	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HX711_set_gain>:

void HX711_set_gain(HX711 *hx, uint8_t gain) {
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8000a7e:	78fb      	ldrb	r3, [r7, #3]
 8000a80:	2b80      	cmp	r3, #128	@ 0x80
 8000a82:	d006      	beq.n	8000a92 <HX711_set_gain+0x20>
 8000a84:	2b80      	cmp	r3, #128	@ 0x80
 8000a86:	dc10      	bgt.n	8000aaa <HX711_set_gain+0x38>
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d00a      	beq.n	8000aa2 <HX711_set_gain+0x30>
 8000a8c:	2b40      	cmp	r3, #64	@ 0x40
 8000a8e:	d004      	beq.n	8000a9a <HX711_set_gain+0x28>
		break;
	case 32:		// channel B, gain factor 32
		hx->GAIN = 2;
		break;
	}
}
 8000a90:	e00b      	b.n	8000aaa <HX711_set_gain+0x38>
		hx->GAIN = 1;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2201      	movs	r2, #1
 8000a96:	739a      	strb	r2, [r3, #14]
		break;
 8000a98:	e007      	b.n	8000aaa <HX711_set_gain+0x38>
		hx->GAIN = 3;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	739a      	strb	r2, [r3, #14]
		break;
 8000aa0:	e003      	b.n	8000aaa <HX711_set_gain+0x38>
		hx->GAIN = 2;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	739a      	strb	r2, [r3, #14]
		break;
 8000aa8:	bf00      	nop
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HX711_read>:

long HX711_read(HX711 *hx) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b088      	sub	sp, #32
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]

	// Wait for the chip to become ready.
	HX711_wait_ready(hx, 0);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f864 	bl	8000b8e <HX711_wait_ready>

	// Define structures for reading data into.
	unsigned long value = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
	uint8_t data[3] = { 0 };
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2100      	movs	r1, #0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	801a      	strh	r2, [r3, #0]
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	77fb      	strb	r3, [r7, #31]

	// Pulse the clock pin 24 times to read the data.
	data[2] = shiftIn(hx, MSBFIRST);
 8000adc:	2101      	movs	r1, #1
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff30 	bl	8000944 <shiftIn>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73bb      	strb	r3, [r7, #14]
	data[1] = shiftIn(hx, MSBFIRST);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ff2a 	bl	8000944 <shiftIn>
 8000af0:	4603      	mov	r3, r0
 8000af2:	737b      	strb	r3, [r7, #13]
	data[0] = shiftIn(hx, MSBFIRST);
 8000af4:	2101      	movs	r1, #1
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ff24 	bl	8000944 <shiftIn>
 8000afc:	4603      	mov	r3, r0
 8000afe:	733b      	strb	r3, [r7, #12]

	// Set the channel and the gain factor for the next reading using the clock pin.
	for (unsigned int i = 0; i < hx->GAIN; i++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	e024      	b.n	8000b50 <HX711_read+0x9a>
		HAL_GPIO_WritePin(hx->PD_SCK_Port, hx->PD_SCK_Pin, GPIO_PIN_SET);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	889b      	ldrh	r3, [r3, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4619      	mov	r1, r3
 8000b12:	f001 fda5 	bl	8002660 <HAL_GPIO_WritePin>
		for (uint16_t i = 0; i < SMALL_DELAY; i++) {} // Small delay
 8000b16:	2300      	movs	r3, #0
 8000b18:	82fb      	strh	r3, [r7, #22]
 8000b1a:	e002      	b.n	8000b22 <HX711_read+0x6c>
 8000b1c:	8afb      	ldrh	r3, [r7, #22]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	82fb      	strh	r3, [r7, #22]
 8000b22:	8afb      	ldrh	r3, [r7, #22]
 8000b24:	2b09      	cmp	r3, #9
 8000b26:	d9f9      	bls.n	8000b1c <HX711_read+0x66>
		HAL_GPIO_WritePin(hx->PD_SCK_Port, hx->PD_SCK_Pin, GPIO_PIN_RESET);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	889b      	ldrh	r3, [r3, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	f001 fd94 	bl	8002660 <HAL_GPIO_WritePin>
		for (uint16_t i = 0; i < SMALL_DELAY; i++) { } // Small delay
 8000b38:	2300      	movs	r3, #0
 8000b3a:	82bb      	strh	r3, [r7, #20]
 8000b3c:	e002      	b.n	8000b44 <HX711_read+0x8e>
 8000b3e:	8abb      	ldrh	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	82bb      	strh	r3, [r7, #20]
 8000b44:	8abb      	ldrh	r3, [r7, #20]
 8000b46:	2b09      	cmp	r3, #9
 8000b48:	d9f9      	bls.n	8000b3e <HX711_read+0x88>
	for (unsigned int i = 0; i < hx->GAIN; i++) {
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7b9b      	ldrb	r3, [r3, #14]
 8000b54:	461a      	mov	r2, r3
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d3d4      	bcc.n	8000b06 <HX711_read+0x50>
	}

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	da02      	bge.n	8000b6a <HX711_read+0xb4>
		filler = 0xFF;
 8000b64:	23ff      	movs	r3, #255	@ 0xff
 8000b66:	77fb      	strb	r3, [r7, #31]
 8000b68:	e001      	b.n	8000b6e <HX711_read+0xb8>
	} else {
		filler = 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	77fb      	strb	r3, [r7, #31]
	}

	// Construct a 32-bit signed integer
	value = (unsigned long) (filler << 24)
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
 8000b70:	061a      	lsls	r2, r3, #24
			| (unsigned long) (data[2] << 16)
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	431a      	orrs	r2, r3
			| (unsigned long) (data[1] << 8)
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	4313      	orrs	r3, r2
			| (unsigned long) (data[0]);
 8000b7e:	7b3a      	ldrb	r2, [r7, #12]
	value = (unsigned long) (filler << 24)
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]

	return (long) value;
 8000b84:	693b      	ldr	r3, [r7, #16]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3720      	adds	r7, #32
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HX711_wait_ready>:

void HX711_wait_ready(HX711 *hx, unsigned long delay_ms) {
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	// Wait for the chip to become ready.
	// This is a blocking implementation and will
	// halt the sketch until a load cell is connected.
	while (!HX711_is_ready(hx)) {
 8000b98:	e002      	b.n	8000ba0 <HX711_wait_ready+0x12>
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		HAL_Delay(delay_ms);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f001 fa92 	bl	80020c4 <HAL_Delay>
	while (!HX711_is_ready(hx)) {
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff50 	bl	8000a46 <HX711_is_ready>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f083 0301 	eor.w	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f3      	bne.n	8000b9a <HX711_wait_ready+0xc>
	}
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HX711_read_average>:
		HAL_Delay(delay_ms);
	}
	return false;
}

long HX711_read_average(HX711 *hx, uint8_t times) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
	long sum = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < times; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	72fb      	strb	r3, [r7, #11]
 8000bd0:	e00c      	b.n	8000bec <HX711_read_average+0x30>
		sum += HX711_read(hx);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ff6f 	bl	8000ab6 <HX711_read>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
		// Probably will do no harm on AVR but will feed the Watchdog Timer (WDT) on ESP.
		// https://github.com/bogde/HX711/issues/73
		HAL_Delay(0);
 8000be0:	2000      	movs	r0, #0
 8000be2:	f001 fa6f 	bl	80020c4 <HAL_Delay>
	for (uint8_t i = 0; i < times; i++) {
 8000be6:	7afb      	ldrb	r3, [r7, #11]
 8000be8:	3301      	adds	r3, #1
 8000bea:	72fb      	strb	r3, [r7, #11]
 8000bec:	7afa      	ldrb	r2, [r7, #11]
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d3ee      	bcc.n	8000bd2 <HX711_read_average+0x16>
	}
	return sum / times;
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HX711_get_value>:

float HX711_get_value(HX711 *hx, uint8_t times) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	return HX711_read_average(hx, times) - hx->OFFSET;
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	4619      	mov	r1, r3
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffd1 	bl	8000bbc <HX711_read_average>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HX711_get_units>:

float HX711_get_units(HX711 *hx, uint8_t times) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
	return HX711_get_value(hx, times) / hx->SCALE;
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	4619      	mov	r1, r3
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffdd 	bl	8000c04 <HX711_get_value>
 8000c4a:	eeb0 7a40 	vmov.f32	s14, s0
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c58:	eef0 7a66 	vmov.f32	s15, s13
}
 8000c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HX711_set_scale>:
void HX711_tare(HX711 *hx, uint8_t times) {
	float sum = HX711_read_average(hx, times);
	HX711_set_offset(hx, sum);
}

void HX711_set_scale(HX711 *hx, float scale) {
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	ed87 0a00 	vstr	s0, [r7]
	hx->SCALE = scale;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	615a      	str	r2, [r3, #20]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <HX711_get_scale>:

float HX711_get_scale(HX711 *hx) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	return hx->SCALE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	ee07 3a90 	vmov	s15, r3
}
 8000c94:	eeb0 0a67 	vmov.f32	s0, s15
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HX711_get_offset>:

void HX711_set_offset(HX711 *hx, long offset) {
	hx->OFFSET = offset;
}

long HX711_get_offset(HX711 *hx) {
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return hx->OFFSET;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SendCardDataToESP32>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to send card data to ESP32 in the required format
void SendCardDataToESP32(uint8_t* cardId, int32_t weight) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    uint8_t data[11];

    // Protocol: AA 01 UID[4] WEIGHT[4] 55
    data[0] = 0xAA;      // Start byte
 8000cc6:	23aa      	movs	r3, #170	@ 0xaa
 8000cc8:	733b      	strb	r3, [r7, #12]
    data[1] = 0x01;      // Type (card data)
 8000cca:	2301      	movs	r3, #1
 8000ccc:	737b      	strb	r3, [r7, #13]

    // Sao chép 4 byte UID
    memcpy(&data[2], cardId, 4);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f8c7 300e 	str.w	r3, [r7, #14]

    // Gửi weight dưới dạng big-endian
    data[6] = (weight >> 24) & 0xFF; // Byte cao nhất
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	74bb      	strb	r3, [r7, #18]
    data[7] = (weight >> 16) & 0xFF;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	141b      	asrs	r3, r3, #16
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	74fb      	strb	r3, [r7, #19]
    data[8] = (weight >> 8) & 0xFF;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	121b      	asrs	r3, r3, #8
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	753b      	strb	r3, [r7, #20]
    data[9] = weight & 0xFF;         // Byte thấp nhất
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	757b      	strb	r3, [r7, #21]

    data[10] = 0x55;     // End byte
 8000cf4:	2355      	movs	r3, #85	@ 0x55
 8000cf6:	75bb      	strb	r3, [r7, #22]
    // Debug dữ liệu gửi đi



    // Gửi qua UART2 (kết nối với ESP32)
    HAL_UART_Transmit(&huart1, data, 11, 1000);
 8000cf8:	f107 010c 	add.w	r1, r7, #12
 8000cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d00:	220b      	movs	r2, #11
 8000d02:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <SendCardDataToESP32+0x54>)
 8000d04:	f002 ffde 	bl	8003cc4 <HAL_UART_Transmit>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000d0 	.word	0x200000d0

08000d14 <Test_SPI_Connection>:

void Test_SPI_Connection(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09a      	sub	sp, #104	@ 0x68
 8000d18:	af00      	add	r7, sp, #0
    char debug_buf[100];

    // Test SPI by reading multiple registers
    sprintf(debug_buf, "=== SPI Communication Test ===\r\n");
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	491c      	ldr	r1, [pc, #112]	@ (8000d90 <Test_SPI_Connection+0x7c>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 fb8c 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fa62 	bl	80001f0 <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	1d39      	adds	r1, r7, #4
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	4817      	ldr	r0, [pc, #92]	@ (8000d94 <Test_SPI_Connection+0x80>)
 8000d38:	f002 ffc4 	bl	8003cc4 <HAL_UART_Transmit>

    // Test CS pin control
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4815      	ldr	r0, [pc, #84]	@ (8000d98 <Test_SPI_Connection+0x84>)
 8000d42:	f001 fc8d 	bl	8002660 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000d46:	200a      	movs	r0, #10
 8000d48:	f001 f9bc 	bl	80020c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2110      	movs	r1, #16
 8000d50:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <Test_SPI_Connection+0x84>)
 8000d52:	f001 fc85 	bl	8002660 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f001 f9b4 	bl	80020c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <Test_SPI_Connection+0x84>)
 8000d62:	f001 fc7d 	bl	8002660 <HAL_GPIO_WritePin>

    sprintf(debug_buf, "CS Pin Test: OK\r\n");
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <Test_SPI_Connection+0x88>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fb66 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fa3c 	bl	80001f0 <strlen>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	1d39      	adds	r1, r7, #4
 8000d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d82:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <Test_SPI_Connection+0x80>)
 8000d84:	f002 ff9e 	bl	8003cc4 <HAL_UART_Transmit>
}
 8000d88:	bf00      	nop
 8000d8a:	3768      	adds	r7, #104	@ 0x68
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	08004d94 	.word	0x08004d94
 8000d94:	200000d0 	.word	0x200000d0
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	08004db8 	.word	0x08004db8

08000da0 <Test_HX711_Connection>:

void Test_HX711_Connection(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0ae      	sub	sp, #184	@ 0xb8
 8000da4:	af02      	add	r7, sp, #8
    char debug_buf[150];

    sprintf(debug_buf, "=== HX711 Test ===\r\n");
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4960      	ldr	r1, [pc, #384]	@ (8000f2c <Test_HX711_Connection+0x18c>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 fb46 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa1c 	bl	80001f0 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	1d39      	adds	r1, r7, #4
 8000dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc2:	485b      	ldr	r0, [pc, #364]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000dc4:	f002 ff7e 	bl	8003cc4 <HAL_UART_Transmit>

    // Test HX711 ready state
    if (HX711_is_ready(&hx)) {
 8000dc8:	485a      	ldr	r0, [pc, #360]	@ (8000f34 <Test_HX711_Connection+0x194>)
 8000dca:	f7ff fe3c 	bl	8000a46 <HX711_is_ready>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d005      	beq.n	8000de0 <Test_HX711_Connection+0x40>
        sprintf(debug_buf, "HX711 Ready: YES\r\n");
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4958      	ldr	r1, [pc, #352]	@ (8000f38 <Test_HX711_Connection+0x198>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fb2f 	bl	800443c <siprintf>
 8000dde:	e004      	b.n	8000dea <Test_HX711_Connection+0x4a>
    } else {
        sprintf(debug_buf, "HX711 Ready: NO (Check DT pin PD1)\r\n");
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4956      	ldr	r1, [pc, #344]	@ (8000f3c <Test_HX711_Connection+0x19c>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fb29 	bl	800443c <siprintf>
    }
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff f9ff 	bl	80001f0 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	1d39      	adds	r1, r7, #4
 8000df8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfc:	484c      	ldr	r0, [pc, #304]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000dfe:	f002 ff61 	bl	8003cc4 <HAL_UART_Transmit>

    // Test raw reading
    long raw_value = HX711_read(&hx);
 8000e02:	484c      	ldr	r0, [pc, #304]	@ (8000f34 <Test_HX711_Connection+0x194>)
 8000e04:	f7ff fe57 	bl	8000ab6 <HX711_read>
 8000e08:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    sprintf(debug_buf, "HX711 Raw Value: %ld\r\n", raw_value);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8000e12:	494b      	ldr	r1, [pc, #300]	@ (8000f40 <Test_HX711_Connection+0x1a0>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fb11 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff f9e7 	bl	80001f0 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	1d39      	adds	r1, r7, #4
 8000e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2c:	4840      	ldr	r0, [pc, #256]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000e2e:	f002 ff49 	bl	8003cc4 <HAL_UART_Transmit>

    // Test get_value function
    float get_value = HX711_get_value(&hx, 1);
 8000e32:	2101      	movs	r1, #1
 8000e34:	483f      	ldr	r0, [pc, #252]	@ (8000f34 <Test_HX711_Connection+0x194>)
 8000e36:	f7ff fee5 	bl	8000c04 <HX711_get_value>
 8000e3a:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8
    sprintf(debug_buf, "HX711 Get Value: %.2f\r\n", get_value);
 8000e3e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8000e42:	f7ff fb91 	bl	8000568 <__aeabi_f2d>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	1d38      	adds	r0, r7, #4
 8000e4c:	493d      	ldr	r1, [pc, #244]	@ (8000f44 <Test_HX711_Connection+0x1a4>)
 8000e4e:	f003 faf5 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9cb 	bl	80001f0 <strlen>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	1d39      	adds	r1, r7, #4
 8000e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e64:	4832      	ldr	r0, [pc, #200]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000e66:	f002 ff2d 	bl	8003cc4 <HAL_UART_Transmit>

    // Test get_units function
    float get_units = HX711_get_units(&hx, 1);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4831      	ldr	r0, [pc, #196]	@ (8000f34 <Test_HX711_Connection+0x194>)
 8000e6e:	f7ff fee1 	bl	8000c34 <HX711_get_units>
 8000e72:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
    sprintf(debug_buf, "HX711 Get Units: %.2f\r\n", get_units);
 8000e76:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8000e7a:	f7ff fb75 	bl	8000568 <__aeabi_f2d>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	1d38      	adds	r0, r7, #4
 8000e84:	4930      	ldr	r1, [pc, #192]	@ (8000f48 <Test_HX711_Connection+0x1a8>)
 8000e86:	f003 fad9 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9af 	bl	80001f0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	1d39      	adds	r1, r7, #4
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	4824      	ldr	r0, [pc, #144]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000e9e:	f002 ff11 	bl	8003cc4 <HAL_UART_Transmit>

    // Check scale and offset
    float scale = HX711_get_scale(&hx);
 8000ea2:	4824      	ldr	r0, [pc, #144]	@ (8000f34 <Test_HX711_Connection+0x194>)
 8000ea4:	f7ff feee 	bl	8000c84 <HX711_get_scale>
 8000ea8:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0
    long offset = HX711_get_offset(&hx);
 8000eac:	4821      	ldr	r0, [pc, #132]	@ (8000f34 <Test_HX711_Connection+0x194>)
 8000eae:	f7ff fef8 	bl	8000ca2 <HX711_get_offset>
 8000eb2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    sprintf(debug_buf, "HX711 Scale: %.2f, Offset: %ld\r\n", scale, offset);
 8000eb6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000eba:	f7ff fb55 	bl	8000568 <__aeabi_f2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	1d38      	adds	r0, r7, #4
 8000ec4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8000ec8:	9100      	str	r1, [sp, #0]
 8000eca:	4920      	ldr	r1, [pc, #128]	@ (8000f4c <Test_HX711_Connection+0x1ac>)
 8000ecc:	f003 fab6 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f98c 	bl	80001f0 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee2:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000ee4:	f002 feee 	bl	8003cc4 <HAL_UART_Transmit>

    // Test SCK pin toggle
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2101      	movs	r1, #1
 8000eec:	4818      	ldr	r0, [pc, #96]	@ (8000f50 <Test_HX711_Connection+0x1b0>)
 8000eee:	f001 fbb7 	bl	8002660 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f001 f8e6 	bl	80020c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	4814      	ldr	r0, [pc, #80]	@ (8000f50 <Test_HX711_Connection+0x1b0>)
 8000efe:	f001 fbaf 	bl	8002660 <HAL_GPIO_WritePin>
    sprintf(debug_buf, "SCK Pin Toggle: OK\r\n");
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4913      	ldr	r1, [pc, #76]	@ (8000f54 <Test_HX711_Connection+0x1b4>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fa98 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f96e 	bl	80001f0 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	1d39      	adds	r1, r7, #4
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <Test_HX711_Connection+0x190>)
 8000f20:	f002 fed0 	bl	8003cc4 <HAL_UART_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	37b0      	adds	r7, #176	@ 0xb0
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08004dcc 	.word	0x08004dcc
 8000f30:	200000d0 	.word	0x200000d0
 8000f34:	20000160 	.word	0x20000160
 8000f38:	08004de4 	.word	0x08004de4
 8000f3c:	08004df8 	.word	0x08004df8
 8000f40:	08004e20 	.word	0x08004e20
 8000f44:	08004e38 	.word	0x08004e38
 8000f48:	08004e50 	.word	0x08004e50
 8000f4c:	08004e68 	.word	0x08004e68
 8000f50:	40020c00 	.word	0x40020c00
 8000f54:	08004e8c 	.word	0x08004e8c

08000f58 <MFRC522_Debug>:

void MFRC522_Debug(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0a8      	sub	sp, #160	@ 0xa0
 8000f5c:	af00      	add	r7, sp, #0
    char debug_buf[150];

    sprintf(debug_buf, "=== MFRC522 Debug ===\r\n");
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4969      	ldr	r1, [pc, #420]	@ (8001108 <MFRC522_Debug+0x1b0>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fa6a 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f940 	bl	80001f0 <strlen>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	1d39      	adds	r1, r7, #4
 8000f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7a:	4864      	ldr	r0, [pc, #400]	@ (800110c <MFRC522_Debug+0x1b4>)
 8000f7c:	f002 fea2 	bl	8003cc4 <HAL_UART_Transmit>

    // Test MFRC522 communication
    uint8_t version = TM_MFRC522_ReadRegister(0x37); // Version register
 8000f80:	2037      	movs	r0, #55	@ 0x37
 8000f82:	f000 fdcf 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    sprintf(debug_buf, "MFRC522 Version: 0x%02X (Expected: 0x91 or 0x92)\r\n", version);
 8000f8c:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	495f      	ldr	r1, [pc, #380]	@ (8001110 <MFRC522_Debug+0x1b8>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fa51 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f927 	bl	80001f0 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	1d39      	adds	r1, r7, #4
 8000fa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fac:	4857      	ldr	r0, [pc, #348]	@ (800110c <MFRC522_Debug+0x1b4>)
 8000fae:	f002 fe89 	bl	8003cc4 <HAL_UART_Transmit>

    // Test antenna
    uint8_t antenna = TM_MFRC522_ReadRegister(0x14); // TxControlReg
 8000fb2:	2014      	movs	r0, #20
 8000fb4:	f000 fdb6 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    sprintf(debug_buf, "Antenna Status: 0x%02X\r\n", antenna);
 8000fbe:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	4953      	ldr	r1, [pc, #332]	@ (8001114 <MFRC522_Debug+0x1bc>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 fa38 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f90e 	bl	80001f0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	1d39      	adds	r1, r7, #4
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	484b      	ldr	r0, [pc, #300]	@ (800110c <MFRC522_Debug+0x1b4>)
 8000fe0:	f002 fe70 	bl	8003cc4 <HAL_UART_Transmit>

    // Test CommandReg
    uint8_t command = TM_MFRC522_ReadRegister(0x01); // CommandReg
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fd9d 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
    sprintf(debug_buf, "Command Reg: 0x%02X\r\n", command);
 8000ff0:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4948      	ldr	r1, [pc, #288]	@ (8001118 <MFRC522_Debug+0x1c0>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fa1f 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f8f5 	bl	80001f0 <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	1d39      	adds	r1, r7, #4
 800100c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001010:	483e      	ldr	r0, [pc, #248]	@ (800110c <MFRC522_Debug+0x1b4>)
 8001012:	f002 fe57 	bl	8003cc4 <HAL_UART_Transmit>

    // Test Status1Reg
    uint8_t status1 = TM_MFRC522_ReadRegister(0x07); // Status1Reg
 8001016:	2007      	movs	r0, #7
 8001018:	f000 fd84 	bl	8001b24 <TM_MFRC522_ReadRegister>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
    sprintf(debug_buf, "Status1 Reg: 0x%02X\r\n", status1);
 8001022:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	493c      	ldr	r1, [pc, #240]	@ (800111c <MFRC522_Debug+0x1c4>)
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fa06 	bl	800443c <siprintf>
    HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8dc 	bl	80001f0 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	4832      	ldr	r0, [pc, #200]	@ (800110c <MFRC522_Debug+0x1b4>)
 8001044:	f002 fe3e 	bl	8003cc4 <HAL_UART_Transmit>

    if (version == 0x00 || version == 0xFF) {
 8001048:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <MFRC522_Debug+0x100>
 8001050:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8001054:	2bff      	cmp	r3, #255	@ 0xff
 8001056:	d152      	bne.n	80010fe <MFRC522_Debug+0x1a6>
        sprintf(debug_buf, "ERROR: No communication with MFRC522!\r\n");
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4931      	ldr	r1, [pc, #196]	@ (8001120 <MFRC522_Debug+0x1c8>)
 800105c:	4618      	mov	r0, r3
 800105e:	f003 f9ed 	bl	800443c <siprintf>
        sprintf(debug_buf + strlen(debug_buf), "Check connections:\r\n");
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f8c3 	bl	80001f0 <strlen>
 800106a:	4602      	mov	r2, r0
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4413      	add	r3, r2
 8001070:	492c      	ldr	r1, [pc, #176]	@ (8001124 <MFRC522_Debug+0x1cc>)
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f9e2 	bl	800443c <siprintf>
        sprintf(debug_buf + strlen(debug_buf), "- VCC: 3.3V (NOT 5V!)\r\n");
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f8b8 	bl	80001f0 <strlen>
 8001080:	4602      	mov	r2, r0
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4413      	add	r3, r2
 8001086:	4928      	ldr	r1, [pc, #160]	@ (8001128 <MFRC522_Debug+0x1d0>)
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f9d7 	bl	800443c <siprintf>
        sprintf(debug_buf + strlen(debug_buf), "- SDA: PE4\r\n");
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f8ad 	bl	80001f0 <strlen>
 8001096:	4602      	mov	r2, r0
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4413      	add	r3, r2
 800109c:	4923      	ldr	r1, [pc, #140]	@ (800112c <MFRC522_Debug+0x1d4>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 f9cc 	bl	800443c <siprintf>
        sprintf(debug_buf + strlen(debug_buf), "- SCK: PE2\r\n");
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f8a2 	bl	80001f0 <strlen>
 80010ac:	4602      	mov	r2, r0
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	491f      	ldr	r1, [pc, #124]	@ (8001130 <MFRC522_Debug+0x1d8>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 f9c1 	bl	800443c <siprintf>
        sprintf(debug_buf + strlen(debug_buf), "- MISO: PE5\r\n");
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f897 	bl	80001f0 <strlen>
 80010c2:	4602      	mov	r2, r0
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	491a      	ldr	r1, [pc, #104]	@ (8001134 <MFRC522_Debug+0x1dc>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 f9b6 	bl	800443c <siprintf>
        sprintf(debug_buf + strlen(debug_buf), "- MOSI: PE6\r\n");
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f88c 	bl	80001f0 <strlen>
 80010d8:	4602      	mov	r2, r0
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4413      	add	r3, r2
 80010de:	4916      	ldr	r1, [pc, #88]	@ (8001138 <MFRC522_Debug+0x1e0>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 f9ab 	bl	800443c <siprintf>
        HAL_UART_Transmit(&huart1, (const uint8_t*)debug_buf, strlen(debug_buf), 1000);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f881 	bl	80001f0 <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	1d39      	adds	r1, r7, #4
 80010f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MFRC522_Debug+0x1b4>)
 80010fa:	f002 fde3 	bl	8003cc4 <HAL_UART_Transmit>
    }
}
 80010fe:	bf00      	nop
 8001100:	37a0      	adds	r7, #160	@ 0xa0
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08004ea4 	.word	0x08004ea4
 800110c:	200000d0 	.word	0x200000d0
 8001110:	08004ebc 	.word	0x08004ebc
 8001114:	08004ef0 	.word	0x08004ef0
 8001118:	08004f0c 	.word	0x08004f0c
 800111c:	08004f24 	.word	0x08004f24
 8001120:	08004f3c 	.word	0x08004f3c
 8001124:	08004f64 	.word	0x08004f64
 8001128:	08004f7c 	.word	0x08004f7c
 800112c:	08004f94 	.word	0x08004f94
 8001130:	08004fa4 	.word	0x08004fa4
 8001134:	08004fb4 	.word	0x08004fb4
 8001138:	08004fc4 	.word	0x08004fc4

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b0bf      	sub	sp, #252	@ 0xfc
 8001140:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f000 ff4d 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f943 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 fa3b 	bl	80015c4 <MX_GPIO_Init>
  MX_SPI4_Init();
 800114e:	f000 f9af 	bl	80014b0 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8001152:	f000 f9e3 	bl	800151c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001156:	f000 fa0b 	bl	8001570 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Declare buffer here
  char buf[200];

  // Send initialization message
  sprintf(buf, "=== System Diagnostic ===\r\n");
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	498f      	ldr	r1, [pc, #572]	@ (800139c <main+0x260>)
 8001160:	4618      	mov	r0, r3
 8001162:	f003 f96b 	bl	800443c <siprintf>
  HAL_UART_Transmit(&huart1, (const uint8_t*)buf, strlen(buf), 1000);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f840 	bl	80001f0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 010c 	add.w	r1, r7, #12
 8001178:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800117c:	4888      	ldr	r0, [pc, #544]	@ (80013a0 <main+0x264>)
 800117e:	f002 fda1 	bl	8003cc4 <HAL_UART_Transmit>

  // Test SPI connection first
  Test_SPI_Connection();
 8001182:	f7ff fdc7 	bl	8000d14 <Test_SPI_Connection>

  // Initialize MFRC522
  TM_MFRC522_Init();
 8001186:	f000 fc3d 	bl	8001a04 <TM_MFRC522_Init>

  // Debug MFRC522
  MFRC522_Debug();
 800118a:	f7ff fee5 	bl	8000f58 <MFRC522_Debug>

  // Initialize HX711
  HX711_begin(&hx, GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1, 128);
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2302      	movs	r3, #2
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	4b83      	ldr	r3, [pc, #524]	@ (80013a4 <main+0x268>)
 8001198:	2201      	movs	r2, #1
 800119a:	4982      	ldr	r1, [pc, #520]	@ (80013a4 <main+0x268>)
 800119c:	4882      	ldr	r0, [pc, #520]	@ (80013a8 <main+0x26c>)
 800119e:	f7ff fc35 	bl	8000a0c <HX711_begin>

  // Test HX711 connection BEFORE configuration
  Test_HX711_Connection();
 80011a2:	f7ff fdfd 	bl	8000da0 <Test_HX711_Connection>

  // Configure HX711
  HX711_set_scale(&hx, 2); // Set scale to 2 for testing
 80011a6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80011aa:	487f      	ldr	r0, [pc, #508]	@ (80013a8 <main+0x26c>)
 80011ac:	f7ff fd5b 	bl	8000c66 <HX711_set_scale>
  sprintf(buf, "HX711 scale set to 2 for testing\r\n");
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	497d      	ldr	r1, [pc, #500]	@ (80013ac <main+0x270>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f940 	bl	800443c <siprintf>
  HAL_UART_Transmit(&huart1, (const uint8_t*)buf, strlen(buf), 1000);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f815 	bl	80001f0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	4873      	ldr	r0, [pc, #460]	@ (80013a0 <main+0x264>)
 80011d4:	f002 fd76 	bl	8003cc4 <HAL_UART_Transmit>

  // Don't tare yet - let's see raw values first
  // HX711_tare(&hx, 10);

  sprintf(buf, "=== Initialization Complete ===\r\n");
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4974      	ldr	r1, [pc, #464]	@ (80013b0 <main+0x274>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 f92c 	bl	800443c <siprintf>
  HAL_UART_Transmit(&huart1, (const uint8_t*)buf, strlen(buf), 1000);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f801 	bl	80001f0 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	f107 010c 	add.w	r1, r7, #12
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	4869      	ldr	r0, [pc, #420]	@ (80013a0 <main+0x264>)
 80011fc:	f002 fd62 	bl	8003cc4 <HAL_UART_Transmit>

  HAL_Delay(2000);
 8001200:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001204:	f000 ff5e 	bl	80020c4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
    uint8_t CardID[5];
    uint8_t status;
    int weight = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    long raw_value = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    // Clear CardID array
    memset(CardID, 0, sizeof(CardID));
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2205      	movs	r2, #5
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f930 	bl	8004480 <memset>

    // Always try to read weight first
    if (HX711_is_ready(&hx)) {
 8001220:	4861      	ldr	r0, [pc, #388]	@ (80013a8 <main+0x26c>)
 8001222:	f7ff fc10 	bl	8000a46 <HX711_is_ready>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d010      	beq.n	800124e <main+0x112>
        raw_value = HX711_read(&hx);
 800122c:	485e      	ldr	r0, [pc, #376]	@ (80013a8 <main+0x26c>)
 800122e:	f7ff fc42 	bl	8000ab6 <HX711_read>
 8001232:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        weight = HX711_get_units(&hx, 1); // Single reading for speed
 8001236:	2101      	movs	r1, #1
 8001238:	485b      	ldr	r0, [pc, #364]	@ (80013a8 <main+0x26c>)
 800123a:	f7ff fcfb 	bl	8000c34 <HX711_get_units>
 800123e:	eef0 7a40 	vmov.f32	s15, s0
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    }

    // Check for RFID card
    status = TM_MFRC522_Check(CardID);
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fbfd 	bl	8001a50 <TM_MFRC522_Check>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

    if (status == MI_OK) {
 800125c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8001260:	2b00      	cmp	r3, #0
 8001262:	d168      	bne.n	8001336 <main+0x1fa>
        // Card detected successfully
        if (HX711_is_ready(&hx)) {
 8001264:	4850      	ldr	r0, [pc, #320]	@ (80013a8 <main+0x26c>)
 8001266:	f7ff fbee 	bl	8000a46 <HX711_is_ready>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d010      	beq.n	8001292 <main+0x156>
            raw_value = HX711_read(&hx);
 8001270:	484d      	ldr	r0, [pc, #308]	@ (80013a8 <main+0x26c>)
 8001272:	f7ff fc20 	bl	8000ab6 <HX711_read>
 8001276:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            weight = HX711_get_units(&hx, 3); // More readings for accuracy
 800127a:	2103      	movs	r1, #3
 800127c:	484a      	ldr	r0, [pc, #296]	@ (80013a8 <main+0x26c>)
 800127e:	f7ff fcd9 	bl	8000c34 <HX711_get_units>
 8001282:	eef0 7a40 	vmov.f32	s15, s0
 8001286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128a:	ee17 3a90 	vmov	r3, s15
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

        }
        weight = weight/ 100 -5114 + 2557;
 8001292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001296:	4a47      	ldr	r2, [pc, #284]	@ (80013b4 <main+0x278>)
 8001298:	fb82 1203 	smull	r1, r2, r2, r3
 800129c:	1152      	asrs	r2, r2, #5
 800129e:	17db      	asrs	r3, r3, #31
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f6a3 13fd 	subw	r3, r3, #2557	@ 0x9fd
 80012a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        // Format and send card ID + weight with debug info
        sprintf(buf, "*** CARD DETECTED ***\r\nID: %02X%02X%02X%02X%02X\r\nRaw: %ld | Weight: %d g\r\n==================\r\n",
                CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], raw_value, weight);
 80012aa:	793b      	ldrb	r3, [r7, #4]
        sprintf(buf, "*** CARD DETECTED ***\r\nID: %02X%02X%02X%02X%02X\r\nRaw: %ld | Weight: %d g\r\n==================\r\n",
 80012ac:	461d      	mov	r5, r3
                CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], raw_value, weight);
 80012ae:	797b      	ldrb	r3, [r7, #5]
        sprintf(buf, "*** CARD DETECTED ***\r\nID: %02X%02X%02X%02X%02X\r\nRaw: %ld | Weight: %d g\r\n==================\r\n",
 80012b0:	461e      	mov	r6, r3
                CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], raw_value, weight);
 80012b2:	79bb      	ldrb	r3, [r7, #6]
        sprintf(buf, "*** CARD DETECTED ***\r\nID: %02X%02X%02X%02X%02X\r\nRaw: %ld | Weight: %d g\r\n==================\r\n",
 80012b4:	461a      	mov	r2, r3
                CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], raw_value, weight);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
        sprintf(buf, "*** CARD DETECTED ***\r\nID: %02X%02X%02X%02X%02X\r\nRaw: %ld | Weight: %d g\r\n==================\r\n",
 80012b8:	4619      	mov	r1, r3
                CardID[0], CardID[1], CardID[2], CardID[3], CardID[4], raw_value, weight);
 80012ba:	7a3b      	ldrb	r3, [r7, #8]
        sprintf(buf, "*** CARD DETECTED ***\r\nID: %02X%02X%02X%02X%02X\r\nRaw: %ld | Weight: %d g\r\n==================\r\n",
 80012bc:	461c      	mov	r4, r3
 80012be:	f107 000c 	add.w	r0, r7, #12
 80012c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80012c6:	9304      	str	r3, [sp, #16]
 80012c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	9402      	str	r4, [sp, #8]
 80012d0:	9101      	str	r1, [sp, #4]
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	4633      	mov	r3, r6
 80012d6:	462a      	mov	r2, r5
 80012d8:	4937      	ldr	r1, [pc, #220]	@ (80013b8 <main+0x27c>)
 80012da:	f003 f8af 	bl	800443c <siprintf>

        HAL_UART_Transmit(&huart1, (const uint8_t*)buf, strlen(buf), 1000);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7fe ff84 	bl	80001f0 <strlen>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f107 010c 	add.w	r1, r7, #12
 80012f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f4:	482a      	ldr	r0, [pc, #168]	@ (80013a0 <main+0x264>)
 80012f6:	f002 fce5 	bl	8003cc4 <HAL_UART_Transmit>


        SendCardDataToESP32(CardID, weight);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fcdb 	bl	8000cbc <SendCardDataToESP32>

        // Turn on LED to indicate card read
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800130c:	482b      	ldr	r0, [pc, #172]	@ (80013bc <main+0x280>)
 800130e:	f001 f9a7 	bl	8002660 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8001312:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001316:	f000 fed5 	bl	80020c4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001320:	4826      	ldr	r0, [pc, #152]	@ (80013bc <main+0x280>)
 8001322:	f001 f99d 	bl	8002660 <HAL_GPIO_WritePin>

        // Reset counter
        no_card_counter = 0;
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <main+0x284>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        // Wait to avoid multiple reads
        HAL_Delay(500);
 800132c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001330:	f000 fec8 	bl	80020c4 <HAL_Delay>
 8001334:	e768      	b.n	8001208 <main+0xcc>

    } else {
        // No card detected - only show occasionally
        no_card_counter++;
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <main+0x284>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a20      	ldr	r2, [pc, #128]	@ (80013c0 <main+0x284>)
 800133e:	6013      	str	r3, [r2, #0]

        if (no_card_counter >= 10) { // Show every 10th cycle (5 seconds)
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <main+0x284>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d923      	bls.n	8001390 <main+0x254>
            sprintf(buf, "Waiting for card... | Raw: %ld | Weight: %d g | MFRC522 Status: 0x%02X\r\n", raw_value, weight, status);
 8001348:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800134c:	f107 000c 	add.w	r0, r7, #12
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001356:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800135a:	491a      	ldr	r1, [pc, #104]	@ (80013c4 <main+0x288>)
 800135c:	f003 f86e 	bl	800443c <siprintf>
            HAL_UART_Transmit(&huart1, (const uint8_t*)buf, strlen(buf), 1000);
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff43 	bl	80001f0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 010c 	add.w	r1, r7, #12
 8001372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001376:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <main+0x264>)
 8001378:	f002 fca4 	bl	8003cc4 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, 'hello', 5, 1000);
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	2205      	movs	r2, #5
 8001382:	4911      	ldr	r1, [pc, #68]	@ (80013c8 <main+0x28c>)
 8001384:	4811      	ldr	r0, [pc, #68]	@ (80013cc <main+0x290>)
 8001386:	f002 fc9d 	bl	8003cc4 <HAL_UART_Transmit>
            no_card_counter = 0;
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <main+0x284>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
        }

        HAL_Delay(500);
 8001390:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001394:	f000 fe96 	bl	80020c4 <HAL_Delay>
  {
 8001398:	e736      	b.n	8001208 <main+0xcc>
 800139a:	bf00      	nop
 800139c:	08004fd4 	.word	0x08004fd4
 80013a0:	200000d0 	.word	0x200000d0
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	20000160 	.word	0x20000160
 80013ac:	08004ff0 	.word	0x08004ff0
 80013b0:	08005014 	.word	0x08005014
 80013b4:	51eb851f 	.word	0x51eb851f
 80013b8:	08005038 	.word	0x08005038
 80013bc:	40021800 	.word	0x40021800
 80013c0:	20000178 	.word	0x20000178
 80013c4:	08005098 	.word	0x08005098
 80013c8:	656c6c6f 	.word	0x656c6c6f
 80013cc:	20000118 	.word	0x20000118

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	@ 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2230      	movs	r2, #48	@ 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 f84e 	bl	8004480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <SystemClock_Config+0xd8>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	4a2a      	ldr	r2, [pc, #168]	@ (80014a8 <SystemClock_Config+0xd8>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	@ 0x40
 8001404:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <SystemClock_Config+0xd8>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <SystemClock_Config+0xdc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <SystemClock_Config+0xdc>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <SystemClock_Config+0xdc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001430:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001440:	2304      	movs	r3, #4
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001444:	23b4      	movs	r3, #180	@ 0xb4
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800144c:	2304      	movs	r3, #4
 800144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f001 f96d 	bl	8002734 <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001460:	f000 f966 	bl	8001730 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001464:	f001 f916 	bl	8002694 <HAL_PWREx_EnableOverDrive>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800146e:	f000 f95f 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800147e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001484:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2105      	movs	r1, #5
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fbc7 	bl	8002c24 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800149c:	f000 f948 	bl	8001730 <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3750      	adds	r7, #80	@ 0x50
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <MX_SPI4_Init+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // Reduced from 2 to 32
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014e4:	2220      	movs	r2, #32
 80014e6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_SPI4_Init+0x64>)
 80014fc:	220a      	movs	r2, #10
 80014fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_SPI4_Init+0x64>)
 8001502:	f001 fdaf 	bl	8003064 <HAL_SPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800150c:	f000 f910 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000078 	.word	0x20000078
 8001518:	40013400 	.word	0x40013400

0800151c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f002 fb66 	bl	8003c24 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 f8e7 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000d0 	.word	0x200000d0
 800156c:	40011000 	.word	0x40011000

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_USART2_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_USART2_UART_Init+0x4c>)
 80015a8:	f002 fb3c 	bl	8003c24 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 f8bd 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000118 	.word	0x20000118
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <MX_GPIO_Init+0x158>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a4e      	ldr	r2, [pc, #312]	@ (800171c <MX_GPIO_Init+0x158>)
 80015e4:	f043 0310 	orr.w	r3, r3, #16
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b4c      	ldr	r3, [pc, #304]	@ (800171c <MX_GPIO_Init+0x158>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b48      	ldr	r3, [pc, #288]	@ (800171c <MX_GPIO_Init+0x158>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a47      	ldr	r2, [pc, #284]	@ (800171c <MX_GPIO_Init+0x158>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b45      	ldr	r3, [pc, #276]	@ (800171c <MX_GPIO_Init+0x158>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b41      	ldr	r3, [pc, #260]	@ (800171c <MX_GPIO_Init+0x158>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a40      	ldr	r2, [pc, #256]	@ (800171c <MX_GPIO_Init+0x158>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b3e      	ldr	r3, [pc, #248]	@ (800171c <MX_GPIO_Init+0x158>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b3a      	ldr	r3, [pc, #232]	@ (800171c <MX_GPIO_Init+0x158>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a39      	ldr	r2, [pc, #228]	@ (800171c <MX_GPIO_Init+0x158>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b37      	ldr	r3, [pc, #220]	@ (800171c <MX_GPIO_Init+0x158>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b33      	ldr	r3, [pc, #204]	@ (800171c <MX_GPIO_Init+0x158>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a32      	ldr	r2, [pc, #200]	@ (800171c <MX_GPIO_Init+0x158>)
 8001654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b30      	ldr	r3, [pc, #192]	@ (800171c <MX_GPIO_Init+0x158>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET); // CS pin HIGH initially
 8001666:	2201      	movs	r2, #1
 8001668:	2110      	movs	r1, #16
 800166a:	482d      	ldr	r0, [pc, #180]	@ (8001720 <MX_GPIO_Init+0x15c>)
 800166c:	f000 fff8 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2101      	movs	r1, #1
 8001674:	482b      	ldr	r0, [pc, #172]	@ (8001724 <MX_GPIO_Init+0x160>)
 8001676:	f000 fff3 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001680:	4829      	ldr	r0, [pc, #164]	@ (8001728 <MX_GPIO_Init+0x164>)
 8001682:	f000 ffed 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001686:	2310      	movs	r3, #16
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4820      	ldr	r0, [pc, #128]	@ (8001720 <MX_GPIO_Init+0x15c>)
 800169e:	f000 fe1b 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	481b      	ldr	r0, [pc, #108]	@ (800172c <MX_GPIO_Init+0x168>)
 80016be:	f000 fe0b 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	@ (8001724 <MX_GPIO_Init+0x160>)
 80016da:	f000 fdfd 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <MX_GPIO_Init+0x160>)
 80016f2:	f000 fdf1 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	@ (8001728 <MX_GPIO_Init+0x164>)
 8001710:	f000 fde2 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	@ 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40021000 	.word	0x40021000
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40021800 	.word	0x40021800
 800172c:	40020000 	.word	0x40020000

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <Error_Handler+0x8>

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a0f      	ldr	r2, [pc, #60]	@ (8001788 <HAL_MspInit+0x4c>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b0d      	ldr	r3, [pc, #52]	@ (8001788 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <HAL_MspInit+0x4c>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <HAL_SPI_MspInit+0x84>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d12b      	bne.n	8001806 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <HAL_SPI_MspInit+0x88>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <HAL_SPI_MspInit+0x88>)
 80017b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_SPI_MspInit+0x88>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_SPI_MspInit+0x88>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_SPI_MspInit+0x88>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_SPI_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80017e6:	2364      	movs	r3, #100	@ 0x64
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80017f6:	2305      	movs	r3, #5
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_SPI_MspInit+0x8c>)
 8001802:	f000 fd69 	bl	80022d8 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40013400 	.word	0x40013400
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a32      	ldr	r2, [pc, #200]	@ (8001904 <HAL_UART_MspInit+0xe8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12d      	bne.n	800189a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <HAL_UART_MspInit+0xec>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <HAL_UART_MspInit+0xec>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b2e      	ldr	r3, [pc, #184]	@ (8001908 <HAL_UART_MspInit+0xec>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <HAL_UART_MspInit+0xec>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a29      	ldr	r2, [pc, #164]	@ (8001908 <HAL_UART_MspInit+0xec>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_UART_MspInit+0xec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001876:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001888:	2307      	movs	r3, #7
 800188a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	4619      	mov	r1, r3
 8001892:	481e      	ldr	r0, [pc, #120]	@ (800190c <HAL_UART_MspInit+0xf0>)
 8001894:	f000 fd20 	bl	80022d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001898:	e030      	b.n	80018fc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <HAL_UART_MspInit+0xf4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d12b      	bne.n	80018fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <HAL_UART_MspInit+0xec>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	4a16      	ldr	r2, [pc, #88]	@ (8001908 <HAL_UART_MspInit+0xec>)
 80018ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b4:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <HAL_UART_MspInit+0xec>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_UART_MspInit+0xec>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_UART_MspInit+0xec>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_UART_MspInit+0xec>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018dc:	230c      	movs	r3, #12
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ec:	2307      	movs	r3, #7
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <HAL_UART_MspInit+0xf0>)
 80018f8:	f000 fcee 	bl	80022d8 <HAL_GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	@ 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40011000 	.word	0x40011000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40004400 	.word	0x40004400

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 fb8b 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f002 fd74 	bl	8004490 <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20030000 	.word	0x20030000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	2000017c 	.word	0x2000017c
 80019dc:	200002d0 	.word	0x200002d0

080019e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8001a08:	f000 f83c 	bl	8001a84 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8001a0c:	f000 f921 	bl	8001c52 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001a10:	218d      	movs	r1, #141	@ 0x8d
 8001a12:	202a      	movs	r0, #42	@ 0x2a
 8001a14:	f000 f842 	bl	8001a9c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001a18:	213e      	movs	r1, #62	@ 0x3e
 8001a1a:	202b      	movs	r0, #43	@ 0x2b
 8001a1c:	f000 f83e 	bl	8001a9c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001a20:	211e      	movs	r1, #30
 8001a22:	202d      	movs	r0, #45	@ 0x2d
 8001a24:	f000 f83a 	bl	8001a9c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	202c      	movs	r0, #44	@ 0x2c
 8001a2c:	f000 f836 	bl	8001a9c <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8001a30:	2170      	movs	r1, #112	@ 0x70
 8001a32:	2026      	movs	r0, #38	@ 0x26
 8001a34:	f000 f832 	bl	8001a9c <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001a38:	2140      	movs	r1, #64	@ 0x40
 8001a3a:	2015      	movs	r0, #21
 8001a3c:	f000 f82e 	bl	8001a9c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001a40:	213d      	movs	r1, #61	@ 0x3d
 8001a42:	2011      	movs	r0, #17
 8001a44:	f000 f82a 	bl	8001a9c <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8001a48:	f000 f8ee 	bl	8001c28 <TM_MFRC522_AntennaOn>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	2026      	movs	r0, #38	@ 0x26
 8001a5c:	f000 f901 	bl	8001c62 <TM_MFRC522_Request>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d104      	bne.n	8001a74 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f9ed 	bl	8001e4a <TM_MFRC522_Anticoll>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8001a74:	f000 fa6f 	bl	8001f56 <TM_MFRC522_Halt>

	return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <TM_MFRC522_InitPins+0x14>)
 8001a8e:	f000 fde7 	bl	8002660 <HAL_GPIO_WritePin>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 8001aac:	2200      	movs	r2, #0
 8001aae:	2110      	movs	r1, #16
 8001ab0:	481a      	ldr	r0, [pc, #104]	@ (8001b1c <TM_MFRC522_WriteRegister+0x80>)
 8001ab2:	f000 fdd5 	bl	8002660 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001ac8:	f107 010e 	add.w	r1, r7, #14
 8001acc:	230a      	movs	r3, #10
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <TM_MFRC522_WriteRegister+0x84>)
 8001ad2:	f001 fb50 	bl	8003176 <HAL_SPI_Transmit>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001ada:	bf00      	nop
 8001adc:	4810      	ldr	r0, [pc, #64]	@ (8001b20 <TM_MFRC522_WriteRegister+0x84>)
 8001ade:	f001 ff50 	bl	8003982 <HAL_SPI_GetState>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d0f7      	beq.n	8001adc <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 8001aec:	1db9      	adds	r1, r7, #6
 8001aee:	230a      	movs	r3, #10
 8001af0:	2201      	movs	r2, #1
 8001af2:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <TM_MFRC522_WriteRegister+0x84>)
 8001af4:	f001 fb3f 	bl	8003176 <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001af8:	bf00      	nop
 8001afa:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <TM_MFRC522_WriteRegister+0x84>)
 8001afc:	f001 ff41 	bl	8003982 <HAL_SPI_GetState>
 8001b00:	4603      	mov	r3, r0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d0f7      	beq.n	8001afa <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <TM_MFRC522_WriteRegister+0x80>)
 8001b10:	f000 fda6 	bl	8002660 <HAL_GPIO_WritePin>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	20000078 	.word	0x20000078

08001b24 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2110      	movs	r1, #16
 8001b32:	481f      	ldr	r0, [pc, #124]	@ (8001bb0 <TM_MFRC522_ReadRegister+0x8c>)
 8001b34:	f000 fd94 	bl	8002660 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001b54:	f107 010d 	add.w	r1, r7, #13
 8001b58:	230a      	movs	r3, #10
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4815      	ldr	r0, [pc, #84]	@ (8001bb4 <TM_MFRC522_ReadRegister+0x90>)
 8001b5e:	f001 fb0a 	bl	8003176 <HAL_SPI_Transmit>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001b66:	bf00      	nop
 8001b68:	4812      	ldr	r0, [pc, #72]	@ (8001bb4 <TM_MFRC522_ReadRegister+0x90>)
 8001b6a:	f001 ff0a 	bl	8003982 <HAL_SPI_GetState>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d0f7      	beq.n	8001b68 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8001b78:	f107 010e 	add.w	r1, r7, #14
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	2201      	movs	r2, #1
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <TM_MFRC522_ReadRegister+0x90>)
 8001b82:	f001 fc3c 	bl	80033fe <HAL_SPI_Receive>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001b8a:	bf00      	nop
 8001b8c:	4809      	ldr	r0, [pc, #36]	@ (8001bb4 <TM_MFRC522_ReadRegister+0x90>)
 8001b8e:	f001 fef8 	bl	8003982 <HAL_SPI_GetState>
 8001b92:	4603      	mov	r3, r0
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d0f7      	beq.n	8001b8c <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <TM_MFRC522_ReadRegister+0x8c>)
 8001ba2:	f000 fd5d 	bl	8002660 <HAL_GPIO_WritePin>

	return val;	
 8001ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	20000078 	.word	0x20000078

08001bb8 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	460a      	mov	r2, r1
 8001bc2:	71fb      	strb	r3, [r7, #7]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ffaa 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff5c 	bl	8001a9c <TM_MFRC522_WriteRegister>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	71fb      	strb	r3, [r7, #7]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff90 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b25a      	sxtb	r2, r3
 8001c08:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff3e 	bl	8001a9c <TM_MFRC522_WriteRegister>
} 
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001c2e:	2014      	movs	r0, #20
 8001c30:	f7ff ff78 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001c42:	2103      	movs	r1, #3
 8001c44:	2014      	movs	r0, #20
 8001c46:	f7ff ffb7 	bl	8001bb8 <TM_MFRC522_SetBitMask>
	}
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001c56:	210f      	movs	r1, #15
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff ff1f 	bl	8001a9c <TM_MFRC522_WriteRegister>
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	4603      	mov	r3, r0
 8001c6a:	6039      	str	r1, [r7, #0]
 8001c6c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001c6e:	2107      	movs	r1, #7
 8001c70:	200d      	movs	r0, #13
 8001c72:	f7ff ff13 	bl	8001a9c <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	200c      	movs	r0, #12
 8001c8a:	f000 f80f 	bl	8001cac <TM_MFRC522_ToCard>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <TM_MFRC522_Request+0x3c>
 8001c98:	89bb      	ldrh	r3, [r7, #12]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d001      	beq.n	8001ca2 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d006      	beq.n	8001cde <TM_MFRC522_ToCard+0x32>
 8001cd0:	2b0e      	cmp	r3, #14
 8001cd2:	d109      	bne.n	8001ce8 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	757b      	strb	r3, [r7, #21]
			break;
 8001cdc:	e005      	b.n	8001cea <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001cde:	2377      	movs	r3, #119	@ 0x77
 8001ce0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001ce2:	2330      	movs	r3, #48	@ 0x30
 8001ce4:	757b      	strb	r3, [r7, #21]
			break;
 8001ce6:	e000      	b.n	8001cea <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001ce8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001cea:	7dbb      	ldrb	r3, [r7, #22]
 8001cec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f7ff fed1 	bl	8001a9c <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001cfa:	2180      	movs	r1, #128	@ 0x80
 8001cfc:	2004      	movs	r0, #4
 8001cfe:	f7ff ff75 	bl	8001bec <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001d02:	2180      	movs	r1, #128	@ 0x80
 8001d04:	200a      	movs	r0, #10
 8001d06:	f7ff ff57 	bl	8001bb8 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fec5 	bl	8001a9c <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8001d12:	2300      	movs	r3, #0
 8001d14:	827b      	strh	r3, [r7, #18]
 8001d16:	e00a      	b.n	8001d2e <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8001d18:	8a7b      	ldrh	r3, [r7, #18]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	2009      	movs	r0, #9
 8001d24:	f7ff feba 	bl	8001a9c <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8001d28:	8a7b      	ldrh	r3, [r7, #18]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	827b      	strh	r3, [r7, #18]
 8001d2e:	7bbb      	ldrb	r3, [r7, #14]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	8a7a      	ldrh	r2, [r7, #18]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d3ef      	bcc.n	8001d18 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff fead 	bl	8001a9c <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	d103      	bne.n	8001d50 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8001d48:	2180      	movs	r1, #128	@ 0x80
 8001d4a:	200d      	movs	r0, #13
 8001d4c:	f7ff ff34 	bl	8001bb8 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001d50:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d54:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001d56:	2004      	movs	r0, #4
 8001d58:	f7ff fee4 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	753b      	strb	r3, [r7, #20]
		i--;
 8001d60:	8a7b      	ldrh	r3, [r7, #18]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001d66:	8a7b      	ldrh	r3, [r7, #18]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <TM_MFRC522_ToCard+0xd6>
 8001d6c:	7d3b      	ldrb	r3, [r7, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d105      	bne.n	8001d82 <TM_MFRC522_ToCard+0xd6>
 8001d76:	7d3a      	ldrb	r2, [r7, #20]
 8001d78:	7d7b      	ldrb	r3, [r7, #21]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0e9      	beq.n	8001d56 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001d82:	2180      	movs	r1, #128	@ 0x80
 8001d84:	200d      	movs	r0, #13
 8001d86:	f7ff ff31 	bl	8001bec <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001d8a:	8a7b      	ldrh	r3, [r7, #18]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d057      	beq.n	8001e40 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001d90:	2006      	movs	r0, #6
 8001d92:	f7ff fec7 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f003 031b 	and.w	r3, r3, #27
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d14d      	bne.n	8001e3c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8001da4:	7d3a      	ldrb	r2, [r7, #20]
 8001da6:	7dbb      	ldrb	r3, [r7, #22]
 8001da8:	4013      	ands	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8001db4:	2301      	movs	r3, #1
 8001db6:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d140      	bne.n	8001e40 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f7ff feb0 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001dc8:	200c      	movs	r0, #12
 8001dca:	f7ff feab 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8001dd6:	7c7b      	ldrb	r3, [r7, #17]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8001ddc:	7d3b      	ldrb	r3, [r7, #20]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	7c7b      	ldrb	r3, [r7, #17]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	e005      	b.n	8001e00 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8001df4:	7d3b      	ldrb	r3, [r7, #20]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfe:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8001e00:	7d3b      	ldrb	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8001e06:	2301      	movs	r3, #1
 8001e08:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8001e0a:	7d3b      	ldrb	r3, [r7, #20]
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d901      	bls.n	8001e14 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8001e10:	2310      	movs	r3, #16
 8001e12:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8001e14:	2300      	movs	r3, #0
 8001e16:	827b      	strh	r3, [r7, #18]
 8001e18:	e00a      	b.n	8001e30 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8001e1a:	8a7b      	ldrh	r3, [r7, #18]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	18d4      	adds	r4, r2, r3
 8001e20:	2009      	movs	r0, #9
 8001e22:	f7ff fe7f 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001e26:	4603      	mov	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8001e2a:	8a7b      	ldrh	r3, [r7, #18]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	827b      	strh	r3, [r7, #18]
 8001e30:	7d3b      	ldrb	r3, [r7, #20]
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8a7a      	ldrh	r2, [r7, #18]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3ef      	bcc.n	8001e1a <TM_MFRC522_ToCard+0x16e>
 8001e3a:	e001      	b.n	8001e40 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}

08001e4a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af02      	add	r7, sp, #8
 8001e50:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001e56:	2100      	movs	r1, #0
 8001e58:	200d      	movs	r0, #13
 8001e5a:	f7ff fe1f 	bl	8001a9c <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2293      	movs	r2, #147	@ 0x93
 8001e62:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3301      	adds	r3, #1
 8001e68:	2220      	movs	r2, #32
 8001e6a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001e6c:	f107 030a 	add.w	r3, r7, #10
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	200c      	movs	r0, #12
 8001e7a:	f7ff ff17 	bl	8001cac <TM_MFRC522_ToCard>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d118      	bne.n	8001eba <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73bb      	strb	r3, [r7, #14]
 8001e8c:	e009      	b.n	8001ea2 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001e8e:	7bbb      	ldrb	r3, [r7, #14]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	7b7b      	ldrb	r3, [r7, #13]
 8001e98:	4053      	eors	r3, r2
 8001e9a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	73bb      	strb	r3, [r7, #14]
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d9f2      	bls.n	8001e8e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8001ea8:	7bbb      	ldrb	r3, [r7, #14]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	7b7a      	ldrb	r2, [r7, #13]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	2005      	movs	r0, #5
 8001ed6:	f7ff fe89 	bl	8001bec <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	200a      	movs	r0, #10
 8001ede:	f7ff fe6b 	bl	8001bb8 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
 8001ee6:	e00a      	b.n	8001efe <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4413      	add	r3, r2
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2009      	movs	r0, #9
 8001ef4:	f7ff fdd2 	bl	8001a9c <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	3301      	adds	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
 8001efe:	7dfa      	ldrb	r2, [r7, #23]
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3f0      	bcc.n	8001ee8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001f06:	2103      	movs	r1, #3
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff fdc7 	bl	8001a9c <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001f0e:	23ff      	movs	r3, #255	@ 0xff
 8001f10:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001f12:	2005      	movs	r0, #5
 8001f14:	f7ff fe06 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	75bb      	strb	r3, [r7, #22]
		i--;
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <TM_MFRC522_CalculateCRC+0x6e>
 8001f28:	7dbb      	ldrb	r3, [r7, #22]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0ef      	beq.n	8001f12 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001f32:	2022      	movs	r0, #34	@ 0x22
 8001f34:	f7ff fdf6 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	1c5c      	adds	r4, r3, #1
 8001f44:	2021      	movs	r0, #33	@ 0x21
 8001f46:	f7ff fded 	bl	8001b24 <TM_MFRC522_ReadRegister>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	7023      	strb	r3, [r4, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}

08001f56 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001f5c:	2350      	movs	r3, #80	@ 0x50
 8001f5e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001f64:	463b      	mov	r3, r7
 8001f66:	1c9a      	adds	r2, r3, #2
 8001f68:	463b      	mov	r3, r7
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ffa9 	bl	8001ec4 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001f72:	463a      	mov	r2, r7
 8001f74:	4639      	mov	r1, r7
 8001f76:	1dbb      	adds	r3, r7, #6
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	200c      	movs	r0, #12
 8001f80:	f7ff fe94 	bl	8001cac <TM_MFRC522_ToCard>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f90:	f7ff fd26 	bl	80019e0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	@ (8001fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	@ (8001fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fba:	f002 fa6f 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7ff f8bd 	bl	800113c <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001fd0:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8001fd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001fd8:	200002cc 	.word	0x200002cc

08001fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8002020 <HAL_Init+0x40>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_Init+0x40>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	@ (8002020 <HAL_Init+0x40>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f931 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	200f      	movs	r0, #15
 8002010:	f000 f808 	bl	8002024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff fb92 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f93b 	bl	80022be <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f000 f911 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	@ (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000000 	.word	0x20000000
 800207c:	20000008 	.word	0x20000008
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000180 	.word	0x20000180

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000180 	.word	0x20000180

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff ffee 	bl	80020ac <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d005      	beq.n	80020ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <HAL_Delay+0x44>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffde 	bl	80020ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f7      	bhi.n	80020ec <HAL_Delay+0x28>
  {
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000008 	.word	0x20000008

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	@ (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff47 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff5c 	bl	8002154 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffb0 	bl	800222c <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	@ 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e177      	b.n	80025e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8166 	bne.w	80025de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	2b02      	cmp	r3, #2
 8002328:	d130      	bne.n	800238c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0201 	and.w	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b03      	cmp	r3, #3
 8002396:	d017      	beq.n	80023c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d123      	bne.n	800241c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80c0 	beq.w	80025de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b66      	ldr	r3, [pc, #408]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4a65      	ldr	r2, [pc, #404]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800246c:	6453      	str	r3, [r2, #68]	@ 0x44
 800246e:	4b63      	ldr	r3, [pc, #396]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247a:	4a61      	ldr	r2, [pc, #388]	@ (8002600 <HAL_GPIO_Init+0x328>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_GPIO_Init+0x32c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d037      	beq.n	8002516 <HAL_GPIO_Init+0x23e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a57      	ldr	r2, [pc, #348]	@ (8002608 <HAL_GPIO_Init+0x330>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d031      	beq.n	8002512 <HAL_GPIO_Init+0x23a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a56      	ldr	r2, [pc, #344]	@ (800260c <HAL_GPIO_Init+0x334>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x236>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a55      	ldr	r2, [pc, #340]	@ (8002610 <HAL_GPIO_Init+0x338>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x232>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a54      	ldr	r2, [pc, #336]	@ (8002614 <HAL_GPIO_Init+0x33c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x22e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a53      	ldr	r2, [pc, #332]	@ (8002618 <HAL_GPIO_Init+0x340>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x22a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a52      	ldr	r2, [pc, #328]	@ (800261c <HAL_GPIO_Init+0x344>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x226>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a51      	ldr	r2, [pc, #324]	@ (8002620 <HAL_GPIO_Init+0x348>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x222>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a50      	ldr	r2, [pc, #320]	@ (8002624 <HAL_GPIO_Init+0x34c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x21e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002628 <HAL_GPIO_Init+0x350>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x21a>
 80024ee:	2309      	movs	r3, #9
 80024f0:	e012      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024f2:	230a      	movs	r3, #10
 80024f4:	e010      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024f6:	2308      	movs	r3, #8
 80024f8:	e00e      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00c      	b.n	8002518 <HAL_GPIO_Init+0x240>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00a      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002502:	2305      	movs	r3, #5
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002506:	2304      	movs	r3, #4
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x240>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x240>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x240>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002528:	4935      	ldr	r1, [pc, #212]	@ (8002600 <HAL_GPIO_Init+0x328>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_GPIO_Init+0x354>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a34      	ldr	r2, [pc, #208]	@ (800262c <HAL_GPIO_Init+0x354>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <HAL_GPIO_Init+0x354>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a29      	ldr	r2, [pc, #164]	@ (800262c <HAL_GPIO_Init+0x354>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258a:	4b28      	ldr	r3, [pc, #160]	@ (800262c <HAL_GPIO_Init+0x354>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ae:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <HAL_GPIO_Init+0x354>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_GPIO_Init+0x354>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d8:	4a14      	ldr	r2, [pc, #80]	@ (800262c <HAL_GPIO_Init+0x354>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f ae84 	bls.w	80022f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	@ 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40022000 	.word	0x40022000
 8002628:	40022400 	.word	0x40022400
 800262c:	40013c00 	.word	0x40013c00

08002630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002670:	787b      	ldrb	r3, [r7, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800267c:	e003      	b.n	8002686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	041a      	lsls	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <HAL_PWREx_EnableOverDrive+0x90>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002724 <HAL_PWREx_EnableOverDrive+0x90>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_PWREx_EnableOverDrive+0x90>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_PWREx_EnableOverDrive+0x94>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7ff fcf4 	bl	80020ac <HAL_GetTick>
 80026c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c6:	e009      	b.n	80026dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026c8:	f7ff fcf0 	bl	80020ac <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026d6:	d901      	bls.n	80026dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e01f      	b.n	800271c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026dc:	4b13      	ldr	r3, [pc, #76]	@ (800272c <HAL_PWREx_EnableOverDrive+0x98>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e8:	d1ee      	bne.n	80026c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f0:	f7ff fcdc 	bl	80020ac <HAL_GetTick>
 80026f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026f6:	e009      	b.n	800270c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026f8:	f7ff fcd8 	bl	80020ac <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002706:	d901      	bls.n	800270c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e007      	b.n	800271c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800270c:	4b07      	ldr	r3, [pc, #28]	@ (800272c <HAL_PWREx_EnableOverDrive+0x98>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002718:	d1ee      	bne.n	80026f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	420e0040 	.word	0x420e0040
 800272c:	40007000 	.word	0x40007000
 8002730:	420e0044 	.word	0x420e0044

08002734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e267      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d075      	beq.n	800283e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002752:	4b88      	ldr	r3, [pc, #544]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d00c      	beq.n	8002778 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275e:	4b85      	ldr	r3, [pc, #532]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002766:	2b08      	cmp	r3, #8
 8002768:	d112      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800276a:	4b82      	ldr	r3, [pc, #520]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002776:	d10b      	bne.n	8002790 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	4b7e      	ldr	r3, [pc, #504]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d05b      	beq.n	800283c <HAL_RCC_OscConfig+0x108>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d157      	bne.n	800283c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e242      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_OscConfig+0x74>
 800279a:	4b76      	ldr	r3, [pc, #472]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a75      	ldr	r2, [pc, #468]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e01d      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x98>
 80027b2:	4b70      	ldr	r3, [pc, #448]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6d      	ldr	r3, [pc, #436]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0xb0>
 80027cc:	4b69      	ldr	r3, [pc, #420]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b66      	ldr	r3, [pc, #408]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80027de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff fc5e 	bl	80020ac <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7ff fc5a 	bl	80020ac <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e207      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	4b5b      	ldr	r3, [pc, #364]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0xc0>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff fc4a 	bl	80020ac <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fc46 	bl	80020ac <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	@ 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1f3      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282e:	4b51      	ldr	r3, [pc, #324]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0xe8>
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800284a:	4b4a      	ldr	r3, [pc, #296]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800285e:	2b08      	cmp	r3, #8
 8002860:	d11c      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002862:	4b44      	ldr	r3, [pc, #272]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e1c7      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002886:	4b3b      	ldr	r3, [pc, #236]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4937      	ldr	r1, [pc, #220]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289a:	e03a      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a4:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x244>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7ff fbff 	bl	80020ac <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7ff fbfb 	bl	80020ac <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1a8      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4925      	ldr	r1, [pc, #148]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <HAL_RCC_OscConfig+0x244>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff fbde 	bl	80020ac <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7ff fbda 	bl	80020ac <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e187      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d036      	beq.n	800298c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_RCC_OscConfig+0x248>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7ff fbbe 	bl	80020ac <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7ff fbba 	bl	80020ac <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e167      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_RCC_OscConfig+0x240>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x200>
 8002952:	e01b      	b.n	800298c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <HAL_RCC_OscConfig+0x248>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff fba7 	bl	80020ac <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	e00e      	b.n	8002980 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7ff fba3 	bl	80020ac <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d907      	bls.n	8002980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e150      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	42470000 	.word	0x42470000
 800297c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b88      	ldr	r3, [pc, #544]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ea      	bne.n	8002962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8097 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b81      	ldr	r3, [pc, #516]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b77      	ldr	r3, [pc, #476]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b74      	ldr	r3, [pc, #464]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7ff fb63 	bl	80020ac <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7ff fb5f 	bl	80020ac <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e10c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba8 <HAL_RCC_OscConfig+0x474>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2ea>
 8002a10:	4b64      	ldr	r3, [pc, #400]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	4a63      	ldr	r2, [pc, #396]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1c:	e01c      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x30c>
 8002a26:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x324>
 8002a40:	4b58      	ldr	r3, [pc, #352]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a57      	ldr	r2, [pc, #348]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 0301 	bic.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a54      	ldr	r2, [pc, #336]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff fb24 	bl	80020ac <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7ff fb20 	bl	80020ac <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0cb      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0ee      	beq.n	8002a68 <HAL_RCC_OscConfig+0x334>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8c:	f7ff fb0e 	bl	80020ac <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7ff fb0a 	bl	80020ac <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e0b5      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ee      	bne.n	8002a94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	4a38      	ldr	r2, [pc, #224]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a1 	beq.w	8002c14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ad2:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d05c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d141      	bne.n	8002b6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fade 	bl	80020ac <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7ff fada 	bl	80020ac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e087      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b27      	ldr	r3, [pc, #156]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	491b      	ldr	r1, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7ff fab3 	bl	80020ac <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7ff faaf 	bl	80020ac <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e05c      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x416>
 8002b68:	e054      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fa9c 	bl	80020ac <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff fa98 	bl	80020ac <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e045      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x444>
 8002b96:	e03d      	b.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e038      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x4ec>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d028      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800

08002c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cc      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b68      	ldr	r3, [pc, #416]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d90c      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b65      	ldr	r3, [pc, #404]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0b8      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d020      	beq.n	8002cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c78:	4b59      	ldr	r3, [pc, #356]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4a58      	ldr	r2, [pc, #352]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c90:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	4a52      	ldr	r2, [pc, #328]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b50      	ldr	r3, [pc, #320]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	494d      	ldr	r1, [pc, #308]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b47      	ldr	r3, [pc, #284]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d119      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e067      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d02:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 0203 	bic.w	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4934      	ldr	r1, [pc, #208]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d14:	f7ff f9ca 	bl	80020ac <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1c:	f7ff f9c6 	bl	80020ac <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e04f      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 020c 	and.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d1eb      	bne.n	8002d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d20c      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d78:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4916      	ldr	r1, [pc, #88]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	490e      	ldr	r1, [pc, #56]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002daa:	f000 f821 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	490a      	ldr	r1, [pc, #40]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	5ccb      	ldrb	r3, [r1, r3]
 8002dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc2:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dc6:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_ClockConfig+0x1c8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f92a 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023c00 	.word	0x40023c00
 8002de0:	40023800 	.word	0x40023800
 8002de4:	080050e4 	.word	0x080050e4
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df4:	b094      	sub	sp, #80	@ 0x50
 8002df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e08:	4b79      	ldr	r3, [pc, #484]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d00d      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x40>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	f200 80e1 	bhi.w	8002fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e22:	e0db      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b73      	ldr	r3, [pc, #460]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e28:	e0db      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e2a:	4b73      	ldr	r3, [pc, #460]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e2e:	e0d8      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e46:	4b6a      	ldr	r3, [pc, #424]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	0159      	lsls	r1, r3, #5
 8002e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e74:	0150      	lsls	r0, r2, #5
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	1a51      	subs	r1, r2, r1
 8002e7e:	6139      	str	r1, [r7, #16]
 8002e80:	4629      	mov	r1, r5
 8002e82:	eb63 0301 	sbc.w	r3, r3, r1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e94:	4659      	mov	r1, fp
 8002e96:	018b      	lsls	r3, r1, #6
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	018a      	lsls	r2, r1, #6
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ec2:	4690      	mov	r8, r2
 8002ec4:	4699      	mov	r9, r3
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	eb18 0303 	adds.w	r3, r8, r3
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	462b      	mov	r3, r5
 8002ed0:	eb49 0303 	adc.w	r3, r9, r3
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	024b      	lsls	r3, r1, #9
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eec:	4621      	mov	r1, r4
 8002eee:	024a      	lsls	r2, r1, #9
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002efa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f00:	f7fd fb8a 	bl	8000618 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f0c:	e058      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	2200      	movs	r2, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	4611      	mov	r1, r2
 8002f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1e:	623b      	str	r3, [r7, #32]
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	f04f 0000 	mov.w	r0, #0
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3a:	0150      	lsls	r0, r2, #5
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4641      	mov	r1, r8
 8002f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f46:	4649      	mov	r1, r9
 8002f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f60:	ebb2 040a 	subs.w	r4, r2, sl
 8002f64:	eb63 050b 	sbc.w	r5, r3, fp
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	00eb      	lsls	r3, r5, #3
 8002f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	4614      	mov	r4, r2
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	4643      	mov	r3, r8
 8002f7e:	18e3      	adds	r3, r4, r3
 8002f80:	603b      	str	r3, [r7, #0]
 8002f82:	464b      	mov	r3, r9
 8002f84:	eb45 0303 	adc.w	r3, r5, r3
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f96:	4629      	mov	r1, r5
 8002f98:	028b      	lsls	r3, r1, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	028a      	lsls	r2, r1, #10
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002faa:	2200      	movs	r2, #0
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	61fa      	str	r2, [r7, #28]
 8002fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb4:	f7fd fb30 	bl	8000618 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002fd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fda:	e002      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3750      	adds	r7, #80	@ 0x50
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	007a1200 	.word	0x007a1200

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000

08003014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003018:	f7ff fff0 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	0a9b      	lsrs	r3, r3, #10
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4903      	ldr	r1, [pc, #12]	@ (8003038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	080050f4 	.word	0x080050f4

0800303c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003040:	f7ff ffdc 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0b5b      	lsrs	r3, r3, #13
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	@ (8003060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	080050f4 	.word	0x080050f4

08003064 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07b      	b.n	800316e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003086:	d009      	beq.n	800309c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
 800308e:	e005      	b.n	800309c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fe fb68 	bl	800178c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003120:	ea42 0103 	orr.w	r1, r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0104 	and.w	r1, r3, #4
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	f003 0210 	and.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800315c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b088      	sub	sp, #32
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003186:	f7fe ff91 	bl	80020ac <HAL_GetTick>
 800318a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	e12a      	b.n	80033f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Transmit+0x36>
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e122      	b.n	80033f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_SPI_Transmit+0x48>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e11b      	b.n	80033f6 <HAL_SPI_Transmit+0x280>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800320c:	d10f      	bne.n	800322e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800321c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800322c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b40      	cmp	r3, #64	@ 0x40
 800323a:	d007      	beq.n	800324c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800324a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003254:	d152      	bne.n	80032fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_SPI_Transmit+0xee>
 800325e:	8b7b      	ldrh	r3, [r7, #26]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d145      	bne.n	80032f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	1c9a      	adds	r2, r3, #2
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003288:	e032      	b.n	80032f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d112      	bne.n	80032be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032bc:	e018      	b.n	80032f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032be:	f7fe fef5 	bl	80020ac <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d803      	bhi.n	80032d6 <HAL_SPI_Transmit+0x160>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d102      	bne.n	80032dc <HAL_SPI_Transmit+0x166>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e082      	b.n	80033f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1c7      	bne.n	800328a <HAL_SPI_Transmit+0x114>
 80032fa:	e053      	b.n	80033a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_SPI_Transmit+0x194>
 8003304:	8b7b      	ldrh	r3, [r7, #26]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d147      	bne.n	800339a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003330:	e033      	b.n	800339a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	d113      	bne.n	8003368 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003366:	e018      	b.n	800339a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003368:	f7fe fea0 	bl	80020ac <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d803      	bhi.n	8003380 <HAL_SPI_Transmit+0x20a>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d102      	bne.n	8003386 <HAL_SPI_Transmit+0x210>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e02d      	b.n	80033f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1c6      	bne.n	8003332 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fbe7 	bl	8003b7c <SPI_EndRxTxTransaction>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b088      	sub	sp, #32
 8003402:	af02      	add	r7, sp, #8
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
 800341c:	e104      	b.n	8003628 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Receive+0x2c>
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0fc      	b.n	8003628 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003436:	d112      	bne.n	800345e <HAL_SPI_Receive+0x60>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10e      	bne.n	800345e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2204      	movs	r2, #4
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8eb 	bl	8003630 <HAL_SPI_TransmitReceive>
 800345a:	4603      	mov	r3, r0
 800345c:	e0e4      	b.n	8003628 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800345e:	f7fe fe25 	bl	80020ac <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_SPI_Receive+0x74>
 800346e:	2302      	movs	r3, #2
 8003470:	e0da      	b.n	8003628 <HAL_SPI_Receive+0x22a>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2204      	movs	r2, #4
 800347e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c0:	d10f      	bne.n	80034e2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d007      	beq.n	8003500 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d170      	bne.n	80035ea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003508:	e035      	b.n	8003576 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d115      	bne.n	8003544 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f103 020c 	add.w	r2, r3, #12
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	7812      	ldrb	r2, [r2, #0]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003542:	e018      	b.n	8003576 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003544:	f7fe fdb2 	bl	80020ac <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d803      	bhi.n	800355c <HAL_SPI_Receive+0x15e>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d102      	bne.n	8003562 <HAL_SPI_Receive+0x164>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e058      	b.n	8003628 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1c4      	bne.n	800350a <HAL_SPI_Receive+0x10c>
 8003580:	e038      	b.n	80035f4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d113      	bne.n	80035b8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	b292      	uxth	r2, r2
 800359c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	1c9a      	adds	r2, r3, #2
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035b6:	e018      	b.n	80035ea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b8:	f7fe fd78 	bl	80020ac <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d803      	bhi.n	80035d0 <HAL_SPI_Receive+0x1d2>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d102      	bne.n	80035d6 <HAL_SPI_Receive+0x1d8>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e01e      	b.n	8003628 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1c6      	bne.n	8003582 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 fa59 	bl	8003ab0 <SPI_EndRxTransaction>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003626:	2300      	movs	r3, #0
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	@ 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800363e:	2301      	movs	r3, #1
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003642:	f7fe fd33 	bl	80020ac <HAL_GetTick>
 8003646:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800364e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800365a:	7ffb      	ldrb	r3, [r7, #31]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d00c      	beq.n	800367a <HAL_SPI_TransmitReceive+0x4a>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003666:	d106      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x46>
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d001      	beq.n	800367a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
 8003678:	e17f      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_SPI_TransmitReceive+0x5c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_SPI_TransmitReceive+0x5c>
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e174      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_SPI_TransmitReceive+0x6e>
 800369a:	2302      	movs	r3, #2
 800369c:	e16d      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d003      	beq.n	80036ba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2205      	movs	r2, #5
 80036b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	887a      	ldrh	r2, [r7, #2]
 80036ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	887a      	ldrh	r2, [r7, #2]
 80036e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036fa:	2b40      	cmp	r3, #64	@ 0x40
 80036fc:	d007      	beq.n	800370e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003716:	d17e      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_SPI_TransmitReceive+0xf6>
 8003720:	8afb      	ldrh	r3, [r7, #22]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d16c      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800374a:	e059      	b.n	8003800 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d11b      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x162>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x162>
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	2b01      	cmp	r3, #1
 8003768:	d113      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d119      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x1a4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d014      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b4:	b292      	uxth	r2, r2
 80037b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	1c9a      	adds	r2, r3, #2
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037d0:	2301      	movs	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037d4:	f7fe fc6a 	bl	80020ac <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d80d      	bhi.n	8003800 <HAL_SPI_TransmitReceive+0x1d0>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d009      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0bc      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1a0      	bne.n	800374c <HAL_SPI_TransmitReceive+0x11c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d19b      	bne.n	800374c <HAL_SPI_TransmitReceive+0x11c>
 8003814:	e082      	b.n	800391c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x1f4>
 800381e:	8afb      	ldrh	r3, [r7, #22]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d171      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384a:	e05d      	b.n	8003908 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d11c      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x264>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d017      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x264>
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	2b01      	cmp	r3, #1
 8003868:	d114      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	7812      	ldrb	r2, [r2, #0]
 8003876:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d119      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x2a6>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d014      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038d2:	2301      	movs	r3, #1
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038d6:	f7fe fbe9 	bl	80020ac <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d803      	bhi.n	80038ee <HAL_SPI_TransmitReceive+0x2be>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x2c4>
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e038      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d19c      	bne.n	800384c <HAL_SPI_TransmitReceive+0x21c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d197      	bne.n	800384c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f92b 	bl	8003b7c <SPI_EndRxTxTransaction>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e01d      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10a      	bne.n	800395c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003978:	2300      	movs	r3, #0
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3728      	adds	r7, #40	@ 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003990:	b2db      	uxtb	r3, r3
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039b0:	f7fe fb7c 	bl	80020ac <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	4413      	add	r3, r2
 80039be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039c0:	f7fe fb74 	bl	80020ac <HAL_GetTick>
 80039c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039c6:	4b39      	ldr	r3, [pc, #228]	@ (8003aac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	015b      	lsls	r3, r3, #5
 80039cc:	0d1b      	lsrs	r3, r3, #20
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d6:	e055      	b.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d051      	beq.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039e0:	f7fe fb64 	bl	80020ac <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d902      	bls.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d13d      	bne.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a0e:	d111      	bne.n	8003a34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a18:	d004      	beq.n	8003a24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a22:	d107      	bne.n	8003a34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3c:	d10f      	bne.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e018      	b.n	8003aa4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
 8003a7c:	e002      	b.n	8003a84 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d19a      	bne.n	80039d8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000000 	.word	0x20000000

08003ab0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ac4:	d111      	bne.n	8003aea <SPI_EndRxTransaction+0x3a>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ace:	d004      	beq.n	8003ada <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad8:	d107      	bne.n	8003aea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af2:	d12a      	bne.n	8003b4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afc:	d012      	beq.n	8003b24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff ff49 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d02d      	beq.n	8003b70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e026      	b.n	8003b72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff ff36 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01a      	beq.n	8003b70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e013      	b.n	8003b72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2101      	movs	r1, #1
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff ff23 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e000      	b.n	8003b72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2102      	movs	r1, #2
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff ff04 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e032      	b.n	8003c14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bae:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <SPI_EndRxTxTransaction+0xa0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c20 <SPI_EndRxTxTransaction+0xa4>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	0d5b      	lsrs	r3, r3, #21
 8003bba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bcc:	d112      	bne.n	8003bf4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2180      	movs	r1, #128	@ 0x80
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fee1 	bl	80039a0 <SPI_WaitFlagStateUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d016      	beq.n	8003c12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e00f      	b.n	8003c14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0a:	2b80      	cmp	r3, #128	@ 0x80
 8003c0c:	d0f2      	beq.n	8003bf4 <SPI_EndRxTxTransaction+0x78>
 8003c0e:	e000      	b.n	8003c12 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c10:	bf00      	nop
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	165e9f81 	.word	0x165e9f81

08003c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e042      	b.n	8003cbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fde6 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	@ 0x24
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f973 	bl	8003f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d175      	bne.n	8003dd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_Transmit+0x2c>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e06e      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	@ 0x21
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fe f9d3 	bl	80020ac <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	88fa      	ldrh	r2, [r7, #6]
 8003d12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1c:	d108      	bne.n	8003d30 <HAL_UART_Transmit+0x6c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e003      	b.n	8003d38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d38:	e02e      	b.n	8003d98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	@ 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f848 	bl	8003dda <UART_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e03a      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3302      	adds	r3, #2
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	e007      	b.n	8003d8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	781a      	ldrb	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3301      	adds	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1cb      	bne.n	8003d3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2140      	movs	r1, #64	@ 0x40
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f814 	bl	8003dda <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e006      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dea:	e03b      	b.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d037      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df4:	f7fe f95a 	bl	80020ac <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	6a3a      	ldr	r2, [r7, #32]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e03a      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d023      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b80      	cmp	r3, #128	@ 0x80
 8003e20:	d020      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	d01d      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d116      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f81d 	bl	8003e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2208      	movs	r2, #8
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e00f      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d0b4      	beq.n	8003dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b095      	sub	sp, #84	@ 0x54
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d119      	bne.n	8003f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 0310 	bic.w	r3, r3, #16
 8003f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f24:	61ba      	str	r2, [r7, #24]
 8003f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6979      	ldr	r1, [r7, #20]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	613b      	str	r3, [r7, #16]
   return(result);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f46:	bf00      	nop
 8003f48:	3754      	adds	r7, #84	@ 0x54
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b0c0      	sub	sp, #256	@ 0x100
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	ea40 0301 	orr.w	r3, r0, r1
 8003f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fac:	f021 010c 	bic.w	r1, r1, #12
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fce:	6999      	ldr	r1, [r3, #24]
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	ea40 0301 	orr.w	r3, r0, r1
 8003fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b8f      	ldr	r3, [pc, #572]	@ (8004220 <UART_SetConfig+0x2cc>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d005      	beq.n	8003ff4 <UART_SetConfig+0xa0>
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b8d      	ldr	r3, [pc, #564]	@ (8004224 <UART_SetConfig+0x2d0>)
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d104      	bne.n	8003ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ff4:	f7ff f822 	bl	800303c <HAL_RCC_GetPCLK2Freq>
 8003ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ffc:	e003      	b.n	8004006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ffe:	f7ff f809 	bl	8003014 <HAL_RCC_GetPCLK1Freq>
 8004002:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	69db      	ldr	r3, [r3, #28]
 800400c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004010:	f040 810c 	bne.w	800422c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004018:	2200      	movs	r2, #0
 800401a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800401e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	1891      	adds	r1, r2, r2
 800402c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800402e:	415b      	adcs	r3, r3
 8004030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004036:	4621      	mov	r1, r4
 8004038:	eb12 0801 	adds.w	r8, r2, r1
 800403c:	4629      	mov	r1, r5
 800403e:	eb43 0901 	adc.w	r9, r3, r1
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004056:	4690      	mov	r8, r2
 8004058:	4699      	mov	r9, r3
 800405a:	4623      	mov	r3, r4
 800405c:	eb18 0303 	adds.w	r3, r8, r3
 8004060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004064:	462b      	mov	r3, r5
 8004066:	eb49 0303 	adc.w	r3, r9, r3
 800406a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800407a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800407e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004082:	460b      	mov	r3, r1
 8004084:	18db      	adds	r3, r3, r3
 8004086:	653b      	str	r3, [r7, #80]	@ 0x50
 8004088:	4613      	mov	r3, r2
 800408a:	eb42 0303 	adc.w	r3, r2, r3
 800408e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004098:	f7fc fabe 	bl	8000618 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4b61      	ldr	r3, [pc, #388]	@ (8004228 <UART_SetConfig+0x2d4>)
 80040a2:	fba3 2302 	umull	r2, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	011c      	lsls	r4, r3, #4
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	1891      	adds	r1, r2, r2
 80040c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040c4:	415b      	adcs	r3, r3
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040cc:	4641      	mov	r1, r8
 80040ce:	eb12 0a01 	adds.w	sl, r2, r1
 80040d2:	4649      	mov	r1, r9
 80040d4:	eb43 0b01 	adc.w	fp, r3, r1
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ec:	4692      	mov	sl, r2
 80040ee:	469b      	mov	fp, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	eb1a 0303 	adds.w	r3, sl, r3
 80040f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040fa:	464b      	mov	r3, r9
 80040fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004100:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004110:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004118:	460b      	mov	r3, r1
 800411a:	18db      	adds	r3, r3, r3
 800411c:	643b      	str	r3, [r7, #64]	@ 0x40
 800411e:	4613      	mov	r3, r2
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	647b      	str	r3, [r7, #68]	@ 0x44
 8004126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800412a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800412e:	f7fc fa73 	bl	8000618 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4611      	mov	r1, r2
 8004138:	4b3b      	ldr	r3, [pc, #236]	@ (8004228 <UART_SetConfig+0x2d4>)
 800413a:	fba3 2301 	umull	r2, r3, r3, r1
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2264      	movs	r2, #100	@ 0x64
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800414e:	4b36      	ldr	r3, [pc, #216]	@ (8004228 <UART_SetConfig+0x2d4>)
 8004150:	fba3 2302 	umull	r2, r3, r3, r2
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800415c:	441c      	add	r4, r3
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004168:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800416c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	1891      	adds	r1, r2, r2
 8004176:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004178:	415b      	adcs	r3, r3
 800417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800417c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004180:	4641      	mov	r1, r8
 8004182:	1851      	adds	r1, r2, r1
 8004184:	6339      	str	r1, [r7, #48]	@ 0x30
 8004186:	4649      	mov	r1, r9
 8004188:	414b      	adcs	r3, r1
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004198:	4659      	mov	r1, fp
 800419a:	00cb      	lsls	r3, r1, #3
 800419c:	4651      	mov	r1, sl
 800419e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a2:	4651      	mov	r1, sl
 80041a4:	00ca      	lsls	r2, r1, #3
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	4642      	mov	r2, r8
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041b4:	464b      	mov	r3, r9
 80041b6:	460a      	mov	r2, r1
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041d4:	460b      	mov	r3, r1
 80041d6:	18db      	adds	r3, r3, r3
 80041d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041da:	4613      	mov	r3, r2
 80041dc:	eb42 0303 	adc.w	r3, r2, r3
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041ea:	f7fc fa15 	bl	8000618 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <UART_SetConfig+0x2d4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	@ 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	3332      	adds	r3, #50	@ 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <UART_SetConfig+0x2d4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 0207 	and.w	r2, r3, #7
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800421c:	e106      	b.n	800442c <UART_SetConfig+0x4d8>
 800421e:	bf00      	nop
 8004220:	40011000 	.word	0x40011000
 8004224:	40011400 	.word	0x40011400
 8004228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800422c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004236:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800423a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800423e:	4642      	mov	r2, r8
 8004240:	464b      	mov	r3, r9
 8004242:	1891      	adds	r1, r2, r2
 8004244:	6239      	str	r1, [r7, #32]
 8004246:	415b      	adcs	r3, r3
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
 800424a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800424e:	4641      	mov	r1, r8
 8004250:	1854      	adds	r4, r2, r1
 8004252:	4649      	mov	r1, r9
 8004254:	eb43 0501 	adc.w	r5, r3, r1
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	00eb      	lsls	r3, r5, #3
 8004262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004266:	00e2      	lsls	r2, r4, #3
 8004268:	4614      	mov	r4, r2
 800426a:	461d      	mov	r5, r3
 800426c:	4643      	mov	r3, r8
 800426e:	18e3      	adds	r3, r4, r3
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004274:	464b      	mov	r3, r9
 8004276:	eb45 0303 	adc.w	r3, r5, r3
 800427a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800428a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800429a:	4629      	mov	r1, r5
 800429c:	008b      	lsls	r3, r1, #2
 800429e:	4621      	mov	r1, r4
 80042a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a4:	4621      	mov	r1, r4
 80042a6:	008a      	lsls	r2, r1, #2
 80042a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042ac:	f7fc f9b4 	bl	8000618 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b60      	ldr	r3, [pc, #384]	@ (8004438 <UART_SetConfig+0x4e4>)
 80042b6:	fba3 2302 	umull	r2, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	011c      	lsls	r4, r3, #4
 80042be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	1891      	adds	r1, r2, r2
 80042d6:	61b9      	str	r1, [r7, #24]
 80042d8:	415b      	adcs	r3, r3
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e0:	4641      	mov	r1, r8
 80042e2:	1851      	adds	r1, r2, r1
 80042e4:	6139      	str	r1, [r7, #16]
 80042e6:	4649      	mov	r1, r9
 80042e8:	414b      	adcs	r3, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f8:	4659      	mov	r1, fp
 80042fa:	00cb      	lsls	r3, r1, #3
 80042fc:	4651      	mov	r1, sl
 80042fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004302:	4651      	mov	r1, sl
 8004304:	00ca      	lsls	r2, r1, #3
 8004306:	4610      	mov	r0, r2
 8004308:	4619      	mov	r1, r3
 800430a:	4603      	mov	r3, r0
 800430c:	4642      	mov	r2, r8
 800430e:	189b      	adds	r3, r3, r2
 8004310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004314:	464b      	mov	r3, r9
 8004316:	460a      	mov	r2, r1
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800432a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004338:	4649      	mov	r1, r9
 800433a:	008b      	lsls	r3, r1, #2
 800433c:	4641      	mov	r1, r8
 800433e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004342:	4641      	mov	r1, r8
 8004344:	008a      	lsls	r2, r1, #2
 8004346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800434a:	f7fc f965 	bl	8000618 <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4611      	mov	r1, r2
 8004354:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <UART_SetConfig+0x4e4>)
 8004356:	fba3 2301 	umull	r2, r3, r3, r1
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2264      	movs	r2, #100	@ 0x64
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	1acb      	subs	r3, r1, r3
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	3332      	adds	r3, #50	@ 0x32
 8004368:	4a33      	ldr	r2, [pc, #204]	@ (8004438 <UART_SetConfig+0x4e4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004374:	441c      	add	r4, r3
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	673b      	str	r3, [r7, #112]	@ 0x70
 800437e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004380:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	415b      	adcs	r3, r3
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c6:	464b      	mov	r3, r9
 80043c8:	460a      	mov	r2, r1
 80043ca:	eb42 0303 	adc.w	r3, r2, r3
 80043ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043da:	667a      	str	r2, [r7, #100]	@ 0x64
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043e8:	4649      	mov	r1, r9
 80043ea:	008b      	lsls	r3, r1, #2
 80043ec:	4641      	mov	r1, r8
 80043ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f2:	4641      	mov	r1, r8
 80043f4:	008a      	lsls	r2, r1, #2
 80043f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043fa:	f7fc f90d 	bl	8000618 <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <UART_SetConfig+0x4e4>)
 8004404:	fba3 1302 	umull	r1, r3, r3, r2
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	2164      	movs	r1, #100	@ 0x64
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	3332      	adds	r3, #50	@ 0x32
 8004416:	4a08      	ldr	r2, [pc, #32]	@ (8004438 <UART_SetConfig+0x4e4>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	f003 020f 	and.w	r2, r3, #15
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4422      	add	r2, r4
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004432:	46bd      	mov	sp, r7
 8004434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004438:	51eb851f 	.word	0x51eb851f

0800443c <siprintf>:
 800443c:	b40e      	push	{r1, r2, r3}
 800443e:	b510      	push	{r4, lr}
 8004440:	b09d      	sub	sp, #116	@ 0x74
 8004442:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004444:	9002      	str	r0, [sp, #8]
 8004446:	9006      	str	r0, [sp, #24]
 8004448:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800444c:	480a      	ldr	r0, [pc, #40]	@ (8004478 <siprintf+0x3c>)
 800444e:	9107      	str	r1, [sp, #28]
 8004450:	9104      	str	r1, [sp, #16]
 8004452:	490a      	ldr	r1, [pc, #40]	@ (800447c <siprintf+0x40>)
 8004454:	f853 2b04 	ldr.w	r2, [r3], #4
 8004458:	9105      	str	r1, [sp, #20]
 800445a:	2400      	movs	r4, #0
 800445c:	a902      	add	r1, sp, #8
 800445e:	6800      	ldr	r0, [r0, #0]
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004464:	f000 f994 	bl	8004790 <_svfiprintf_r>
 8004468:	9b02      	ldr	r3, [sp, #8]
 800446a:	701c      	strb	r4, [r3, #0]
 800446c:	b01d      	add	sp, #116	@ 0x74
 800446e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004472:	b003      	add	sp, #12
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c
 800447c:	ffff0208 	.word	0xffff0208

08004480 <memset>:
 8004480:	4402      	add	r2, r0
 8004482:	4603      	mov	r3, r0
 8004484:	4293      	cmp	r3, r2
 8004486:	d100      	bne.n	800448a <memset+0xa>
 8004488:	4770      	bx	lr
 800448a:	f803 1b01 	strb.w	r1, [r3], #1
 800448e:	e7f9      	b.n	8004484 <memset+0x4>

08004490 <__errno>:
 8004490:	4b01      	ldr	r3, [pc, #4]	@ (8004498 <__errno+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	2000000c 	.word	0x2000000c

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4d0d      	ldr	r5, [pc, #52]	@ (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	@ (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2600      	movs	r6, #0
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4d0b      	ldr	r5, [pc, #44]	@ (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	@ (80044e0 <__libc_init_array+0x44>)
 80044b0:	f000 fc64 	bl	8004d7c <_init>
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2600      	movs	r6, #0
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	08005138 	.word	0x08005138
 80044d8:	08005138 	.word	0x08005138
 80044dc:	08005138 	.word	0x08005138
 80044e0:	0800513c 	.word	0x0800513c

080044e4 <__retarget_lock_acquire_recursive>:
 80044e4:	4770      	bx	lr

080044e6 <__retarget_lock_release_recursive>:
 80044e6:	4770      	bx	lr

080044e8 <_free_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4605      	mov	r5, r0
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d041      	beq.n	8004574 <_free_r+0x8c>
 80044f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f4:	1f0c      	subs	r4, r1, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bfb8      	it	lt
 80044fa:	18e4      	addlt	r4, r4, r3
 80044fc:	f000 f8e0 	bl	80046c0 <__malloc_lock>
 8004500:	4a1d      	ldr	r2, [pc, #116]	@ (8004578 <_free_r+0x90>)
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	b933      	cbnz	r3, 8004514 <_free_r+0x2c>
 8004506:	6063      	str	r3, [r4, #4]
 8004508:	6014      	str	r4, [r2, #0]
 800450a:	4628      	mov	r0, r5
 800450c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004510:	f000 b8dc 	b.w	80046cc <__malloc_unlock>
 8004514:	42a3      	cmp	r3, r4
 8004516:	d908      	bls.n	800452a <_free_r+0x42>
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	1821      	adds	r1, r4, r0
 800451c:	428b      	cmp	r3, r1
 800451e:	bf01      	itttt	eq
 8004520:	6819      	ldreq	r1, [r3, #0]
 8004522:	685b      	ldreq	r3, [r3, #4]
 8004524:	1809      	addeq	r1, r1, r0
 8004526:	6021      	streq	r1, [r4, #0]
 8004528:	e7ed      	b.n	8004506 <_free_r+0x1e>
 800452a:	461a      	mov	r2, r3
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	b10b      	cbz	r3, 8004534 <_free_r+0x4c>
 8004530:	42a3      	cmp	r3, r4
 8004532:	d9fa      	bls.n	800452a <_free_r+0x42>
 8004534:	6811      	ldr	r1, [r2, #0]
 8004536:	1850      	adds	r0, r2, r1
 8004538:	42a0      	cmp	r0, r4
 800453a:	d10b      	bne.n	8004554 <_free_r+0x6c>
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	4401      	add	r1, r0
 8004540:	1850      	adds	r0, r2, r1
 8004542:	4283      	cmp	r3, r0
 8004544:	6011      	str	r1, [r2, #0]
 8004546:	d1e0      	bne.n	800450a <_free_r+0x22>
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	6053      	str	r3, [r2, #4]
 800454e:	4408      	add	r0, r1
 8004550:	6010      	str	r0, [r2, #0]
 8004552:	e7da      	b.n	800450a <_free_r+0x22>
 8004554:	d902      	bls.n	800455c <_free_r+0x74>
 8004556:	230c      	movs	r3, #12
 8004558:	602b      	str	r3, [r5, #0]
 800455a:	e7d6      	b.n	800450a <_free_r+0x22>
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	1821      	adds	r1, r4, r0
 8004560:	428b      	cmp	r3, r1
 8004562:	bf04      	itt	eq
 8004564:	6819      	ldreq	r1, [r3, #0]
 8004566:	685b      	ldreq	r3, [r3, #4]
 8004568:	6063      	str	r3, [r4, #4]
 800456a:	bf04      	itt	eq
 800456c:	1809      	addeq	r1, r1, r0
 800456e:	6021      	streq	r1, [r4, #0]
 8004570:	6054      	str	r4, [r2, #4]
 8004572:	e7ca      	b.n	800450a <_free_r+0x22>
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	200002c8 	.word	0x200002c8

0800457c <sbrk_aligned>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4e0f      	ldr	r6, [pc, #60]	@ (80045bc <sbrk_aligned+0x40>)
 8004580:	460c      	mov	r4, r1
 8004582:	6831      	ldr	r1, [r6, #0]
 8004584:	4605      	mov	r5, r0
 8004586:	b911      	cbnz	r1, 800458e <sbrk_aligned+0x12>
 8004588:	f000 fba4 	bl	8004cd4 <_sbrk_r>
 800458c:	6030      	str	r0, [r6, #0]
 800458e:	4621      	mov	r1, r4
 8004590:	4628      	mov	r0, r5
 8004592:	f000 fb9f 	bl	8004cd4 <_sbrk_r>
 8004596:	1c43      	adds	r3, r0, #1
 8004598:	d103      	bne.n	80045a2 <sbrk_aligned+0x26>
 800459a:	f04f 34ff 	mov.w	r4, #4294967295
 800459e:	4620      	mov	r0, r4
 80045a0:	bd70      	pop	{r4, r5, r6, pc}
 80045a2:	1cc4      	adds	r4, r0, #3
 80045a4:	f024 0403 	bic.w	r4, r4, #3
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d0f8      	beq.n	800459e <sbrk_aligned+0x22>
 80045ac:	1a21      	subs	r1, r4, r0
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 fb90 	bl	8004cd4 <_sbrk_r>
 80045b4:	3001      	adds	r0, #1
 80045b6:	d1f2      	bne.n	800459e <sbrk_aligned+0x22>
 80045b8:	e7ef      	b.n	800459a <sbrk_aligned+0x1e>
 80045ba:	bf00      	nop
 80045bc:	200002c4 	.word	0x200002c4

080045c0 <_malloc_r>:
 80045c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c4:	1ccd      	adds	r5, r1, #3
 80045c6:	f025 0503 	bic.w	r5, r5, #3
 80045ca:	3508      	adds	r5, #8
 80045cc:	2d0c      	cmp	r5, #12
 80045ce:	bf38      	it	cc
 80045d0:	250c      	movcc	r5, #12
 80045d2:	2d00      	cmp	r5, #0
 80045d4:	4606      	mov	r6, r0
 80045d6:	db01      	blt.n	80045dc <_malloc_r+0x1c>
 80045d8:	42a9      	cmp	r1, r5
 80045da:	d904      	bls.n	80045e6 <_malloc_r+0x26>
 80045dc:	230c      	movs	r3, #12
 80045de:	6033      	str	r3, [r6, #0]
 80045e0:	2000      	movs	r0, #0
 80045e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046bc <_malloc_r+0xfc>
 80045ea:	f000 f869 	bl	80046c0 <__malloc_lock>
 80045ee:	f8d8 3000 	ldr.w	r3, [r8]
 80045f2:	461c      	mov	r4, r3
 80045f4:	bb44      	cbnz	r4, 8004648 <_malloc_r+0x88>
 80045f6:	4629      	mov	r1, r5
 80045f8:	4630      	mov	r0, r6
 80045fa:	f7ff ffbf 	bl	800457c <sbrk_aligned>
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	4604      	mov	r4, r0
 8004602:	d158      	bne.n	80046b6 <_malloc_r+0xf6>
 8004604:	f8d8 4000 	ldr.w	r4, [r8]
 8004608:	4627      	mov	r7, r4
 800460a:	2f00      	cmp	r7, #0
 800460c:	d143      	bne.n	8004696 <_malloc_r+0xd6>
 800460e:	2c00      	cmp	r4, #0
 8004610:	d04b      	beq.n	80046aa <_malloc_r+0xea>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	4639      	mov	r1, r7
 8004616:	4630      	mov	r0, r6
 8004618:	eb04 0903 	add.w	r9, r4, r3
 800461c:	f000 fb5a 	bl	8004cd4 <_sbrk_r>
 8004620:	4581      	cmp	r9, r0
 8004622:	d142      	bne.n	80046aa <_malloc_r+0xea>
 8004624:	6821      	ldr	r1, [r4, #0]
 8004626:	1a6d      	subs	r5, r5, r1
 8004628:	4629      	mov	r1, r5
 800462a:	4630      	mov	r0, r6
 800462c:	f7ff ffa6 	bl	800457c <sbrk_aligned>
 8004630:	3001      	adds	r0, #1
 8004632:	d03a      	beq.n	80046aa <_malloc_r+0xea>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	442b      	add	r3, r5
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	f8d8 3000 	ldr.w	r3, [r8]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	bb62      	cbnz	r2, 800469c <_malloc_r+0xdc>
 8004642:	f8c8 7000 	str.w	r7, [r8]
 8004646:	e00f      	b.n	8004668 <_malloc_r+0xa8>
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	1b52      	subs	r2, r2, r5
 800464c:	d420      	bmi.n	8004690 <_malloc_r+0xd0>
 800464e:	2a0b      	cmp	r2, #11
 8004650:	d917      	bls.n	8004682 <_malloc_r+0xc2>
 8004652:	1961      	adds	r1, r4, r5
 8004654:	42a3      	cmp	r3, r4
 8004656:	6025      	str	r5, [r4, #0]
 8004658:	bf18      	it	ne
 800465a:	6059      	strne	r1, [r3, #4]
 800465c:	6863      	ldr	r3, [r4, #4]
 800465e:	bf08      	it	eq
 8004660:	f8c8 1000 	streq.w	r1, [r8]
 8004664:	5162      	str	r2, [r4, r5]
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	4630      	mov	r0, r6
 800466a:	f000 f82f 	bl	80046cc <__malloc_unlock>
 800466e:	f104 000b 	add.w	r0, r4, #11
 8004672:	1d23      	adds	r3, r4, #4
 8004674:	f020 0007 	bic.w	r0, r0, #7
 8004678:	1ac2      	subs	r2, r0, r3
 800467a:	bf1c      	itt	ne
 800467c:	1a1b      	subne	r3, r3, r0
 800467e:	50a3      	strne	r3, [r4, r2]
 8004680:	e7af      	b.n	80045e2 <_malloc_r+0x22>
 8004682:	6862      	ldr	r2, [r4, #4]
 8004684:	42a3      	cmp	r3, r4
 8004686:	bf0c      	ite	eq
 8004688:	f8c8 2000 	streq.w	r2, [r8]
 800468c:	605a      	strne	r2, [r3, #4]
 800468e:	e7eb      	b.n	8004668 <_malloc_r+0xa8>
 8004690:	4623      	mov	r3, r4
 8004692:	6864      	ldr	r4, [r4, #4]
 8004694:	e7ae      	b.n	80045f4 <_malloc_r+0x34>
 8004696:	463c      	mov	r4, r7
 8004698:	687f      	ldr	r7, [r7, #4]
 800469a:	e7b6      	b.n	800460a <_malloc_r+0x4a>
 800469c:	461a      	mov	r2, r3
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	d1fb      	bne.n	800469c <_malloc_r+0xdc>
 80046a4:	2300      	movs	r3, #0
 80046a6:	6053      	str	r3, [r2, #4]
 80046a8:	e7de      	b.n	8004668 <_malloc_r+0xa8>
 80046aa:	230c      	movs	r3, #12
 80046ac:	6033      	str	r3, [r6, #0]
 80046ae:	4630      	mov	r0, r6
 80046b0:	f000 f80c 	bl	80046cc <__malloc_unlock>
 80046b4:	e794      	b.n	80045e0 <_malloc_r+0x20>
 80046b6:	6005      	str	r5, [r0, #0]
 80046b8:	e7d6      	b.n	8004668 <_malloc_r+0xa8>
 80046ba:	bf00      	nop
 80046bc:	200002c8 	.word	0x200002c8

080046c0 <__malloc_lock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	@ (80046c8 <__malloc_lock+0x8>)
 80046c2:	f7ff bf0f 	b.w	80044e4 <__retarget_lock_acquire_recursive>
 80046c6:	bf00      	nop
 80046c8:	200002c0 	.word	0x200002c0

080046cc <__malloc_unlock>:
 80046cc:	4801      	ldr	r0, [pc, #4]	@ (80046d4 <__malloc_unlock+0x8>)
 80046ce:	f7ff bf0a 	b.w	80044e6 <__retarget_lock_release_recursive>
 80046d2:	bf00      	nop
 80046d4:	200002c0 	.word	0x200002c0

080046d8 <__ssputs_r>:
 80046d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046dc:	688e      	ldr	r6, [r1, #8]
 80046de:	461f      	mov	r7, r3
 80046e0:	42be      	cmp	r6, r7
 80046e2:	680b      	ldr	r3, [r1, #0]
 80046e4:	4682      	mov	sl, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	4690      	mov	r8, r2
 80046ea:	d82d      	bhi.n	8004748 <__ssputs_r+0x70>
 80046ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046f4:	d026      	beq.n	8004744 <__ssputs_r+0x6c>
 80046f6:	6965      	ldr	r5, [r4, #20]
 80046f8:	6909      	ldr	r1, [r1, #16]
 80046fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046fe:	eba3 0901 	sub.w	r9, r3, r1
 8004702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004706:	1c7b      	adds	r3, r7, #1
 8004708:	444b      	add	r3, r9
 800470a:	106d      	asrs	r5, r5, #1
 800470c:	429d      	cmp	r5, r3
 800470e:	bf38      	it	cc
 8004710:	461d      	movcc	r5, r3
 8004712:	0553      	lsls	r3, r2, #21
 8004714:	d527      	bpl.n	8004766 <__ssputs_r+0x8e>
 8004716:	4629      	mov	r1, r5
 8004718:	f7ff ff52 	bl	80045c0 <_malloc_r>
 800471c:	4606      	mov	r6, r0
 800471e:	b360      	cbz	r0, 800477a <__ssputs_r+0xa2>
 8004720:	6921      	ldr	r1, [r4, #16]
 8004722:	464a      	mov	r2, r9
 8004724:	f000 fae6 	bl	8004cf4 <memcpy>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800472e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004732:	81a3      	strh	r3, [r4, #12]
 8004734:	6126      	str	r6, [r4, #16]
 8004736:	6165      	str	r5, [r4, #20]
 8004738:	444e      	add	r6, r9
 800473a:	eba5 0509 	sub.w	r5, r5, r9
 800473e:	6026      	str	r6, [r4, #0]
 8004740:	60a5      	str	r5, [r4, #8]
 8004742:	463e      	mov	r6, r7
 8004744:	42be      	cmp	r6, r7
 8004746:	d900      	bls.n	800474a <__ssputs_r+0x72>
 8004748:	463e      	mov	r6, r7
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	4632      	mov	r2, r6
 800474e:	4641      	mov	r1, r8
 8004750:	f000 faa6 	bl	8004ca0 <memmove>
 8004754:	68a3      	ldr	r3, [r4, #8]
 8004756:	1b9b      	subs	r3, r3, r6
 8004758:	60a3      	str	r3, [r4, #8]
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	4433      	add	r3, r6
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	2000      	movs	r0, #0
 8004762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004766:	462a      	mov	r2, r5
 8004768:	f000 fad2 	bl	8004d10 <_realloc_r>
 800476c:	4606      	mov	r6, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	d1e0      	bne.n	8004734 <__ssputs_r+0x5c>
 8004772:	6921      	ldr	r1, [r4, #16]
 8004774:	4650      	mov	r0, sl
 8004776:	f7ff feb7 	bl	80044e8 <_free_r>
 800477a:	230c      	movs	r3, #12
 800477c:	f8ca 3000 	str.w	r3, [sl]
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	e7e9      	b.n	8004762 <__ssputs_r+0x8a>
	...

08004790 <_svfiprintf_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	4698      	mov	r8, r3
 8004796:	898b      	ldrh	r3, [r1, #12]
 8004798:	061b      	lsls	r3, r3, #24
 800479a:	b09d      	sub	sp, #116	@ 0x74
 800479c:	4607      	mov	r7, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	4614      	mov	r4, r2
 80047a2:	d510      	bpl.n	80047c6 <_svfiprintf_r+0x36>
 80047a4:	690b      	ldr	r3, [r1, #16]
 80047a6:	b973      	cbnz	r3, 80047c6 <_svfiprintf_r+0x36>
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	f7ff ff09 	bl	80045c0 <_malloc_r>
 80047ae:	6028      	str	r0, [r5, #0]
 80047b0:	6128      	str	r0, [r5, #16]
 80047b2:	b930      	cbnz	r0, 80047c2 <_svfiprintf_r+0x32>
 80047b4:	230c      	movs	r3, #12
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	b01d      	add	sp, #116	@ 0x74
 80047be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c2:	2340      	movs	r3, #64	@ 0x40
 80047c4:	616b      	str	r3, [r5, #20]
 80047c6:	2300      	movs	r3, #0
 80047c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ca:	2320      	movs	r3, #32
 80047cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d4:	2330      	movs	r3, #48	@ 0x30
 80047d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004974 <_svfiprintf_r+0x1e4>
 80047da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047de:	f04f 0901 	mov.w	r9, #1
 80047e2:	4623      	mov	r3, r4
 80047e4:	469a      	mov	sl, r3
 80047e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ea:	b10a      	cbz	r2, 80047f0 <_svfiprintf_r+0x60>
 80047ec:	2a25      	cmp	r2, #37	@ 0x25
 80047ee:	d1f9      	bne.n	80047e4 <_svfiprintf_r+0x54>
 80047f0:	ebba 0b04 	subs.w	fp, sl, r4
 80047f4:	d00b      	beq.n	800480e <_svfiprintf_r+0x7e>
 80047f6:	465b      	mov	r3, fp
 80047f8:	4622      	mov	r2, r4
 80047fa:	4629      	mov	r1, r5
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff ff6b 	bl	80046d8 <__ssputs_r>
 8004802:	3001      	adds	r0, #1
 8004804:	f000 80a7 	beq.w	8004956 <_svfiprintf_r+0x1c6>
 8004808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800480a:	445a      	add	r2, fp
 800480c:	9209      	str	r2, [sp, #36]	@ 0x24
 800480e:	f89a 3000 	ldrb.w	r3, [sl]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 809f 	beq.w	8004956 <_svfiprintf_r+0x1c6>
 8004818:	2300      	movs	r3, #0
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004822:	f10a 0a01 	add.w	sl, sl, #1
 8004826:	9304      	str	r3, [sp, #16]
 8004828:	9307      	str	r3, [sp, #28]
 800482a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800482e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004830:	4654      	mov	r4, sl
 8004832:	2205      	movs	r2, #5
 8004834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004838:	484e      	ldr	r0, [pc, #312]	@ (8004974 <_svfiprintf_r+0x1e4>)
 800483a:	f7fb fce1 	bl	8000200 <memchr>
 800483e:	9a04      	ldr	r2, [sp, #16]
 8004840:	b9d8      	cbnz	r0, 800487a <_svfiprintf_r+0xea>
 8004842:	06d0      	lsls	r0, r2, #27
 8004844:	bf44      	itt	mi
 8004846:	2320      	movmi	r3, #32
 8004848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800484c:	0711      	lsls	r1, r2, #28
 800484e:	bf44      	itt	mi
 8004850:	232b      	movmi	r3, #43	@ 0x2b
 8004852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004856:	f89a 3000 	ldrb.w	r3, [sl]
 800485a:	2b2a      	cmp	r3, #42	@ 0x2a
 800485c:	d015      	beq.n	800488a <_svfiprintf_r+0xfa>
 800485e:	9a07      	ldr	r2, [sp, #28]
 8004860:	4654      	mov	r4, sl
 8004862:	2000      	movs	r0, #0
 8004864:	f04f 0c0a 	mov.w	ip, #10
 8004868:	4621      	mov	r1, r4
 800486a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800486e:	3b30      	subs	r3, #48	@ 0x30
 8004870:	2b09      	cmp	r3, #9
 8004872:	d94b      	bls.n	800490c <_svfiprintf_r+0x17c>
 8004874:	b1b0      	cbz	r0, 80048a4 <_svfiprintf_r+0x114>
 8004876:	9207      	str	r2, [sp, #28]
 8004878:	e014      	b.n	80048a4 <_svfiprintf_r+0x114>
 800487a:	eba0 0308 	sub.w	r3, r0, r8
 800487e:	fa09 f303 	lsl.w	r3, r9, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	9304      	str	r3, [sp, #16]
 8004886:	46a2      	mov	sl, r4
 8004888:	e7d2      	b.n	8004830 <_svfiprintf_r+0xa0>
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	1d19      	adds	r1, r3, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	9103      	str	r1, [sp, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbb      	ittet	lt
 8004896:	425b      	neglt	r3, r3
 8004898:	f042 0202 	orrlt.w	r2, r2, #2
 800489c:	9307      	strge	r3, [sp, #28]
 800489e:	9307      	strlt	r3, [sp, #28]
 80048a0:	bfb8      	it	lt
 80048a2:	9204      	strlt	r2, [sp, #16]
 80048a4:	7823      	ldrb	r3, [r4, #0]
 80048a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80048a8:	d10a      	bne.n	80048c0 <_svfiprintf_r+0x130>
 80048aa:	7863      	ldrb	r3, [r4, #1]
 80048ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ae:	d132      	bne.n	8004916 <_svfiprintf_r+0x186>
 80048b0:	9b03      	ldr	r3, [sp, #12]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	9203      	str	r2, [sp, #12]
 80048b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048bc:	3402      	adds	r4, #2
 80048be:	9305      	str	r3, [sp, #20]
 80048c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004984 <_svfiprintf_r+0x1f4>
 80048c4:	7821      	ldrb	r1, [r4, #0]
 80048c6:	2203      	movs	r2, #3
 80048c8:	4650      	mov	r0, sl
 80048ca:	f7fb fc99 	bl	8000200 <memchr>
 80048ce:	b138      	cbz	r0, 80048e0 <_svfiprintf_r+0x150>
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	eba0 000a 	sub.w	r0, r0, sl
 80048d6:	2240      	movs	r2, #64	@ 0x40
 80048d8:	4082      	lsls	r2, r0
 80048da:	4313      	orrs	r3, r2
 80048dc:	3401      	adds	r4, #1
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e4:	4824      	ldr	r0, [pc, #144]	@ (8004978 <_svfiprintf_r+0x1e8>)
 80048e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ea:	2206      	movs	r2, #6
 80048ec:	f7fb fc88 	bl	8000200 <memchr>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	d036      	beq.n	8004962 <_svfiprintf_r+0x1d2>
 80048f4:	4b21      	ldr	r3, [pc, #132]	@ (800497c <_svfiprintf_r+0x1ec>)
 80048f6:	bb1b      	cbnz	r3, 8004940 <_svfiprintf_r+0x1b0>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	3307      	adds	r3, #7
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	3308      	adds	r3, #8
 8004902:	9303      	str	r3, [sp, #12]
 8004904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004906:	4433      	add	r3, r6
 8004908:	9309      	str	r3, [sp, #36]	@ 0x24
 800490a:	e76a      	b.n	80047e2 <_svfiprintf_r+0x52>
 800490c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004910:	460c      	mov	r4, r1
 8004912:	2001      	movs	r0, #1
 8004914:	e7a8      	b.n	8004868 <_svfiprintf_r+0xd8>
 8004916:	2300      	movs	r3, #0
 8004918:	3401      	adds	r4, #1
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	4619      	mov	r1, r3
 800491e:	f04f 0c0a 	mov.w	ip, #10
 8004922:	4620      	mov	r0, r4
 8004924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004928:	3a30      	subs	r2, #48	@ 0x30
 800492a:	2a09      	cmp	r2, #9
 800492c:	d903      	bls.n	8004936 <_svfiprintf_r+0x1a6>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0c6      	beq.n	80048c0 <_svfiprintf_r+0x130>
 8004932:	9105      	str	r1, [sp, #20]
 8004934:	e7c4      	b.n	80048c0 <_svfiprintf_r+0x130>
 8004936:	fb0c 2101 	mla	r1, ip, r1, r2
 800493a:	4604      	mov	r4, r0
 800493c:	2301      	movs	r3, #1
 800493e:	e7f0      	b.n	8004922 <_svfiprintf_r+0x192>
 8004940:	ab03      	add	r3, sp, #12
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	462a      	mov	r2, r5
 8004946:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <_svfiprintf_r+0x1f0>)
 8004948:	a904      	add	r1, sp, #16
 800494a:	4638      	mov	r0, r7
 800494c:	f3af 8000 	nop.w
 8004950:	1c42      	adds	r2, r0, #1
 8004952:	4606      	mov	r6, r0
 8004954:	d1d6      	bne.n	8004904 <_svfiprintf_r+0x174>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	065b      	lsls	r3, r3, #25
 800495a:	f53f af2d 	bmi.w	80047b8 <_svfiprintf_r+0x28>
 800495e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004960:	e72c      	b.n	80047bc <_svfiprintf_r+0x2c>
 8004962:	ab03      	add	r3, sp, #12
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	462a      	mov	r2, r5
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <_svfiprintf_r+0x1f0>)
 800496a:	a904      	add	r1, sp, #16
 800496c:	4638      	mov	r0, r7
 800496e:	f000 f879 	bl	8004a64 <_printf_i>
 8004972:	e7ed      	b.n	8004950 <_svfiprintf_r+0x1c0>
 8004974:	080050fc 	.word	0x080050fc
 8004978:	08005106 	.word	0x08005106
 800497c:	00000000 	.word	0x00000000
 8004980:	080046d9 	.word	0x080046d9
 8004984:	08005102 	.word	0x08005102

08004988 <_printf_common>:
 8004988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	4616      	mov	r6, r2
 800498e:	4698      	mov	r8, r3
 8004990:	688a      	ldr	r2, [r1, #8]
 8004992:	690b      	ldr	r3, [r1, #16]
 8004994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004998:	4293      	cmp	r3, r2
 800499a:	bfb8      	it	lt
 800499c:	4613      	movlt	r3, r2
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049a4:	4607      	mov	r7, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	b10a      	cbz	r2, 80049ae <_printf_common+0x26>
 80049aa:	3301      	adds	r3, #1
 80049ac:	6033      	str	r3, [r6, #0]
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	0699      	lsls	r1, r3, #26
 80049b2:	bf42      	ittt	mi
 80049b4:	6833      	ldrmi	r3, [r6, #0]
 80049b6:	3302      	addmi	r3, #2
 80049b8:	6033      	strmi	r3, [r6, #0]
 80049ba:	6825      	ldr	r5, [r4, #0]
 80049bc:	f015 0506 	ands.w	r5, r5, #6
 80049c0:	d106      	bne.n	80049d0 <_printf_common+0x48>
 80049c2:	f104 0a19 	add.w	sl, r4, #25
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	6832      	ldr	r2, [r6, #0]
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	dc26      	bgt.n	8004a1e <_printf_common+0x96>
 80049d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	3b00      	subs	r3, #0
 80049d8:	bf18      	it	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	0692      	lsls	r2, r2, #26
 80049de:	d42b      	bmi.n	8004a38 <_printf_common+0xb0>
 80049e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049e4:	4641      	mov	r1, r8
 80049e6:	4638      	mov	r0, r7
 80049e8:	47c8      	blx	r9
 80049ea:	3001      	adds	r0, #1
 80049ec:	d01e      	beq.n	8004a2c <_printf_common+0xa4>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	6922      	ldr	r2, [r4, #16]
 80049f2:	f003 0306 	and.w	r3, r3, #6
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	bf02      	ittt	eq
 80049fa:	68e5      	ldreq	r5, [r4, #12]
 80049fc:	6833      	ldreq	r3, [r6, #0]
 80049fe:	1aed      	subeq	r5, r5, r3
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	bf0c      	ite	eq
 8004a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a08:	2500      	movne	r5, #0
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bfc4      	itt	gt
 8004a0e:	1a9b      	subgt	r3, r3, r2
 8004a10:	18ed      	addgt	r5, r5, r3
 8004a12:	2600      	movs	r6, #0
 8004a14:	341a      	adds	r4, #26
 8004a16:	42b5      	cmp	r5, r6
 8004a18:	d11a      	bne.n	8004a50 <_printf_common+0xc8>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e008      	b.n	8004a30 <_printf_common+0xa8>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4641      	mov	r1, r8
 8004a24:	4638      	mov	r0, r7
 8004a26:	47c8      	blx	r9
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d103      	bne.n	8004a34 <_printf_common+0xac>
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a34:	3501      	adds	r5, #1
 8004a36:	e7c6      	b.n	80049c6 <_printf_common+0x3e>
 8004a38:	18e1      	adds	r1, r4, r3
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	2030      	movs	r0, #48	@ 0x30
 8004a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a42:	4422      	add	r2, r4
 8004a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	e7c7      	b.n	80049e0 <_printf_common+0x58>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4622      	mov	r2, r4
 8004a54:	4641      	mov	r1, r8
 8004a56:	4638      	mov	r0, r7
 8004a58:	47c8      	blx	r9
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d0e6      	beq.n	8004a2c <_printf_common+0xa4>
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7d9      	b.n	8004a16 <_printf_common+0x8e>
	...

08004a64 <_printf_i>:
 8004a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	7e0f      	ldrb	r7, [r1, #24]
 8004a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a6c:	2f78      	cmp	r7, #120	@ 0x78
 8004a6e:	4691      	mov	r9, r2
 8004a70:	4680      	mov	r8, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	469a      	mov	sl, r3
 8004a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a7a:	d807      	bhi.n	8004a8c <_printf_i+0x28>
 8004a7c:	2f62      	cmp	r7, #98	@ 0x62
 8004a7e:	d80a      	bhi.n	8004a96 <_printf_i+0x32>
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	f000 80d1 	beq.w	8004c28 <_printf_i+0x1c4>
 8004a86:	2f58      	cmp	r7, #88	@ 0x58
 8004a88:	f000 80b8 	beq.w	8004bfc <_printf_i+0x198>
 8004a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a94:	e03a      	b.n	8004b0c <_printf_i+0xa8>
 8004a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a9a:	2b15      	cmp	r3, #21
 8004a9c:	d8f6      	bhi.n	8004a8c <_printf_i+0x28>
 8004a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004aa4 <_printf_i+0x40>)
 8004aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004a8d 	.word	0x08004a8d
 8004ab0:	08004a8d 	.word	0x08004a8d
 8004ab4:	08004a8d 	.word	0x08004a8d
 8004ab8:	08004a8d 	.word	0x08004a8d
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004a8d 	.word	0x08004a8d
 8004ac4:	08004a8d 	.word	0x08004a8d
 8004ac8:	08004a8d 	.word	0x08004a8d
 8004acc:	08004a8d 	.word	0x08004a8d
 8004ad0:	08004c0f 	.word	0x08004c0f
 8004ad4:	08004b3b 	.word	0x08004b3b
 8004ad8:	08004bc9 	.word	0x08004bc9
 8004adc:	08004a8d 	.word	0x08004a8d
 8004ae0:	08004a8d 	.word	0x08004a8d
 8004ae4:	08004c31 	.word	0x08004c31
 8004ae8:	08004a8d 	.word	0x08004a8d
 8004aec:	08004b3b 	.word	0x08004b3b
 8004af0:	08004a8d 	.word	0x08004a8d
 8004af4:	08004a8d 	.word	0x08004a8d
 8004af8:	08004bd1 	.word	0x08004bd1
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6032      	str	r2, [r6, #0]
 8004b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e09c      	b.n	8004c4a <_printf_i+0x1e6>
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	1d19      	adds	r1, r3, #4
 8004b16:	6031      	str	r1, [r6, #0]
 8004b18:	0606      	lsls	r6, r0, #24
 8004b1a:	d501      	bpl.n	8004b20 <_printf_i+0xbc>
 8004b1c:	681d      	ldr	r5, [r3, #0]
 8004b1e:	e003      	b.n	8004b28 <_printf_i+0xc4>
 8004b20:	0645      	lsls	r5, r0, #25
 8004b22:	d5fb      	bpl.n	8004b1c <_printf_i+0xb8>
 8004b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	da03      	bge.n	8004b34 <_printf_i+0xd0>
 8004b2c:	232d      	movs	r3, #45	@ 0x2d
 8004b2e:	426d      	negs	r5, r5
 8004b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b34:	4858      	ldr	r0, [pc, #352]	@ (8004c98 <_printf_i+0x234>)
 8004b36:	230a      	movs	r3, #10
 8004b38:	e011      	b.n	8004b5e <_printf_i+0xfa>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	0608      	lsls	r0, r1, #24
 8004b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b44:	d402      	bmi.n	8004b4c <_printf_i+0xe8>
 8004b46:	0649      	lsls	r1, r1, #25
 8004b48:	bf48      	it	mi
 8004b4a:	b2ad      	uxthmi	r5, r5
 8004b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b4e:	4852      	ldr	r0, [pc, #328]	@ (8004c98 <_printf_i+0x234>)
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	bf14      	ite	ne
 8004b54:	230a      	movne	r3, #10
 8004b56:	2308      	moveq	r3, #8
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b5e:	6866      	ldr	r6, [r4, #4]
 8004b60:	60a6      	str	r6, [r4, #8]
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	db05      	blt.n	8004b72 <_printf_i+0x10e>
 8004b66:	6821      	ldr	r1, [r4, #0]
 8004b68:	432e      	orrs	r6, r5
 8004b6a:	f021 0104 	bic.w	r1, r1, #4
 8004b6e:	6021      	str	r1, [r4, #0]
 8004b70:	d04b      	beq.n	8004c0a <_printf_i+0x1a6>
 8004b72:	4616      	mov	r6, r2
 8004b74:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b78:	fb03 5711 	mls	r7, r3, r1, r5
 8004b7c:	5dc7      	ldrb	r7, [r0, r7]
 8004b7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b82:	462f      	mov	r7, r5
 8004b84:	42bb      	cmp	r3, r7
 8004b86:	460d      	mov	r5, r1
 8004b88:	d9f4      	bls.n	8004b74 <_printf_i+0x110>
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d10b      	bne.n	8004ba6 <_printf_i+0x142>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	07df      	lsls	r7, r3, #31
 8004b92:	d508      	bpl.n	8004ba6 <_printf_i+0x142>
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	6861      	ldr	r1, [r4, #4]
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	bfde      	ittt	le
 8004b9c:	2330      	movle	r3, #48	@ 0x30
 8004b9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ba6:	1b92      	subs	r2, r2, r6
 8004ba8:	6122      	str	r2, [r4, #16]
 8004baa:	f8cd a000 	str.w	sl, [sp]
 8004bae:	464b      	mov	r3, r9
 8004bb0:	aa03      	add	r2, sp, #12
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	f7ff fee7 	bl	8004988 <_printf_common>
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d14a      	bne.n	8004c54 <_printf_i+0x1f0>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	b004      	add	sp, #16
 8004bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	f043 0320 	orr.w	r3, r3, #32
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	4832      	ldr	r0, [pc, #200]	@ (8004c9c <_printf_i+0x238>)
 8004bd2:	2778      	movs	r7, #120	@ 0x78
 8004bd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	6831      	ldr	r1, [r6, #0]
 8004bdc:	061f      	lsls	r7, r3, #24
 8004bde:	f851 5b04 	ldr.w	r5, [r1], #4
 8004be2:	d402      	bmi.n	8004bea <_printf_i+0x186>
 8004be4:	065f      	lsls	r7, r3, #25
 8004be6:	bf48      	it	mi
 8004be8:	b2ad      	uxthmi	r5, r5
 8004bea:	6031      	str	r1, [r6, #0]
 8004bec:	07d9      	lsls	r1, r3, #31
 8004bee:	bf44      	itt	mi
 8004bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf4:	6023      	strmi	r3, [r4, #0]
 8004bf6:	b11d      	cbz	r5, 8004c00 <_printf_i+0x19c>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	e7ad      	b.n	8004b58 <_printf_i+0xf4>
 8004bfc:	4826      	ldr	r0, [pc, #152]	@ (8004c98 <_printf_i+0x234>)
 8004bfe:	e7e9      	b.n	8004bd4 <_printf_i+0x170>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	f023 0320 	bic.w	r3, r3, #32
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	e7f6      	b.n	8004bf8 <_printf_i+0x194>
 8004c0a:	4616      	mov	r6, r2
 8004c0c:	e7bd      	b.n	8004b8a <_printf_i+0x126>
 8004c0e:	6833      	ldr	r3, [r6, #0]
 8004c10:	6825      	ldr	r5, [r4, #0]
 8004c12:	6961      	ldr	r1, [r4, #20]
 8004c14:	1d18      	adds	r0, r3, #4
 8004c16:	6030      	str	r0, [r6, #0]
 8004c18:	062e      	lsls	r6, r5, #24
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	d501      	bpl.n	8004c22 <_printf_i+0x1be>
 8004c1e:	6019      	str	r1, [r3, #0]
 8004c20:	e002      	b.n	8004c28 <_printf_i+0x1c4>
 8004c22:	0668      	lsls	r0, r5, #25
 8004c24:	d5fb      	bpl.n	8004c1e <_printf_i+0x1ba>
 8004c26:	8019      	strh	r1, [r3, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	e7bc      	b.n	8004baa <_printf_i+0x146>
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	6032      	str	r2, [r6, #0]
 8004c36:	681e      	ldr	r6, [r3, #0]
 8004c38:	6862      	ldr	r2, [r4, #4]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7fb fadf 	bl	8000200 <memchr>
 8004c42:	b108      	cbz	r0, 8004c48 <_printf_i+0x1e4>
 8004c44:	1b80      	subs	r0, r0, r6
 8004c46:	6060      	str	r0, [r4, #4]
 8004c48:	6863      	ldr	r3, [r4, #4]
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c52:	e7aa      	b.n	8004baa <_printf_i+0x146>
 8004c54:	6923      	ldr	r3, [r4, #16]
 8004c56:	4632      	mov	r2, r6
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	47d0      	blx	sl
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d0ad      	beq.n	8004bbe <_printf_i+0x15a>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	079b      	lsls	r3, r3, #30
 8004c66:	d413      	bmi.n	8004c90 <_printf_i+0x22c>
 8004c68:	68e0      	ldr	r0, [r4, #12]
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	4298      	cmp	r0, r3
 8004c6e:	bfb8      	it	lt
 8004c70:	4618      	movlt	r0, r3
 8004c72:	e7a6      	b.n	8004bc2 <_printf_i+0x15e>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4632      	mov	r2, r6
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	47d0      	blx	sl
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d09d      	beq.n	8004bbe <_printf_i+0x15a>
 8004c82:	3501      	adds	r5, #1
 8004c84:	68e3      	ldr	r3, [r4, #12]
 8004c86:	9903      	ldr	r1, [sp, #12]
 8004c88:	1a5b      	subs	r3, r3, r1
 8004c8a:	42ab      	cmp	r3, r5
 8004c8c:	dcf2      	bgt.n	8004c74 <_printf_i+0x210>
 8004c8e:	e7eb      	b.n	8004c68 <_printf_i+0x204>
 8004c90:	2500      	movs	r5, #0
 8004c92:	f104 0619 	add.w	r6, r4, #25
 8004c96:	e7f5      	b.n	8004c84 <_printf_i+0x220>
 8004c98:	0800510d 	.word	0x0800510d
 8004c9c:	0800511e 	.word	0x0800511e

08004ca0 <memmove>:
 8004ca0:	4288      	cmp	r0, r1
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	eb01 0402 	add.w	r4, r1, r2
 8004ca8:	d902      	bls.n	8004cb0 <memmove+0x10>
 8004caa:	4284      	cmp	r4, r0
 8004cac:	4623      	mov	r3, r4
 8004cae:	d807      	bhi.n	8004cc0 <memmove+0x20>
 8004cb0:	1e43      	subs	r3, r0, #1
 8004cb2:	42a1      	cmp	r1, r4
 8004cb4:	d008      	beq.n	8004cc8 <memmove+0x28>
 8004cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cbe:	e7f8      	b.n	8004cb2 <memmove+0x12>
 8004cc0:	4402      	add	r2, r0
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	428a      	cmp	r2, r1
 8004cc6:	d100      	bne.n	8004cca <memmove+0x2a>
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cd2:	e7f7      	b.n	8004cc4 <memmove+0x24>

08004cd4 <_sbrk_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4d06      	ldr	r5, [pc, #24]	@ (8004cf0 <_sbrk_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	f7fc fe48 	bl	8001974 <_sbrk>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_sbrk_r+0x1a>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_sbrk_r+0x1a>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	200002bc 	.word	0x200002bc

08004cf4 <memcpy>:
 8004cf4:	440a      	add	r2, r1
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cfc:	d100      	bne.n	8004d00 <memcpy+0xc>
 8004cfe:	4770      	bx	lr
 8004d00:	b510      	push	{r4, lr}
 8004d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	d1f9      	bne.n	8004d02 <memcpy+0xe>
 8004d0e:	bd10      	pop	{r4, pc}

08004d10 <_realloc_r>:
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d14:	4607      	mov	r7, r0
 8004d16:	4614      	mov	r4, r2
 8004d18:	460d      	mov	r5, r1
 8004d1a:	b921      	cbnz	r1, 8004d26 <_realloc_r+0x16>
 8004d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	4611      	mov	r1, r2
 8004d22:	f7ff bc4d 	b.w	80045c0 <_malloc_r>
 8004d26:	b92a      	cbnz	r2, 8004d34 <_realloc_r+0x24>
 8004d28:	f7ff fbde 	bl	80044e8 <_free_r>
 8004d2c:	4625      	mov	r5, r4
 8004d2e:	4628      	mov	r0, r5
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	f000 f81a 	bl	8004d6c <_malloc_usable_size_r>
 8004d38:	4284      	cmp	r4, r0
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	d802      	bhi.n	8004d44 <_realloc_r+0x34>
 8004d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d42:	d8f4      	bhi.n	8004d2e <_realloc_r+0x1e>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4638      	mov	r0, r7
 8004d48:	f7ff fc3a 	bl	80045c0 <_malloc_r>
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	b908      	cbnz	r0, 8004d54 <_realloc_r+0x44>
 8004d50:	4645      	mov	r5, r8
 8004d52:	e7ec      	b.n	8004d2e <_realloc_r+0x1e>
 8004d54:	42b4      	cmp	r4, r6
 8004d56:	4622      	mov	r2, r4
 8004d58:	4629      	mov	r1, r5
 8004d5a:	bf28      	it	cs
 8004d5c:	4632      	movcs	r2, r6
 8004d5e:	f7ff ffc9 	bl	8004cf4 <memcpy>
 8004d62:	4629      	mov	r1, r5
 8004d64:	4638      	mov	r0, r7
 8004d66:	f7ff fbbf 	bl	80044e8 <_free_r>
 8004d6a:	e7f1      	b.n	8004d50 <_realloc_r+0x40>

08004d6c <_malloc_usable_size_r>:
 8004d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d70:	1f18      	subs	r0, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bfbc      	itt	lt
 8004d76:	580b      	ldrlt	r3, [r1, r0]
 8004d78:	18c0      	addlt	r0, r0, r3
 8004d7a:	4770      	bx	lr

08004d7c <_init>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	bf00      	nop
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr

08004d88 <_fini>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	bf00      	nop
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr
