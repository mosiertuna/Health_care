
health_care.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000563c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  080057ec  080057ec  000067ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d94  08005d94  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d94  08005d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d9c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          000002e8  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000348  20000348  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001150b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000284f  00000000  00000000  0001859b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0001adf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce0  00000000  00000000  0001be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a6e  00000000  00000000  0001cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c9e  00000000  00000000  00041596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd402  00000000  00000000  00054234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131636  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a68  00000000  00000000  0013167c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001360e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080057d4 	.word	0x080057d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080057d4 	.word	0x080057d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b988 	b.w	8000930 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	468e      	mov	lr, r1
 8000640:	4604      	mov	r4, r0
 8000642:	4688      	mov	r8, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d14a      	bne.n	80006de <__udivmoddi4+0xa6>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d962      	bls.n	8000714 <__udivmoddi4+0xdc>
 800064e:	fab2 f682 	clz	r6, r2
 8000652:	b14e      	cbz	r6, 8000668 <__udivmoddi4+0x30>
 8000654:	f1c6 0320 	rsb	r3, r6, #32
 8000658:	fa01 f806 	lsl.w	r8, r1, r6
 800065c:	fa20 f303 	lsr.w	r3, r0, r3
 8000660:	40b7      	lsls	r7, r6
 8000662:	ea43 0808 	orr.w	r8, r3, r8
 8000666:	40b4      	lsls	r4, r6
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f fc87 	uxth.w	ip, r7
 8000670:	fbb8 f1fe 	udiv	r1, r8, lr
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	fb0e 8811 	mls	r8, lr, r1, r8
 800067a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067e:	fb01 f20c 	mul.w	r2, r1, ip
 8000682:	429a      	cmp	r2, r3
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x62>
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	f101 30ff 	add.w	r0, r1, #4294967295
 800068c:	f080 80ea 	bcs.w	8000864 <__udivmoddi4+0x22c>
 8000690:	429a      	cmp	r2, r3
 8000692:	f240 80e7 	bls.w	8000864 <__udivmoddi4+0x22c>
 8000696:	3902      	subs	r1, #2
 8000698:	443b      	add	r3, r7
 800069a:	1a9a      	subs	r2, r3, r2
 800069c:	b2a3      	uxth	r3, r4
 800069e:	fbb2 f0fe 	udiv	r0, r2, lr
 80006a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ae:	459c      	cmp	ip, r3
 80006b0:	d909      	bls.n	80006c6 <__udivmoddi4+0x8e>
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006b8:	f080 80d6 	bcs.w	8000868 <__udivmoddi4+0x230>
 80006bc:	459c      	cmp	ip, r3
 80006be:	f240 80d3 	bls.w	8000868 <__udivmoddi4+0x230>
 80006c2:	443b      	add	r3, r7
 80006c4:	3802      	subs	r0, #2
 80006c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ca:	eba3 030c 	sub.w	r3, r3, ip
 80006ce:	2100      	movs	r1, #0
 80006d0:	b11d      	cbz	r5, 80006da <__udivmoddi4+0xa2>
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	2200      	movs	r2, #0
 80006d6:	e9c5 3200 	strd	r3, r2, [r5]
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d905      	bls.n	80006ee <__udivmoddi4+0xb6>
 80006e2:	b10d      	cbz	r5, 80006e8 <__udivmoddi4+0xb0>
 80006e4:	e9c5 0100 	strd	r0, r1, [r5]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4608      	mov	r0, r1
 80006ec:	e7f5      	b.n	80006da <__udivmoddi4+0xa2>
 80006ee:	fab3 f183 	clz	r1, r3
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d146      	bne.n	8000784 <__udivmoddi4+0x14c>
 80006f6:	4573      	cmp	r3, lr
 80006f8:	d302      	bcc.n	8000700 <__udivmoddi4+0xc8>
 80006fa:	4282      	cmp	r2, r0
 80006fc:	f200 8105 	bhi.w	800090a <__udivmoddi4+0x2d2>
 8000700:	1a84      	subs	r4, r0, r2
 8000702:	eb6e 0203 	sbc.w	r2, lr, r3
 8000706:	2001      	movs	r0, #1
 8000708:	4690      	mov	r8, r2
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0e5      	beq.n	80006da <__udivmoddi4+0xa2>
 800070e:	e9c5 4800 	strd	r4, r8, [r5]
 8000712:	e7e2      	b.n	80006da <__udivmoddi4+0xa2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	f000 8090 	beq.w	800083a <__udivmoddi4+0x202>
 800071a:	fab2 f682 	clz	r6, r2
 800071e:	2e00      	cmp	r6, #0
 8000720:	f040 80a4 	bne.w	800086c <__udivmoddi4+0x234>
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	b280      	uxth	r0, r0
 800072e:	b2bc      	uxth	r4, r7
 8000730:	2101      	movs	r1, #1
 8000732:	fbb2 fcfe 	udiv	ip, r2, lr
 8000736:	fb0e 221c 	mls	r2, lr, ip, r2
 800073a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073e:	fb04 f20c 	mul.w	r2, r4, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x11e>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f10c 38ff 	add.w	r8, ip, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x11c>
 800074e:	429a      	cmp	r2, r3
 8000750:	f200 80e0 	bhi.w	8000914 <__udivmoddi4+0x2dc>
 8000754:	46c4      	mov	ip, r8
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	fbb3 f2fe 	udiv	r2, r3, lr
 800075c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000760:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000764:	fb02 f404 	mul.w	r4, r2, r4
 8000768:	429c      	cmp	r4, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x144>
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x142>
 8000774:	429c      	cmp	r4, r3
 8000776:	f200 80ca 	bhi.w	800090e <__udivmoddi4+0x2d6>
 800077a:	4602      	mov	r2, r0
 800077c:	1b1b      	subs	r3, r3, r4
 800077e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000782:	e7a5      	b.n	80006d0 <__udivmoddi4+0x98>
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	408b      	lsls	r3, r1
 800078a:	fa22 f706 	lsr.w	r7, r2, r6
 800078e:	431f      	orrs	r7, r3
 8000790:	fa0e f401 	lsl.w	r4, lr, r1
 8000794:	fa20 f306 	lsr.w	r3, r0, r6
 8000798:	fa2e fe06 	lsr.w	lr, lr, r6
 800079c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007a0:	4323      	orrs	r3, r4
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	fa1f fc87 	uxth.w	ip, r7
 80007aa:	fbbe f0f9 	udiv	r0, lr, r9
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007bc:	45a6      	cmp	lr, r4
 80007be:	fa02 f201 	lsl.w	r2, r2, r1
 80007c2:	d909      	bls.n	80007d8 <__udivmoddi4+0x1a0>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ca:	f080 809c 	bcs.w	8000906 <__udivmoddi4+0x2ce>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f240 8099 	bls.w	8000906 <__udivmoddi4+0x2ce>
 80007d4:	3802      	subs	r0, #2
 80007d6:	443c      	add	r4, r7
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	fa1f fe83 	uxth.w	lr, r3
 80007e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e4:	fb09 4413 	mls	r4, r9, r3, r4
 80007e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f0:	45a4      	cmp	ip, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1ce>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007fa:	f080 8082 	bcs.w	8000902 <__udivmoddi4+0x2ca>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d97f      	bls.n	8000902 <__udivmoddi4+0x2ca>
 8000802:	3b02      	subs	r3, #2
 8000804:	443c      	add	r4, r7
 8000806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800080a:	eba4 040c 	sub.w	r4, r4, ip
 800080e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000812:	4564      	cmp	r4, ip
 8000814:	4673      	mov	r3, lr
 8000816:	46e1      	mov	r9, ip
 8000818:	d362      	bcc.n	80008e0 <__udivmoddi4+0x2a8>
 800081a:	d05f      	beq.n	80008dc <__udivmoddi4+0x2a4>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x1fe>
 800081e:	ebb8 0203 	subs.w	r2, r8, r3
 8000822:	eb64 0409 	sbc.w	r4, r4, r9
 8000826:	fa04 f606 	lsl.w	r6, r4, r6
 800082a:	fa22 f301 	lsr.w	r3, r2, r1
 800082e:	431e      	orrs	r6, r3
 8000830:	40cc      	lsrs	r4, r1
 8000832:	e9c5 6400 	strd	r6, r4, [r5]
 8000836:	2100      	movs	r1, #0
 8000838:	e74f      	b.n	80006da <__udivmoddi4+0xa2>
 800083a:	fbb1 fcf2 	udiv	ip, r1, r2
 800083e:	0c01      	lsrs	r1, r0, #16
 8000840:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000844:	b280      	uxth	r0, r0
 8000846:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800084a:	463b      	mov	r3, r7
 800084c:	4638      	mov	r0, r7
 800084e:	463c      	mov	r4, r7
 8000850:	46b8      	mov	r8, r7
 8000852:	46be      	mov	lr, r7
 8000854:	2620      	movs	r6, #32
 8000856:	fbb1 f1f7 	udiv	r1, r1, r7
 800085a:	eba2 0208 	sub.w	r2, r2, r8
 800085e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000862:	e766      	b.n	8000732 <__udivmoddi4+0xfa>
 8000864:	4601      	mov	r1, r0
 8000866:	e718      	b.n	800069a <__udivmoddi4+0x62>
 8000868:	4610      	mov	r0, r2
 800086a:	e72c      	b.n	80006c6 <__udivmoddi4+0x8e>
 800086c:	f1c6 0220 	rsb	r2, r6, #32
 8000870:	fa2e f302 	lsr.w	r3, lr, r2
 8000874:	40b7      	lsls	r7, r6
 8000876:	40b1      	lsls	r1, r6
 8000878:	fa20 f202 	lsr.w	r2, r0, r2
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	430a      	orrs	r2, r1
 8000882:	fbb3 f8fe 	udiv	r8, r3, lr
 8000886:	b2bc      	uxth	r4, r7
 8000888:	fb0e 3318 	mls	r3, lr, r8, r3
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb08 f904 	mul.w	r9, r8, r4
 8000896:	40b0      	lsls	r0, r6
 8000898:	4589      	cmp	r9, r1
 800089a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800089e:	b280      	uxth	r0, r0
 80008a0:	d93e      	bls.n	8000920 <__udivmoddi4+0x2e8>
 80008a2:	1879      	adds	r1, r7, r1
 80008a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008a8:	d201      	bcs.n	80008ae <__udivmoddi4+0x276>
 80008aa:	4589      	cmp	r9, r1
 80008ac:	d81f      	bhi.n	80008ee <__udivmoddi4+0x2b6>
 80008ae:	eba1 0109 	sub.w	r1, r1, r9
 80008b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c4:	4542      	cmp	r2, r8
 80008c6:	d229      	bcs.n	800091c <__udivmoddi4+0x2e4>
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ce:	d2c4      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d0:	4542      	cmp	r2, r8
 80008d2:	d2c2      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d4:	f1a9 0102 	sub.w	r1, r9, #2
 80008d8:	443a      	add	r2, r7
 80008da:	e7be      	b.n	800085a <__udivmoddi4+0x222>
 80008dc:	45f0      	cmp	r8, lr
 80008de:	d29d      	bcs.n	800081c <__udivmoddi4+0x1e4>
 80008e0:	ebbe 0302 	subs.w	r3, lr, r2
 80008e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008e8:	3801      	subs	r0, #1
 80008ea:	46e1      	mov	r9, ip
 80008ec:	e796      	b.n	800081c <__udivmoddi4+0x1e4>
 80008ee:	eba7 0909 	sub.w	r9, r7, r9
 80008f2:	4449      	add	r1, r9
 80008f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fc:	fb09 f804 	mul.w	r8, r9, r4
 8000900:	e7db      	b.n	80008ba <__udivmoddi4+0x282>
 8000902:	4673      	mov	r3, lr
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1ce>
 8000906:	4650      	mov	r0, sl
 8000908:	e766      	b.n	80007d8 <__udivmoddi4+0x1a0>
 800090a:	4608      	mov	r0, r1
 800090c:	e6fd      	b.n	800070a <__udivmoddi4+0xd2>
 800090e:	443b      	add	r3, r7
 8000910:	3a02      	subs	r2, #2
 8000912:	e733      	b.n	800077c <__udivmoddi4+0x144>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	443b      	add	r3, r7
 800091a:	e71c      	b.n	8000756 <__udivmoddi4+0x11e>
 800091c:	4649      	mov	r1, r9
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x222>
 8000920:	eba1 0109 	sub.w	r1, r1, r9
 8000924:	46c4      	mov	ip, r8
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fb09 f804 	mul.w	r8, r9, r4
 800092e:	e7c4      	b.n	80008ba <__udivmoddi4+0x282>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <HX711_Init>:
int32_t hx711_offset = 0;

/**
 * @brief Initialize HX711
 */
void HX711_Init(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    // Set SCK low
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <HX711_Init+0x1c>)
 8000940:	f001 fdf2 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000944:	2064      	movs	r0, #100	@ 0x64
 8000946:	f001 fa57 	bl	8001df8 <HAL_Delay>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40020400 	.word	0x40020400

08000954 <HX711_IsReady>:

/**
 * @brief Check if HX711 is ready for reading
 */
uint8_t HX711_IsReady(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_RESET);
 8000958:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HX711_IsReady+0x20>)
 800095e:	f001 fdcb 	bl	80024f8 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020400 	.word	0x40020400

08000978 <HX711_ReadRaw>:

/**
 * @brief Read raw data from HX711
 */
uint32_t HX711_ReadRaw(uint8_t channel) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
    uint32_t data = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    uint8_t pulses;
    
    // Wait for HX711 to be ready
    while (!HX711_IsReady()) {
 8000986:	e002      	b.n	800098e <HX711_ReadRaw+0x16>
        HAL_Delay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f001 fa35 	bl	8001df8 <HAL_Delay>
    while (!HX711_IsReady()) {
 800098e:	f7ff ffe1 	bl	8000954 <HX711_IsReady>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f7      	beq.n	8000988 <HX711_ReadRaw+0x10>
    }
    
    // Read 24 bits
    for (i = 0; i < 24; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	72fb      	strb	r3, [r7, #11]
 800099c:	e023      	b.n	80009e6 <HX711_ReadRaw+0x6e>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <HX711_ReadRaw+0xf4>)
 80009a6:	f001 fdbf 	bl	8002528 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 80009aa:	2001      	movs	r0, #1
 80009ac:	f000 f898 	bl	8000ae0 <HAL_Delay_us>
        data <<= 1;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
        if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET) {
 80009b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ba:	482c      	ldr	r0, [pc, #176]	@ (8000a6c <HX711_ReadRaw+0xf4>)
 80009bc:	f001 fd9c 	bl	80024f8 <HAL_GPIO_ReadPin>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d103      	bne.n	80009ce <HX711_ReadRaw+0x56>
            data |= 1;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
        }
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d4:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <HX711_ReadRaw+0xf4>)
 80009d6:	f001 fda7 	bl	8002528 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 f880 	bl	8000ae0 <HAL_Delay_us>
    for (i = 0; i < 24; i++) {
 80009e0:	7afb      	ldrb	r3, [r7, #11]
 80009e2:	3301      	adds	r3, #1
 80009e4:	72fb      	strb	r3, [r7, #11]
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	2b17      	cmp	r3, #23
 80009ea:	d9d8      	bls.n	800099e <HX711_ReadRaw+0x26>
    }
    
    // Set channel and gain for next reading
    switch (channel) {
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d00c      	beq.n	8000a0c <HX711_ReadRaw+0x94>
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	dc0d      	bgt.n	8000a12 <HX711_ReadRaw+0x9a>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d002      	beq.n	8000a00 <HX711_ReadRaw+0x88>
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d003      	beq.n	8000a06 <HX711_ReadRaw+0x8e>
 80009fe:	e008      	b.n	8000a12 <HX711_ReadRaw+0x9a>
        case HX711_CHANNEL_A_GAIN_128:
            pulses = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	72bb      	strb	r3, [r7, #10]
            break;
 8000a04:	e008      	b.n	8000a18 <HX711_ReadRaw+0xa0>
        case HX711_CHANNEL_B_GAIN_32:
            pulses = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	72bb      	strb	r3, [r7, #10]
            break;
 8000a0a:	e005      	b.n	8000a18 <HX711_ReadRaw+0xa0>
        case HX711_CHANNEL_A_GAIN_64:
            pulses = 3;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	72bb      	strb	r3, [r7, #10]
            break;
 8000a10:	e002      	b.n	8000a18 <HX711_ReadRaw+0xa0>
        default:
            pulses = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	72bb      	strb	r3, [r7, #10]
            break;
 8000a16:	bf00      	nop
    }
    
    for (i = 0; i < pulses; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	72fb      	strb	r3, [r7, #11]
 8000a1c:	e014      	b.n	8000a48 <HX711_ReadRaw+0xd0>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <HX711_ReadRaw+0xf4>)
 8000a26:	f001 fd7f 	bl	8002528 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 f858 	bl	8000ae0 <HAL_Delay_us>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <HX711_ReadRaw+0xf4>)
 8000a38:	f001 fd76 	bl	8002528 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 f84f 	bl	8000ae0 <HAL_Delay_us>
    for (i = 0; i < pulses; i++) {
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	3301      	adds	r3, #1
 8000a46:	72fb      	strb	r3, [r7, #11]
 8000a48:	7afa      	ldrb	r2, [r7, #11]
 8000a4a:	7abb      	ldrb	r3, [r7, #10]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3e6      	bcc.n	8000a1e <HX711_ReadRaw+0xa6>
    }
    
    // Convert to signed 24-bit value
    if (data & 0x800000) {
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HX711_ReadRaw+0xea>
        data |= 0xFF000000;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000a60:	60fb      	str	r3, [r7, #12]
    }
    
    return data;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020400 	.word	0x40020400

08000a70 <HX711_SetScale>:
}

/**
 * @brief Set scale factor
 */
void HX711_SetScale(float scale) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	ed87 0a01 	vstr	s0, [r7, #4]
    hx711_scale = scale;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <HX711_SetScale+0x1c>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HX711_Tare>:

/**
 * @brief Tare the scale (set current reading as zero)
 */
void HX711_Tare(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
    uint8_t i;
    
    // Take average of multiple readings
    for (i = 0; i < HX711_TARE_SAMPLES; i++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	70fb      	strb	r3, [r7, #3]
 8000a9e:	e00c      	b.n	8000aba <HX711_Tare+0x2a>
        sum += HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff ff69 	bl	8000978 <HX711_ReadRaw>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	607b      	str	r3, [r7, #4]
        HAL_Delay(HX711_STABLE_DELAY_MS);
 8000aae:	2032      	movs	r0, #50	@ 0x32
 8000ab0:	f001 f9a2 	bl	8001df8 <HAL_Delay>
    for (i = 0; i < HX711_TARE_SAMPLES; i++) {
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	70fb      	strb	r3, [r7, #3]
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	2b09      	cmp	r3, #9
 8000abe:	d9ef      	bls.n	8000aa0 <HX711_Tare+0x10>
    }
    
    hx711_offset = sum / HX711_TARE_SAMPLES;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <HX711_Tare+0x48>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <HX711_Tare+0x4c>)
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	cccccccd 	.word	0xcccccccd
 8000adc:	2000007c 	.word	0x2000007c

08000ae0 <HAL_Delay_us>:

/**
 * @brief Microsecond delay function
 * @note This is a simple implementation, for more precise timing use DWT or TIM
 */
void HAL_Delay_us(uint32_t us) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <HAL_Delay_us+0x40>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = us * (SystemCoreClock / 1000000);
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_Delay_us+0x44>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <HAL_Delay_us+0x48>)
 8000af4:	fba2 2303 	umull	r2, r3, r2, r3
 8000af8:	0c9a      	lsrs	r2, r3, #18
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	60bb      	str	r3, [r7, #8]
    
    while ((DWT->CYCCNT - start) < cycles) {
 8000b02:	bf00      	nop
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_Delay_us+0x40>)
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d8f8      	bhi.n	8000b04 <HAL_Delay_us+0x24>
        // Wait
    }
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e0001000 	.word	0xe0001000
 8000b24:	20000004 	.word	0x20000004
 8000b28:	431bde83 	.word	0x431bde83

08000b2c <System_Error_Handler>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
__attribute__((unused)) static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void System_Error_Handler(const char* file, int line, const char* func) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
#if ENABLE_DEBUG_UART
        char error_msg[256];
        snprintf(error_msg, sizeof(error_msg), "Error in %s:%d (%s)\r\n", file, line, func);
        Debug_Printf(error_msg);
#endif
        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // Toggle LED to indicate error
 8000b38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3c:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <System_Error_Handler+0x20>)
 8000b3e:	f001 fd0c 	bl	800255a <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 8000b42:	20c8      	movs	r0, #200	@ 0xc8
 8000b44:	f001 f958 	bl	8001df8 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // Toggle LED to indicate error
 8000b48:	bf00      	nop
 8000b4a:	e7f5      	b.n	8000b38 <System_Error_Handler+0xc>
 8000b4c:	40021800 	.word	0x40021800

08000b50 <HX711_Enhanced_IsReady>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t HX711_Enhanced_IsReady(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    for (int retry = 0; retry < 3; retry++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e00c      	b.n	8000b76 <HX711_Enhanced_IsReady+0x26>
        if (HX711_IsReady()) {
 8000b5c:	f7ff fefa 	bl	8000954 <HX711_IsReady>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HX711_Enhanced_IsReady+0x1a>
            return 1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e009      	b.n	8000b7e <HX711_Enhanced_IsReady+0x2e>
        }
        HAL_Delay(10);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f001 f944 	bl	8001df8 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	ddef      	ble.n	8000b5c <HX711_Enhanced_IsReady+0xc>
    }
    return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Debug_Printf>:
}
#else
/**
 * @brief Empty debug function when debug is disabled
 */
void Debug_Printf(const char* format, ...) {
 8000b86:	b40f      	push	{r0, r1, r2, r3}
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
    (void)format;  // Suppress unused parameter warning
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <System_Init>:
#endif

/**
 * @brief Initialize all modules
 */
void System_Init(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0f0      	sub	sp, #448	@ 0x1c0
 8000b9c:	af02      	add	r7, sp, #8
    Debug_Printf("Healthcare RFID System Starting...\r\n");
 8000b9e:	4868      	ldr	r0, [pc, #416]	@ (8000d40 <System_Init+0x1a8>)
 8000ba0:	f7ff fff1 	bl	8000b86 <Debug_Printf>
    
    // Initialize RC522 RFID module
    RC522_Init();
 8000ba4:	f000 fbfc 	bl	80013a0 <RC522_Init>
    Debug_Printf("RC522 RFID initialized\r\n");
 8000ba8:	4866      	ldr	r0, [pc, #408]	@ (8000d44 <System_Init+0x1ac>)
 8000baa:	f7ff ffec 	bl	8000b86 <Debug_Printf>
    
    // Initialize HX711 weight sensor
    HX711_Init();
 8000bae:	f7ff fec1 	bl	8000934 <HX711_Init>
    Debug_Printf("HX711 weight sensor initialized\r\n");
 8000bb2:	4865      	ldr	r0, [pc, #404]	@ (8000d48 <System_Init+0x1b0>)
 8000bb4:	f7ff ffe7 	bl	8000b86 <Debug_Printf>
    
    // Initialize Simple Protocol
    SimpleProtocol_Init();
 8000bb8:	f000 fefe 	bl	80019b8 <SimpleProtocol_Init>
    Debug_Printf("Simple Protocol initialized\r\n");
 8000bbc:	4863      	ldr	r0, [pc, #396]	@ (8000d4c <System_Init+0x1b4>)
 8000bbe:	f7ff ffe2 	bl	8000b86 <Debug_Printf>
    
    // Enable DWT for microsecond delays (used by HX711)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bc2:	4b63      	ldr	r3, [pc, #396]	@ (8000d50 <System_Init+0x1b8>)
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	4a62      	ldr	r2, [pc, #392]	@ (8000d50 <System_Init+0x1b8>)
 8000bc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bcc:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000bce:	4b61      	ldr	r3, [pc, #388]	@ (8000d54 <System_Init+0x1bc>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a60      	ldr	r2, [pc, #384]	@ (8000d54 <System_Init+0x1bc>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6013      	str	r3, [r2, #0]
    
    // Wait for system stabilization
    Debug_Printf("System stabilizing...\r\n");
 8000bda:	485f      	ldr	r0, [pc, #380]	@ (8000d58 <System_Init+0x1c0>)
 8000bdc:	f7ff ffd3 	bl	8000b86 <Debug_Printf>
    HAL_Delay(SYSTEM_INIT_DELAY_MS);
 8000be0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000be4:	f001 f908 	bl	8001df8 <HAL_Delay>
    
    // Tare the scale
    Debug_Printf("Taring scale...\r\n");
 8000be8:	485c      	ldr	r0, [pc, #368]	@ (8000d5c <System_Init+0x1c4>)
 8000bea:	f7ff ffcc 	bl	8000b86 <Debug_Printf>
    HX711_Tare();
 8000bee:	f7ff ff4f 	bl	8000a90 <HX711_Tare>
    
    // Debug: Check tare result
    char tare_result[100];
    snprintf(tare_result, sizeof(tare_result), "Tare completed. Offset: %ld\r\n", hx711_offset);
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8000d60 <System_Init+0x1c8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8000bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8000d64 <System_Init+0x1cc>)
 8000bfc:	2164      	movs	r1, #100	@ 0x64
 8000bfe:	f004 f925 	bl	8004e4c <sniprintf>
    Debug_Printf(tare_result);
 8000c02:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffbd 	bl	8000b86 <Debug_Printf>
    
    // Set scale factor (this should be calibrated for your specific load cell)
    HX711_SetScale(HX711_DEFAULT_SCALE);
 8000c0c:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8000d68 <System_Init+0x1d0>
 8000c10:	f7ff ff2e 	bl	8000a70 <HX711_SetScale>
    Debug_Printf("Scale factor set to %.1f\r\n", HX711_DEFAULT_SCALE);
 8000c14:	f04f 0200 	mov.w	r2, #0
 8000c18:	4b54      	ldr	r3, [pc, #336]	@ (8000d6c <System_Init+0x1d4>)
 8000c1a:	4855      	ldr	r0, [pc, #340]	@ (8000d70 <System_Init+0x1d8>)
 8000c1c:	f7ff ffb3 	bl	8000b86 <Debug_Printf>
    
    // CRITICAL: Test float printing capability
    float test_value = 123.45f;
 8000c20:	4b54      	ldr	r3, [pc, #336]	@ (8000d74 <System_Init+0x1dc>)
 8000c22:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    char float_test[80];
    snprintf(float_test, sizeof(float_test), "Float test 123.45: %.2f\r\n", test_value); // @suppress("Float formatting support")
 8000c26:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8000c2a:	f7ff fc95 	bl	8000558 <__aeabi_f2d>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8000c36:	e9cd 2300 	strd	r2, r3, [sp]
 8000c3a:	4a4f      	ldr	r2, [pc, #316]	@ (8000d78 <System_Init+0x1e0>)
 8000c3c:	2150      	movs	r1, #80	@ 0x50
 8000c3e:	f004 f905 	bl	8004e4c <sniprintf>
    Debug_Printf(float_test);
 8000c42:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff9d 	bl	8000b86 <Debug_Printf>
    
    // Debug: Verify scale was set correctly
    char scale_verify[100];
    snprintf(scale_verify, sizeof(scale_verify), "Verified scale: %.3f\r\n", hx711_scale); // @suppress("Float formatting support")
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d7c <System_Init+0x1e4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fc81 	bl	8000558 <__aeabi_f2d>
 8000c56:	4602      	mov	r2, r0
 8000c58:	460b      	mov	r3, r1
 8000c5a:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8000c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8000c62:	4a47      	ldr	r2, [pc, #284]	@ (8000d80 <System_Init+0x1e8>)
 8000c64:	2164      	movs	r1, #100	@ 0x64
 8000c66:	f004 f8f1 	bl	8004e4c <sniprintf>
    Debug_Printf(scale_verify);
 8000c6a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff89 	bl	8000b86 <Debug_Printf>
    
    // Force fix if scale is still invalid
    if (hx711_scale == 0.0f || hx711_scale != hx711_scale) {
 8000c74:	4b41      	ldr	r3, [pc, #260]	@ (8000d7c <System_Init+0x1e4>)
 8000c76:	edd3 7a00 	vldr	s15, [r3]
 8000c7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c82:	d00a      	beq.n	8000c9a <System_Init+0x102>
 8000c84:	4b3d      	ldr	r3, [pc, #244]	@ (8000d7c <System_Init+0x1e4>)
 8000c86:	ed93 7a00 	vldr	s14, [r3]
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d7c <System_Init+0x1e4>)
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	eeb4 7a67 	vcmp.f32	s14, s15
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	d018      	beq.n	8000ccc <System_Init+0x134>
        Debug_Printf("ERROR: Scale still invalid after set! Force fixing...\r\n");
 8000c9a:	483a      	ldr	r0, [pc, #232]	@ (8000d84 <System_Init+0x1ec>)
 8000c9c:	f7ff ff73 	bl	8000b86 <Debug_Printf>
        hx711_scale = 420.0f; // Force assignment with known value
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <System_Init+0x1e4>)
 8000ca2:	4a39      	ldr	r2, [pc, #228]	@ (8000d88 <System_Init+0x1f0>)
 8000ca4:	601a      	str	r2, [r3, #0]
        char force_fix[100];
        snprintf(force_fix, sizeof(force_fix), "Force fixed scale to: %.3f\r\n", hx711_scale); // @suppress("Float formatting support")
 8000ca6:	4b35      	ldr	r3, [pc, #212]	@ (8000d7c <System_Init+0x1e4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc54 	bl	8000558 <__aeabi_f2d>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8000cba:	4a34      	ldr	r2, [pc, #208]	@ (8000d8c <System_Init+0x1f4>)
 8000cbc:	2164      	movs	r1, #100	@ 0x64
 8000cbe:	f004 f8c5 	bl	8004e4c <sniprintf>
        Debug_Printf(force_fix);
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5e 	bl	8000b86 <Debug_Printf>
    if (hx711_scale == 0.0f || hx711_scale != hx711_scale) {
 8000cca:	e002      	b.n	8000cd2 <System_Init+0x13a>
    } else {
        Debug_Printf("Scale appears to be set correctly.\r\n");
 8000ccc:	4830      	ldr	r0, [pc, #192]	@ (8000d90 <System_Init+0x1f8>)
 8000cce:	f7ff ff5a 	bl	8000b86 <Debug_Printf>
    }
    
    // Test HX711 immediately after init
    if (HX711_IsReady()) {
 8000cd2:	f7ff fe3f 	bl	8000954 <HX711_IsReady>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d023      	beq.n	8000d24 <System_Init+0x18c>
        uint32_t test_raw = HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fe4b 	bl	8000978 <HX711_ReadRaw>
 8000ce2:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0
        char test_result[150];
        snprintf(test_result, sizeof(test_result), "HX711 Test - Raw: %lu (0x%08lX)\r\n", test_raw, test_raw);
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000cf2:	4a28      	ldr	r2, [pc, #160]	@ (8000d94 <System_Init+0x1fc>)
 8000cf4:	2196      	movs	r1, #150	@ 0x96
 8000cf6:	f004 f8a9 	bl	8004e4c <sniprintf>
        Debug_Printf(test_result);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff42 	bl	8000b86 <Debug_Printf>
        
        if (test_raw == 0xFFFFFFFF || test_raw == 0x00000000) {
 8000d02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d003      	beq.n	8000d14 <System_Init+0x17c>
 8000d0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <System_Init+0x184>
            Debug_Printf("WARNING: HX711 returning invalid data!\r\n");
 8000d14:	4820      	ldr	r0, [pc, #128]	@ (8000d98 <System_Init+0x200>)
 8000d16:	f7ff ff36 	bl	8000b86 <Debug_Printf>
 8000d1a:	e006      	b.n	8000d2a <System_Init+0x192>
        } else {
            Debug_Printf("HX711 seems to be working.\r\n");
 8000d1c:	481f      	ldr	r0, [pc, #124]	@ (8000d9c <System_Init+0x204>)
 8000d1e:	f7ff ff32 	bl	8000b86 <Debug_Printf>
 8000d22:	e002      	b.n	8000d2a <System_Init+0x192>
        }
    } else {
        Debug_Printf("WARNING: HX711 not ready after init!\r\n");
 8000d24:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <System_Init+0x208>)
 8000d26:	f7ff ff2e 	bl	8000b86 <Debug_Printf>
    // Initialize status LEDs
    Status_LED_Control(2, 1); // System ready LED ON
    Debug_Printf("Status LEDs initialized\r\n");
#endif
    
    system_ready = 1;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <System_Init+0x20c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
    Debug_Printf("System ready!\r\n");
 8000d30:	481d      	ldr	r0, [pc, #116]	@ (8000da8 <System_Init+0x210>)
 8000d32:	f7ff ff28 	bl	8000b86 <Debug_Printf>
}
 8000d36:	bf00      	nop
 8000d38:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	080057ec 	.word	0x080057ec
 8000d44:	08005814 	.word	0x08005814
 8000d48:	08005830 	.word	0x08005830
 8000d4c:	08005854 	.word	0x08005854
 8000d50:	e000edf0 	.word	0xe000edf0
 8000d54:	e0001000 	.word	0xe0001000
 8000d58:	08005874 	.word	0x08005874
 8000d5c:	0800588c 	.word	0x0800588c
 8000d60:	2000007c 	.word	0x2000007c
 8000d64:	080058a0 	.word	0x080058a0
 8000d68:	43d20000 	.word	0x43d20000
 8000d6c:	407a4000 	.word	0x407a4000
 8000d70:	080058c0 	.word	0x080058c0
 8000d74:	42f6e666 	.word	0x42f6e666
 8000d78:	080058dc 	.word	0x080058dc
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	080058f8 	.word	0x080058f8
 8000d84:	08005910 	.word	0x08005910
 8000d88:	43d20000 	.word	0x43d20000
 8000d8c:	08005948 	.word	0x08005948
 8000d90:	08005968 	.word	0x08005968
 8000d94:	08005990 	.word	0x08005990
 8000d98:	080059b4 	.word	0x080059b4
 8000d9c:	080059e0 	.word	0x080059e0
 8000da0:	08005a00 	.word	0x08005a00
 8000da4:	20000174 	.word	0x20000174
 8000da8:	08005a28 	.word	0x08005a28

08000dac <Process_RFID>:

/**
 * @brief Process RFID card reading - Simple protocol version
 */
void Process_RFID(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
    RC522_Status status;
    uint32_t current_time = HAL_GetTick();
 8000db2:	f001 f815 	bl	8001de0 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]
    static uint8_t card_sent = 0;  // Flag to prevent multiple sends
    
    status = RC522_ReadUID(card_uid);
 8000db8:	483a      	ldr	r0, [pc, #232]	@ (8000ea4 <Process_RFID+0xf8>)
 8000dba:	f000 fc54 	bl	8001666 <RC522_ReadUID>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
    
    if (status == RC522_OK) {
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d15e      	bne.n	8000e86 <Process_RFID+0xda>
        // Check if this is the same card as before
        uint8_t same_card = (memcmp(card_uid, last_card_uid, UID_SIZE) == 0);
 8000dc8:	2204      	movs	r2, #4
 8000dca:	4937      	ldr	r1, [pc, #220]	@ (8000ea8 <Process_RFID+0xfc>)
 8000dcc:	4835      	ldr	r0, [pc, #212]	@ (8000ea4 <Process_RFID+0xf8>)
 8000dce:	f004 f873 	bl	8004eb8 <memcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf0c      	ite	eq
 8000dd8:	2301      	moveq	r3, #1
 8000dda:	2300      	movne	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	73bb      	strb	r3, [r7, #14]
        
        // Only process if it's a new card or enough time has passed
        if (!same_card || (current_time - last_card_read_time > RC522_CARD_DETECTION_DELAY_MS)) {
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <Process_RFID+0x48>
 8000de6:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <Process_RFID+0x100>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000df2:	d952      	bls.n	8000e9a <Process_RFID+0xee>
            
            // Reset card sent flag for new card
            if (!same_card) {
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <Process_RFID+0x54>
                card_sent = 0;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <Process_RFID+0x104>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
            }
            
            // Only send once per card detection
            if (!card_sent) {
 8000e00:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <Process_RFID+0x104>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d148      	bne.n	8000e9a <Process_RFID+0xee>
                // Get current weight if HX711 is ready
                float weight = 0.0f;
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
                if (HX711_Enhanced_IsReady()) {
 8000e0e:	f7ff fe9f 	bl	8000b50 <HX711_Enhanced_IsReady>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d023      	beq.n	8000e60 <Process_RFID+0xb4>
                    uint32_t raw_data = HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff fdad 	bl	8000978 <HX711_ReadRaw>
 8000e1e:	60b8      	str	r0, [r7, #8]
                    if (raw_data != 0xFFFFFFFF && raw_data != 0x00000000) {
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e26:	d01b      	beq.n	8000e60 <Process_RFID+0xb4>
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d018      	beq.n	8000e60 <Process_RFID+0xb4>
                        // Simple weight calculation
                        int32_t value_with_offset = (int32_t)raw_data - hx711_offset;
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <Process_RFID+0x108>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	607b      	str	r3, [r7, #4]
                        weight = (float)value_with_offset / hx711_scale;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <Process_RFID+0x10c>)
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4c:	edc7 7a05 	vstr	s15, [r7, #20]
                        weight *= 1000.0f; // Convert to grams
 8000e50:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e54:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000ebc <Process_RFID+0x110>
 8000e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5c:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                
                // Send data using simple protocol
                SimpleProtocol_ProcessCardDetection(card_uid, weight);
 8000e60:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e64:	480f      	ldr	r0, [pc, #60]	@ (8000ea4 <Process_RFID+0xf8>)
 8000e66:	f000 fcc1 	bl	80017ec <SimpleProtocol_ProcessCardDetection>
                
                // Update status
                memcpy(last_card_uid, card_uid, UID_SIZE);
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <Process_RFID+0xf8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <Process_RFID+0xfc>)
 8000e70:	6013      	str	r3, [r2, #0]
                last_card_read_time = current_time;
 8000e72:	4a0e      	ldr	r2, [pc, #56]	@ (8000eac <Process_RFID+0x100>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	6013      	str	r3, [r2, #0]
                card_present = 1;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <Process_RFID+0x114>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
                card_sent = 1;  // Mark as sent
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <Process_RFID+0x104>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
            // Card was removed - reset flag
            card_present = 0;
            card_sent = 0;
        }
    }
}
 8000e84:	e009      	b.n	8000e9a <Process_RFID+0xee>
        if (card_present) {
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <Process_RFID+0x114>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <Process_RFID+0xee>
            card_present = 0;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <Process_RFID+0x114>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
            card_sent = 0;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <Process_RFID+0x104>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000168 	.word	0x20000168
 8000ea8:	20000178 	.word	0x20000178
 8000eac:	20000170 	.word	0x20000170
 8000eb0:	2000017d 	.word	0x2000017d
 8000eb4:	2000007c 	.word	0x2000007c
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	447a0000 	.word	0x447a0000
 8000ec0:	2000017c 	.word	0x2000017c

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000ec8:	f000 ff24 	bl	8001d14 <HAL_Init>
  SystemClock_Config();
 8000ecc:	f000 f812 	bl	8000ef4 <SystemClock_Config>
  
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f8e0 	bl	8001094 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ed4:	f000 f87e 	bl	8000fd4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ed8:	f000 f8b2 	bl	8001040 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  System_Init();
 8000edc:	f7ff fe5c 	bl	8000b98 <System_Init>
  SimpleProtocol_Init(); // This will start UART interrupt
 8000ee0:	f000 fd6a 	bl	80019b8 <SimpleProtocol_Init>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Process_RFID();
 8000ee4:	f7ff ff62 	bl	8000dac <Process_RFID>
    HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f000 ff85 	bl	8001df8 <HAL_Delay>
    Process_RFID();
 8000eee:	bf00      	nop
 8000ef0:	e7f8      	b.n	8000ee4 <main+0x20>
	...

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	@ 0x50
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2230      	movs	r2, #48	@ 0x30
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 ffe8 	bl	8004ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <SystemClock_Config+0xd8>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a2a      	ldr	r2, [pc, #168]	@ (8000fcc <SystemClock_Config+0xd8>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <SystemClock_Config+0xd8>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b25      	ldr	r3, [pc, #148]	@ (8000fd0 <SystemClock_Config+0xdc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a24      	ldr	r2, [pc, #144]	@ (8000fd0 <SystemClock_Config+0xdc>)
 8000f3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <SystemClock_Config+0xdc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	2301      	movs	r3, #1
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f64:	2308      	movs	r3, #8
 8000f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f68:	23b4      	movs	r3, #180	@ 0xb4
 8000f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f70:	2304      	movs	r3, #4
 8000f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fb59 	bl	8002630 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f84:	f000 f918 	bl	80011b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f88:	f001 fb02 	bl	8002590 <HAL_PWREx_EnableOverDrive>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f92:	f000 f911 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	2105      	movs	r1, #5
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fdb3 	bl	8002b20 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fc0:	f000 f8fa 	bl	80011b8 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3750      	adds	r7, #80	@ 0x50
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	@ (800103c <MX_SPI1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001008:	2218      	movs	r2, #24
 800100a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001020:	220a      	movs	r2, #10
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001026:	f001 ff5b 	bl	8002ee0 <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 f8c2 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000080 	.word	0x20000080
 800103c:	40013000 	.word	0x40013000

08001040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_USART1_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART1_UART_Init+0x4c>)
 8001078:	f002 fdd8 	bl	8003c2c <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f899 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000120 	.word	0x20000120
 8001090:	40011000 	.word	0x40011000

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a35      	ldr	r2, [pc, #212]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_GPIO_Init+0xf4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HC_TRIG_Pin|ILI9341_CS_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2103      	movs	r1, #3
 8001102:	4822      	ldr	r0, [pc, #136]	@ (800118c <MX_GPIO_Init+0xf8>)
 8001104:	f001 fa10 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_CS_Pin|ILI9341_DC_Pin|ILI9341_RESET_Pin|HX711_SCK_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f241 0107 	movw	r1, #4103	@ 0x1007
 800110e:	4820      	ldr	r0, [pc, #128]	@ (8001190 <MX_GPIO_Init+0xfc>)
 8001110:	f001 fa0a 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HC_TRIG_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = HC_TRIG_Pin|ILI9341_CS_Pin;
 8001114:	2303      	movs	r3, #3
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	4818      	ldr	r0, [pc, #96]	@ (800118c <MX_GPIO_Init+0xf8>)
 800112c:	f001 f838 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_ECHO_Pin */
  GPIO_InitStruct.Pin = HC_ECHO_Pin;
 8001130:	2310      	movs	r3, #16
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HC_ECHO_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	4812      	ldr	r0, [pc, #72]	@ (800118c <MX_GPIO_Init+0xf8>)
 8001144:	f001 f82c 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_CS_Pin ILI9341_DC_Pin ILI9341_RESET_Pin HX711_SCK_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|ILI9341_DC_Pin|ILI9341_RESET_Pin|HX711_SCK_Pin;
 8001148:	f241 0307 	movw	r3, #4103	@ 0x1007
 800114c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	@ (8001190 <MX_GPIO_Init+0xfc>)
 8001162:	f001 f81d 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8001166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800116a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_GPIO_Init+0xfc>)
 800117c:	f001 f810 	bl	80021a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020800 	.word	0x40020800
 8001190:	40020400 	.word	0x40020400

08001194 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_UART_RxCpltCallback+0x20>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_UART_RxCpltCallback+0x16>
        SimpleProtocol_UART_RxCpltCallback();
 80011a6:	f000 fb57 	bl	8001858 <SimpleProtocol_UART_RxCpltCallback>
    }
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40011000 	.word	0x40011000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  System_Error_Handler(__FILE__, __LINE__, __FUNCTION__);
 80011bc:	4a03      	ldr	r2, [pc, #12]	@ (80011cc <Error_Handler+0x14>)
 80011be:	f240 21c7 	movw	r1, #711	@ 0x2c7
 80011c2:	4803      	ldr	r0, [pc, #12]	@ (80011d0 <Error_Handler+0x18>)
 80011c4:	f7ff fcb2 	bl	8000b2c <System_Error_Handler>
  /* USER CODE END Error_Handler_Debug */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	08005d30 	.word	0x08005d30
 80011d0:	08005d1c 	.word	0x08005d1c

080011d4 <RC522_WriteRegister>:
extern UART_HandleTypeDef huart1;

/**
 * @brief Write data to RC522 register
 */
void RC522_WriteRegister(uint8_t addr, uint8_t val) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2];
    tx_data[0] = (addr << 1) & 0x7E;  // Address shifted and write bit
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	733b      	strb	r3, [r7, #12]
    tx_data[1] = val;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	737b      	strb	r3, [r7, #13]
    
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2101      	movs	r1, #1
 80011fa:	480a      	ldr	r0, [pc, #40]	@ (8001224 <RC522_WriteRegister+0x50>)
 80011fc:	f001 f994 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx_data, 2, HAL_MAX_DELAY);
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2202      	movs	r2, #2
 800120a:	4807      	ldr	r0, [pc, #28]	@ (8001228 <RC522_WriteRegister+0x54>)
 800120c:	f001 fef1 	bl	8002ff2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2101      	movs	r1, #1
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <RC522_WriteRegister+0x50>)
 8001216:	f001 f987 	bl	8002528 <HAL_GPIO_WritePin>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020400 	.word	0x40020400
 8001228:	20000080 	.word	0x20000080

0800122c <RC522_ReadRegister>:

/**
 * @brief Read data from RC522 register
 */
uint8_t RC522_ReadRegister(uint8_t addr) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af02      	add	r7, sp, #8
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[2];
    uint8_t rx_data[2];
    
    tx_data[0] = ((addr << 1) & 0x7E) | 0x80;  // Address shifted and read bit
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	b25b      	sxtb	r3, r3
 800123e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001242:	b25b      	sxtb	r3, r3
 8001244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001248:	b25b      	sxtb	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	737b      	strb	r3, [r7, #13]
    
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	480c      	ldr	r0, [pc, #48]	@ (8001288 <RC522_ReadRegister+0x5c>)
 8001258:	f001 f966 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2302      	movs	r3, #2
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <RC522_ReadRegister+0x60>)
 800126e:	f002 f804 	bl	800327a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2101      	movs	r1, #1
 8001276:	4804      	ldr	r0, [pc, #16]	@ (8001288 <RC522_ReadRegister+0x5c>)
 8001278:	f001 f956 	bl	8002528 <HAL_GPIO_WritePin>
    
    return rx_data[1];
 800127c:	7a7b      	ldrb	r3, [r7, #9]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020400 	.word	0x40020400
 800128c:	20000080 	.word	0x20000080

08001290 <RC522_SetBitMask>:

/**
 * @brief Set bit mask in register
 */
void RC522_SetBitMask(uint8_t addr, uint8_t mask) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
    uint8_t val = RC522_ReadRegister(addr);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffc2 	bl	800122c <RC522_ReadRegister>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(addr, val | mask);
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff8b 	bl	80011d4 <RC522_WriteRegister>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <RC522_ClearBitMask>:

/**
 * @brief Clear bit mask in register
 */
void RC522_ClearBitMask(uint8_t addr, uint8_t mask) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	460a      	mov	r2, r1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	4613      	mov	r3, r2
 80012d4:	71bb      	strb	r3, [r7, #6]
    uint8_t val = RC522_ReadRegister(addr);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ffa7 	bl	800122c <RC522_ReadRegister>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(addr, val & (~mask));
 80012e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b25a      	sxtb	r2, r3
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4013      	ands	r3, r2
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff6b 	bl	80011d4 <RC522_WriteRegister>
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <RC522_Reset>:

/**
 * @brief Reset RC522 with improved sequence
 */
void RC522_Reset(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    // Hardware reset if RST pin is defined
    #ifdef RC522_RST_Pin
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2104      	movs	r1, #4
 8001312:	4817      	ldr	r0, [pc, #92]	@ (8001370 <RC522_Reset+0x68>)
 8001314:	f001 f908 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Hold reset for 10ms
 8001318:	200a      	movs	r0, #10
 800131a:	f000 fd6d 	bl	8001df8 <HAL_Delay>
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2104      	movs	r1, #4
 8001322:	4813      	ldr	r0, [pc, #76]	@ (8001370 <RC522_Reset+0x68>)
 8001324:	f001 f900 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // Wait for RC522 to start up
 8001328:	2032      	movs	r0, #50	@ 0x32
 800132a:	f000 fd65 	bl	8001df8 <HAL_Delay>
    #endif
    
    // Software reset command
    RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_SOFT_RESET);
 800132e:	210f      	movs	r1, #15
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff ff4f 	bl	80011d4 <RC522_WriteRegister>
    HAL_Delay(RC522_RESET_DELAY_MS);
 8001336:	2032      	movs	r0, #50	@ 0x32
 8001338:	f000 fd5e 	bl	8001df8 <HAL_Delay>
    
    // Wait for reset to complete - check if RC522 is ready
    for (int i = 0; i < 10; i++) {
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	e00d      	b.n	800135e <RC522_Reset+0x56>
        uint8_t status = RC522_ReadRegister(RC522_REG_COMMAND);
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff ff72 	bl	800122c <RC522_ReadRegister>
 8001348:	4603      	mov	r3, r0
 800134a:	70fb      	strb	r3, [r7, #3]
        if (status == RC522_CMD_IDLE) {
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <RC522_Reset+0x5e>
            break;  // Reset completed
        }
        HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f000 fd50 	bl	8001df8 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b09      	cmp	r3, #9
 8001362:	ddee      	ble.n	8001342 <RC522_Reset+0x3a>
    }
}
 8001364:	e000      	b.n	8001368 <RC522_Reset+0x60>
            break;  // Reset completed
 8001366:	bf00      	nop
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400

08001374 <RC522_AntennaOn>:

/**
 * @brief Turn on antenna
 */
void RC522_AntennaOn(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
    uint8_t val = RC522_ReadRegister(RC522_REG_TX_CONTROL);
 800137a:	2014      	movs	r0, #20
 800137c:	f7ff ff56 	bl	800122c <RC522_ReadRegister>
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
    if (!(val & 0x03)) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d103      	bne.n	8001396 <RC522_AntennaOn+0x22>
        RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03);
 800138e:	2103      	movs	r1, #3
 8001390:	2014      	movs	r0, #20
 8001392:	f7ff ff7d 	bl	8001290 <RC522_SetBitMask>
    }
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <RC522_Init>:
}

/**
 * @brief Initialize RC522 with enhanced sequence
 */
void RC522_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    // Initialize CS pin to high (not selected)
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4815      	ldr	r0, [pc, #84]	@ (8001400 <RC522_Init+0x60>)
 80013aa:	f001 f8bd 	bl	8002528 <HAL_GPIO_WritePin>
    
    // Initialize RST pin if defined
    #ifdef RC522_RST_Pin
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2104      	movs	r1, #4
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <RC522_Init+0x60>)
 80013b4:	f001 f8b8 	bl	8002528 <HAL_GPIO_WritePin>
    #endif
    
    // Wait for power stabilization
    HAL_Delay(100);
 80013b8:	2064      	movs	r0, #100	@ 0x64
 80013ba:	f000 fd1d 	bl	8001df8 <HAL_Delay>
    
    // Reset RC522
    RC522_Reset();
 80013be:	f7ff ffa3 	bl	8001308 <RC522_Reset>
    
    // Additional delay after reset
    HAL_Delay(100);
 80013c2:	2064      	movs	r0, #100	@ 0x64
 80013c4:	f000 fd18 	bl	8001df8 <HAL_Delay>
    
    // Configure timer
    RC522_WriteRegister(RC522_REG_T_MODE, 0x8D);
 80013c8:	218d      	movs	r1, #141	@ 0x8d
 80013ca:	202a      	movs	r0, #42	@ 0x2a
 80013cc:	f7ff ff02 	bl	80011d4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3E);
 80013d0:	213e      	movs	r1, #62	@ 0x3e
 80013d2:	202b      	movs	r0, #43	@ 0x2b
 80013d4:	f7ff fefe 	bl	80011d4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30);
 80013d8:	211e      	movs	r1, #30
 80013da:	202d      	movs	r0, #45	@ 0x2d
 80013dc:	f7ff fefa 	bl	80011d4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0);
 80013e0:	2100      	movs	r1, #0
 80013e2:	202c      	movs	r0, #44	@ 0x2c
 80013e4:	f7ff fef6 	bl	80011d4 <RC522_WriteRegister>
    
    // Configure RF
    RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40);
 80013e8:	2140      	movs	r1, #64	@ 0x40
 80013ea:	2015      	movs	r0, #21
 80013ec:	f7ff fef2 	bl	80011d4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_MODE, 0x3D);
 80013f0:	213d      	movs	r1, #61	@ 0x3d
 80013f2:	2011      	movs	r0, #17
 80013f4:	f7ff feee 	bl	80011d4 <RC522_WriteRegister>
    
    RC522_AntennaOn();
 80013f8:	f7ff ffbc 	bl	8001374 <RC522_AntennaOn>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020400 	.word	0x40020400

08001404 <RC522_ToCard>:

/**
 * @brief Communicate with card
 */
RC522_Status RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, 
                          uint8_t *backData, uint16_t *backLen) {
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	4613      	mov	r3, r2
 8001414:	73bb      	strb	r3, [r7, #14]
    RC522_Status status = RC522_ERROR;
 8001416:	2302      	movs	r3, #2
 8001418:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x77;
 800141a:	2377      	movs	r3, #119	@ 0x77
 800141c:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x30;
 800141e:	2330      	movs	r3, #48	@ 0x30
 8001420:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;
    
    switch (command) {
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b0c      	cmp	r3, #12
 8001426:	d006      	beq.n	8001436 <RC522_ToCard+0x32>
 8001428:	2b0e      	cmp	r3, #14
 800142a:	d109      	bne.n	8001440 <RC522_ToCard+0x3c>
        case RC522_CMD_MF_AUTHENT:
            irqEn = 0x12;
 800142c:	2312      	movs	r3, #18
 800142e:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
 8001430:	2310      	movs	r3, #16
 8001432:	757b      	strb	r3, [r7, #21]
            break;
 8001434:	e005      	b.n	8001442 <RC522_ToCard+0x3e>
        case RC522_CMD_TRANSCEIVE:
            irqEn = 0x77;
 8001436:	2377      	movs	r3, #119	@ 0x77
 8001438:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
 800143a:	2330      	movs	r3, #48	@ 0x30
 800143c:	757b      	strb	r3, [r7, #21]
            break;
 800143e:	e000      	b.n	8001442 <RC522_ToCard+0x3e>
        default:
            break;
 8001440:	bf00      	nop
    }
    
    RC522_WriteRegister(RC522_REG_COMM_IEN, irqEn | 0x80);
 8001442:	7dbb      	ldrb	r3, [r7, #22]
 8001444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff fec1 	bl	80011d4 <RC522_WriteRegister>
    RC522_ClearBitMask(RC522_REG_COMM_IRQ, 0x80);
 8001452:	2180      	movs	r1, #128	@ 0x80
 8001454:	2004      	movs	r0, #4
 8001456:	f7ff ff36 	bl	80012c6 <RC522_ClearBitMask>
    RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80);
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	200a      	movs	r0, #10
 800145e:	f7ff ff17 	bl	8001290 <RC522_SetBitMask>
    
    RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_IDLE);
 8001462:	2100      	movs	r1, #0
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff feb5 	bl	80011d4 <RC522_WriteRegister>
    
    // Write data to FIFO
    for (i = 0; i < sendLen; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	827b      	strh	r3, [r7, #18]
 800146e:	e00a      	b.n	8001486 <RC522_ToCard+0x82>
        RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);
 8001470:	8a7b      	ldrh	r3, [r7, #18]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	2009      	movs	r0, #9
 800147c:	f7ff feaa 	bl	80011d4 <RC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
 8001480:	8a7b      	ldrh	r3, [r7, #18]
 8001482:	3301      	adds	r3, #1
 8001484:	827b      	strh	r3, [r7, #18]
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	b29b      	uxth	r3, r3
 800148a:	8a7a      	ldrh	r2, [r7, #18]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3ef      	bcc.n	8001470 <RC522_ToCard+0x6c>
    }
    
    // Execute command
    RC522_WriteRegister(RC522_REG_COMMAND, command);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4619      	mov	r1, r3
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fe9d 	bl	80011d4 <RC522_WriteRegister>
    if (command == RC522_CMD_TRANSCEIVE) {
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b0c      	cmp	r3, #12
 800149e:	d103      	bne.n	80014a8 <RC522_ToCard+0xa4>
        RC522_SetBitMask(RC522_REG_BIT_FRAMING, 0x80);
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	200d      	movs	r0, #13
 80014a4:	f7ff fef4 	bl	8001290 <RC522_SetBitMask>
    }
    
    // Wait for completion
    i = 2000;
 80014a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80014ac:	827b      	strh	r3, [r7, #18]
    do {
        n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
 80014ae:	2004      	movs	r0, #4
 80014b0:	f7ff febc 	bl	800122c <RC522_ReadRegister>
 80014b4:	4603      	mov	r3, r0
 80014b6:	753b      	strb	r3, [r7, #20]
        i--;
 80014b8:	8a7b      	ldrh	r3, [r7, #18]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80014be:	8a7b      	ldrh	r3, [r7, #18]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00a      	beq.n	80014da <RC522_ToCard+0xd6>
 80014c4:	7d3b      	ldrb	r3, [r7, #20]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <RC522_ToCard+0xd6>
 80014ce:	7d3a      	ldrb	r2, [r7, #20]
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	4013      	ands	r3, r2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0e9      	beq.n	80014ae <RC522_ToCard+0xaa>
    
    RC522_ClearBitMask(RC522_REG_BIT_FRAMING, 0x80);
 80014da:	2180      	movs	r1, #128	@ 0x80
 80014dc:	200d      	movs	r0, #13
 80014de:	f7ff fef2 	bl	80012c6 <RC522_ClearBitMask>
    
    if (i != 0) {
 80014e2:	8a7b      	ldrh	r3, [r7, #18]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d057      	beq.n	8001598 <RC522_ToCard+0x194>
        if (!(RC522_ReadRegister(RC522_REG_ERROR) & 0x1B)) {
 80014e8:	2006      	movs	r0, #6
 80014ea:	f7ff fe9f 	bl	800122c <RC522_ReadRegister>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f003 031b 	and.w	r3, r3, #27
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d14d      	bne.n	8001594 <RC522_ToCard+0x190>
            status = RC522_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	75fb      	strb	r3, [r7, #23]
            
            if (n & irqEn & 0x01) {
 80014fc:	7d3a      	ldrb	r2, [r7, #20]
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	4013      	ands	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <RC522_ToCard+0x10c>
                status = RC522_NOTAG;
 800150c:	2301      	movs	r3, #1
 800150e:	75fb      	strb	r3, [r7, #23]
            }
            
            if (command == RC522_CMD_TRANSCEIVE) {
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b0c      	cmp	r3, #12
 8001514:	d140      	bne.n	8001598 <RC522_ToCard+0x194>
                n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
 8001516:	200a      	movs	r0, #10
 8001518:	f7ff fe88 	bl	800122c <RC522_ReadRegister>
 800151c:	4603      	mov	r3, r0
 800151e:	753b      	strb	r3, [r7, #20]
                lastBits = RC522_ReadRegister(RC522_REG_CONTROL) & 0x07;
 8001520:	200c      	movs	r0, #12
 8001522:	f7ff fe83 	bl	800122c <RC522_ReadRegister>
 8001526:	4603      	mov	r3, r0
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	747b      	strb	r3, [r7, #17]
                if (lastBits) {
 800152e:	7c7b      	ldrb	r3, [r7, #17]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <RC522_ToCard+0x148>
                    *backLen = (n - 1) * 8 + lastBits;
 8001534:	7d3b      	ldrb	r3, [r7, #20]
 8001536:	3b01      	subs	r3, #1
 8001538:	b29b      	uxth	r3, r3
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	b29a      	uxth	r2, r3
 800153e:	7c7b      	ldrb	r3, [r7, #17]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b29a      	uxth	r2, r3
 8001546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001548:	801a      	strh	r2, [r3, #0]
 800154a:	e005      	b.n	8001558 <RC522_ToCard+0x154>
                } else {
                    *backLen = n * 8;
 800154c:	7d3b      	ldrb	r3, [r7, #20]
 800154e:	b29b      	uxth	r3, r3
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	b29a      	uxth	r2, r3
 8001554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001556:	801a      	strh	r2, [r3, #0]
                }
                
                if (n == 0) {
 8001558:	7d3b      	ldrb	r3, [r7, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <RC522_ToCard+0x15e>
                    n = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	753b      	strb	r3, [r7, #20]
                }
                if (n > 16) {
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	2b10      	cmp	r3, #16
 8001566:	d901      	bls.n	800156c <RC522_ToCard+0x168>
                    n = 16;
 8001568:	2310      	movs	r3, #16
 800156a:	753b      	strb	r3, [r7, #20]
                }
                
                // Read received data from FIFO
                for (i = 0; i < n; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	827b      	strh	r3, [r7, #18]
 8001570:	e00a      	b.n	8001588 <RC522_ToCard+0x184>
                    backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
 8001572:	8a7b      	ldrh	r3, [r7, #18]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	18d4      	adds	r4, r2, r3
 8001578:	2009      	movs	r0, #9
 800157a:	f7ff fe57 	bl	800122c <RC522_ReadRegister>
 800157e:	4603      	mov	r3, r0
 8001580:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
 8001582:	8a7b      	ldrh	r3, [r7, #18]
 8001584:	3301      	adds	r3, #1
 8001586:	827b      	strh	r3, [r7, #18]
 8001588:	7d3b      	ldrb	r3, [r7, #20]
 800158a:	b29b      	uxth	r3, r3
 800158c:	8a7a      	ldrh	r2, [r7, #18]
 800158e:	429a      	cmp	r2, r3
 8001590:	d3ef      	bcc.n	8001572 <RC522_ToCard+0x16e>
 8001592:	e001      	b.n	8001598 <RC522_ToCard+0x194>
                }
            }
        } else {
            status = RC522_ERROR;
 8001594:	2302      	movs	r3, #2
 8001596:	75fb      	strb	r3, [r7, #23]
        }
    }
    
    return status;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <RC522_Request>:

/**
 * @brief Request card
 */
RC522_Status RC522_Request(uint8_t reqMode, uint8_t *TagType) {
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af02      	add	r7, sp, #8
 80015a8:	4603      	mov	r3, r0
 80015aa:	6039      	str	r1, [r7, #0]
 80015ac:	71fb      	strb	r3, [r7, #7]
    RC522_Status status;
    uint16_t backBits;
    
    RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07);
 80015ae:	2107      	movs	r1, #7
 80015b0:	200d      	movs	r0, #13
 80015b2:	f7ff fe0f 	bl	80011d4 <RC522_WriteRegister>
    
    TagType[0] = reqMode;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	701a      	strb	r2, [r3, #0]
    status = RC522_ToCard(RC522_CMD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	200c      	movs	r0, #12
 80015ca:	f7ff ff1b 	bl	8001404 <RC522_ToCard>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
    
    if ((status != RC522_OK) || (backBits != 0x10)) {
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <RC522_Request+0x3c>
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d001      	beq.n	80015e2 <RC522_Request+0x40>
        status = RC522_ERROR;
 80015de:	2302      	movs	r3, #2
 80015e0:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <RC522_Anticoll>:

/**
 * @brief Anticollision
 */
RC522_Status RC522_Anticoll(uint8_t *serNum) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
    RC522_Status status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;
    
    RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x00);
 80015f8:	2100      	movs	r1, #0
 80015fa:	200d      	movs	r0, #13
 80015fc:	f7ff fdea 	bl	80011d4 <RC522_WriteRegister>
    
    serNum[0] = PICC_CMD_SEL_CL1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2293      	movs	r2, #147	@ 0x93
 8001604:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	2220      	movs	r2, #32
 800160c:	701a      	strb	r2, [r3, #0]
    
    status = RC522_ToCard(RC522_CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800160e:	f107 030a 	add.w	r3, r7, #10
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	200c      	movs	r0, #12
 800161c:	f7ff fef2 	bl	8001404 <RC522_ToCard>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
    
    if (status == RC522_OK) {
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <RC522_Anticoll+0x70>
        // Check serial number
        for (i = 0; i < 4; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	73bb      	strb	r3, [r7, #14]
 800162e:	e009      	b.n	8001644 <RC522_Anticoll+0x58>
            serNumCheck ^= serNum[i];
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	7b7b      	ldrb	r3, [r7, #13]
 800163a:	4053      	eors	r3, r2
 800163c:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
 800163e:	7bbb      	ldrb	r3, [r7, #14]
 8001640:	3301      	adds	r3, #1
 8001642:	73bb      	strb	r3, [r7, #14]
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d9f2      	bls.n	8001630 <RC522_Anticoll+0x44>
        }
        if (serNumCheck != serNum[i]) {
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	7b7a      	ldrb	r2, [r7, #13]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <RC522_Anticoll+0x70>
            status = RC522_ERROR;
 8001658:	2302      	movs	r3, #2
 800165a:	73fb      	strb	r3, [r7, #15]
        }
    }
    
    return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <RC522_ReadUID>:
}

/**
 * @brief Read UID from card
 */
RC522_Status RC522_ReadUID(uint8_t *uid) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
    RC522_Status status;
    uint8_t TagType[2];
    
    status = RC522_Request(PICC_CMD_REQA, TagType);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	2026      	movs	r0, #38	@ 0x26
 8001676:	f7ff ff94 	bl	80015a2 <RC522_Request>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
    if (status == RC522_OK) {
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d104      	bne.n	800168e <RC522_ReadUID+0x28>
        status = RC522_Anticoll(uid);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffb1 	bl	80015ec <RC522_Anticoll>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <IsCardRegistered>:
static uint8_t registered_count = 0;
static uint8_t rx_buffer[RX_BUFFER_SIZE];
static uint8_t rx_index = 0;
uint8_t rx_byte; // For interrupt receive, now exported

static uint8_t IsCardRegistered(uint8_t* uid) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < registered_count; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e010      	b.n	80016c8 <IsCardRegistered+0x30>
        if (memcmp(registered_cards[i], uid, 4) == 0) {
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4a0c      	ldr	r2, [pc, #48]	@ (80016dc <IsCardRegistered+0x44>)
 80016ac:	4413      	add	r3, r2
 80016ae:	2204      	movs	r2, #4
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fc00 	bl	8004eb8 <memcmp>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <IsCardRegistered+0x2a>
            return 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	e008      	b.n	80016d4 <IsCardRegistered+0x3c>
    for (uint8_t i = 0; i < registered_count; i++) {
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	3301      	adds	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <IsCardRegistered+0x48>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3e9      	bcc.n	80016a6 <IsCardRegistered+0xe>
        }
    }
    return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000180 	.word	0x20000180
 80016e0:	200001d0 	.word	0x200001d0

080016e4 <RegisterCard>:

static uint8_t RegisterCard(uint8_t* uid) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    if (registered_count >= MAX_REGISTERED_CARDS) return 0;
 80016ec:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <RegisterCard+0x4c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b13      	cmp	r3, #19
 80016f2:	d901      	bls.n	80016f8 <RegisterCard+0x14>
 80016f4:	2300      	movs	r3, #0
 80016f6:	e016      	b.n	8001726 <RegisterCard+0x42>
    if (IsCardRegistered(uid)) return 1;
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffcd 	bl	8001698 <IsCardRegistered>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <RegisterCard+0x24>
 8001704:	2301      	movs	r3, #1
 8001706:	e00e      	b.n	8001726 <RegisterCard+0x42>
    
    memcpy(registered_cards[registered_count], uid, 4);
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <RegisterCard+0x4c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <RegisterCard+0x50>)
 8001710:	4413      	add	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	601a      	str	r2, [r3, #0]
    registered_count++;
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <RegisterCard+0x4c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <RegisterCard+0x4c>)
 8001722:	701a      	strb	r2, [r3, #0]
    return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001d0 	.word	0x200001d0
 8001734:	20000180 	.word	0x20000180

08001738 <SimpleProtocol_SendRegisteredCard>:

void SimpleProtocol_SendRegisteredCard(uint8_t* uid, float weight) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]
    uint8_t buffer[11];
    buffer[0] = PROTOCOL_START_BYTE;
 8001744:	23aa      	movs	r3, #170	@ 0xaa
 8001746:	733b      	strb	r3, [r7, #12]
    buffer[1] = MSG_TYPE_CARD_REGISTERED;
 8001748:	2301      	movs	r3, #1
 800174a:	737b      	strb	r3, [r7, #13]
    memcpy(&buffer[2], uid, 4);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8c7 300e 	str.w	r3, [r7, #14]
    memcpy(&buffer[6], &weight, 4);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	f8c7 3012 	str.w	r3, [r7, #18]
    buffer[10] = PROTOCOL_END_BYTE;
 800175a:	2355      	movs	r3, #85	@ 0x55
 800175c:	75bb      	strb	r3, [r7, #22]
    
    HAL_UART_Transmit(&huart1, buffer, 11, 1000);
 800175e:	f107 010c 	add.w	r1, r7, #12
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	220b      	movs	r2, #11
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <SimpleProtocol_SendRegisteredCard+0x40>)
 800176a:	f002 faaf 	bl	8003ccc <HAL_UART_Transmit>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000120 	.word	0x20000120

0800177c <SimpleProtocol_SendUnregisteredCard>:

void SimpleProtocol_SendUnregisteredCard(uint8_t* uid) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];
    buffer[0] = PROTOCOL_START_BYTE;
 8001784:	23aa      	movs	r3, #170	@ 0xaa
 8001786:	723b      	strb	r3, [r7, #8]
    buffer[1] = MSG_TYPE_CARD_UNREGISTERED;
 8001788:	2302      	movs	r3, #2
 800178a:	727b      	strb	r3, [r7, #9]
    memcpy(&buffer[2], uid, 4);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8c7 300a 	str.w	r3, [r7, #10]
    buffer[6] = PROTOCOL_END_BYTE;
 8001794:	2355      	movs	r3, #85	@ 0x55
 8001796:	73bb      	strb	r3, [r7, #14]
    
    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
 8001798:	f107 0108 	add.w	r1, r7, #8
 800179c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a0:	2207      	movs	r2, #7
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <SimpleProtocol_SendUnregisteredCard+0x34>)
 80017a4:	f002 fa92 	bl	8003ccc <HAL_UART_Transmit>
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000120 	.word	0x20000120

080017b4 <SimpleProtocol_SendACK>:

void SimpleProtocol_SendACK(uint8_t msgType) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[5];
    buffer[0] = PROTOCOL_START_BYTE;
 80017be:	23aa      	movs	r3, #170	@ 0xaa
 80017c0:	723b      	strb	r3, [r7, #8]
    buffer[1] = MSG_TYPE_ACK;
 80017c2:	2305      	movs	r3, #5
 80017c4:	727b      	strb	r3, [r7, #9]
    buffer[2] = msgType; // Type of message being ACKed
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	72bb      	strb	r3, [r7, #10]
    buffer[3] = PROTOCOL_END_BYTE;
 80017ca:	2355      	movs	r3, #85	@ 0x55
 80017cc:	72fb      	strb	r3, [r7, #11]
    
    HAL_UART_Transmit(&huart1, buffer, 4, 1000);
 80017ce:	f107 0108 	add.w	r1, r7, #8
 80017d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d6:	2204      	movs	r2, #4
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <SimpleProtocol_SendACK+0x34>)
 80017da:	f002 fa77 	bl	8003ccc <HAL_UART_Transmit>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000120 	.word	0x20000120

080017ec <SimpleProtocol_ProcessCardDetection>:

void SimpleProtocol_ProcessCardDetection(uint8_t* uid, float weight) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	ed87 0a00 	vstr	s0, [r7]
    if (IsCardRegistered(uid)) {
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff4d 	bl	8001698 <IsCardRegistered>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <SimpleProtocol_ProcessCardDetection+0x24>
        SimpleProtocol_SendRegisteredCard(uid, weight);
 8001804:	ed97 0a00 	vldr	s0, [r7]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff95 	bl	8001738 <SimpleProtocol_SendRegisteredCard>
    } else {
        SimpleProtocol_SendUnregisteredCard(uid);
    }
}
 800180e:	e002      	b.n	8001816 <SimpleProtocol_ProcessCardDetection+0x2a>
        SimpleProtocol_SendUnregisteredCard(uid);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffb3 	bl	800177c <SimpleProtocol_SendUnregisteredCard>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <SimpleProtocol_StartRxInterrupt>:
void SimpleProtocol_PushReceivedByte(uint8_t byte) {
    rx_byte = byte;
    SimpleProtocol_UART_RxCpltCallback();
}

void SimpleProtocol_StartRxInterrupt(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    // Reset UART state and buffer
    HAL_UART_AbortReceive(&huart1);
 8001824:	4808      	ldr	r0, [pc, #32]	@ (8001848 <SimpleProtocol_StartRxInterrupt+0x28>)
 8001826:	f002 fb01 	bl	8003e2c <HAL_UART_AbortReceive>
    rx_index = 0;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <SimpleProtocol_StartRxInterrupt+0x2c>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001830:	2220      	movs	r2, #32
 8001832:	2100      	movs	r1, #0
 8001834:	4806      	ldr	r0, [pc, #24]	@ (8001850 <SimpleProtocol_StartRxInterrupt+0x30>)
 8001836:	f003 fb4f 	bl	8004ed8 <memset>
    
    // Start receiving first byte
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800183a:	2201      	movs	r2, #1
 800183c:	4905      	ldr	r1, [pc, #20]	@ (8001854 <SimpleProtocol_StartRxInterrupt+0x34>)
 800183e:	4802      	ldr	r0, [pc, #8]	@ (8001848 <SimpleProtocol_StartRxInterrupt+0x28>)
 8001840:	f002 facf 	bl	8003de2 <HAL_UART_Receive_IT>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000120 	.word	0x20000120
 800184c:	200001f4 	.word	0x200001f4
 8001850:	200001d4 	.word	0x200001d4
 8001854:	200001f5 	.word	0x200001f5

08001858 <SimpleProtocol_UART_RxCpltCallback>:

void SimpleProtocol_UART_RxCpltCallback(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
    // Process received byte
    if (rx_index == 0 && rx_byte != PROTOCOL_START_BYTE) {
 800185e:	4b4f      	ldr	r3, [pc, #316]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <SimpleProtocol_UART_RxCpltCallback+0x22>
 8001866:	4b4e      	ldr	r3, [pc, #312]	@ (80019a0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2baa      	cmp	r3, #170	@ 0xaa
 800186c:	d005      	beq.n	800187a <SimpleProtocol_UART_RxCpltCallback+0x22>
        // Invalid start byte, wait for next byte
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	494b      	ldr	r1, [pc, #300]	@ (80019a0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 8001872:	484c      	ldr	r0, [pc, #304]	@ (80019a4 <SimpleProtocol_UART_RxCpltCallback+0x14c>)
 8001874:	f002 fab5 	bl	8003de2 <HAL_UART_Receive_IT>
        return;
 8001878:	e08d      	b.n	8001996 <SimpleProtocol_UART_RxCpltCallback+0x13e>
    }

    // Add byte to buffer
    rx_buffer[rx_index++] = rx_byte;
 800187a:	4b48      	ldr	r3, [pc, #288]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	b2d1      	uxtb	r1, r2
 8001882:	4a46      	ldr	r2, [pc, #280]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001884:	7011      	strb	r1, [r2, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b45      	ldr	r3, [pc, #276]	@ (80019a0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 800188a:	7819      	ldrb	r1, [r3, #0]
 800188c:	4b46      	ldr	r3, [pc, #280]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 800188e:	5499      	strb	r1, [r3, r2]

    // Start receiving next byte
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	4943      	ldr	r1, [pc, #268]	@ (80019a0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 8001894:	4843      	ldr	r0, [pc, #268]	@ (80019a4 <SimpleProtocol_UART_RxCpltCallback+0x14c>)
 8001896:	f002 faa4 	bl	8003de2 <HAL_UART_Receive_IT>

    // Check for complete message
    if (rx_index >= 2) {
 800189a:	4b40      	ldr	r3, [pc, #256]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d96d      	bls.n	800197e <SimpleProtocol_UART_RxCpltCallback+0x126>
        uint8_t msg_type = rx_buffer[1];
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	737b      	strb	r3, [r7, #13]
        uint8_t expected_length = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

        switch (msg_type) {
 80018ac:	7b7b      	ldrb	r3, [r7, #13]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d002      	beq.n	80018b8 <SimpleProtocol_UART_RxCpltCallback+0x60>
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d003      	beq.n	80018be <SimpleProtocol_UART_RxCpltCallback+0x66>
 80018b6:	e00d      	b.n	80018d4 <SimpleProtocol_UART_RxCpltCallback+0x7c>
            case MSG_TYPE_REGISTER_CARD:
                expected_length = 7; // AA 03 UID[4] 55
 80018b8:	2307      	movs	r3, #7
 80018ba:	73fb      	strb	r3, [r7, #15]
                break;
 80018bc:	e00f      	b.n	80018de <SimpleProtocol_UART_RxCpltCallback+0x86>
            case MSG_TYPE_VALID_CARDS:
                if (rx_index >= 3) {
 80018be:	4b37      	ldr	r3, [pc, #220]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d90a      	bls.n	80018dc <SimpleProtocol_UART_RxCpltCallback+0x84>
                    uint8_t data_length = rx_buffer[2];
 80018c6:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	733b      	strb	r3, [r7, #12]
                    expected_length = 6 + data_length; // AA 04 LENGTH DATA[data_length] CHECKSUM 55
 80018cc:	7b3b      	ldrb	r3, [r7, #12]
 80018ce:	3306      	adds	r3, #6
 80018d0:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80018d2:	e003      	b.n	80018dc <SimpleProtocol_UART_RxCpltCallback+0x84>
            default:
                // Unknown message type, reset
                rx_index = 0;
 80018d4:	4b31      	ldr	r3, [pc, #196]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
                return;
 80018da:	e05c      	b.n	8001996 <SimpleProtocol_UART_RxCpltCallback+0x13e>
                break;
 80018dc:	bf00      	nop
        }

        // Process complete message
        if (expected_length > 0 && rx_index >= expected_length) {
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d04c      	beq.n	800197e <SimpleProtocol_UART_RxCpltCallback+0x126>
 80018e4:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d847      	bhi.n	800197e <SimpleProtocol_UART_RxCpltCallback+0x126>
            if (rx_buffer[expected_length - 1] == PROTOCOL_END_BYTE) {
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	4a2d      	ldr	r2, [pc, #180]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	2b55      	cmp	r3, #85	@ 0x55
 80018f8:	d13e      	bne.n	8001978 <SimpleProtocol_UART_RxCpltCallback+0x120>
                // Process valid message
                if (msg_type == MSG_TYPE_REGISTER_CARD) {
 80018fa:	7b7b      	ldrb	r3, [r7, #13]
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d10b      	bne.n	8001918 <SimpleProtocol_UART_RxCpltCallback+0xc0>
                    uint8_t* uid = &rx_buffer[2];
 8001900:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <SimpleProtocol_UART_RxCpltCallback+0x154>)
 8001902:	603b      	str	r3, [r7, #0]
                    if (RegisterCard(uid)) {
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f7ff feed 	bl	80016e4 <RegisterCard>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d033      	beq.n	8001978 <SimpleProtocol_UART_RxCpltCallback+0x120>
                        SimpleProtocol_SendACK(MSG_TYPE_REGISTER_CARD);
 8001910:	2003      	movs	r0, #3
 8001912:	f7ff ff4f 	bl	80017b4 <SimpleProtocol_SendACK>
 8001916:	e02f      	b.n	8001978 <SimpleProtocol_UART_RxCpltCallback+0x120>
                    }
                } else if (msg_type == MSG_TYPE_VALID_CARDS) {
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	2b04      	cmp	r3, #4
 800191c:	d12c      	bne.n	8001978 <SimpleProtocol_UART_RxCpltCallback+0x120>
                    uint8_t data_length = rx_buffer[2];
 800191e:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	72fb      	strb	r3, [r7, #11]
                    uint8_t num_cards = data_length / 4;
 8001924:	7afb      	ldrb	r3, [r7, #11]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	72bb      	strb	r3, [r7, #10]
                    
                    registered_count = 0;
 800192a:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
                    for (uint8_t i = 0; i < num_cards && i < MAX_REGISTERED_CARDS; i++) {
 8001930:	2300      	movs	r3, #0
 8001932:	73bb      	strb	r3, [r7, #14]
 8001934:	e016      	b.n	8001964 <SimpleProtocol_UART_RxCpltCallback+0x10c>
                        uint8_t* uid = &rx_buffer[3 + (i * 4)];
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	3303      	adds	r3, #3
 800193c:	4a1a      	ldr	r2, [pc, #104]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 800193e:	4413      	add	r3, r2
 8001940:	607b      	str	r3, [r7, #4]
                        memcpy(registered_cards[registered_count], uid, 4);
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4a1a      	ldr	r2, [pc, #104]	@ (80019b4 <SimpleProtocol_UART_RxCpltCallback+0x15c>)
 800194a:	4413      	add	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	601a      	str	r2, [r3, #0]
                        registered_count++;
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 800195c:	701a      	strb	r2, [r3, #0]
                    for (uint8_t i = 0; i < num_cards && i < MAX_REGISTERED_CARDS; i++) {
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	3301      	adds	r3, #1
 8001962:	73bb      	strb	r3, [r7, #14]
 8001964:	7bba      	ldrb	r2, [r7, #14]
 8001966:	7abb      	ldrb	r3, [r7, #10]
 8001968:	429a      	cmp	r2, r3
 800196a:	d202      	bcs.n	8001972 <SimpleProtocol_UART_RxCpltCallback+0x11a>
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	2b13      	cmp	r3, #19
 8001970:	d9e1      	bls.n	8001936 <SimpleProtocol_UART_RxCpltCallback+0xde>
                    }
                    SimpleProtocol_SendACK(MSG_TYPE_VALID_CARDS);
 8001972:	2004      	movs	r0, #4
 8001974:	f7ff ff1e 	bl	80017b4 <SimpleProtocol_SendACK>
                }
            }
            // Reset buffer after processing
            rx_index = 0;
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Prevent buffer overflow
    if (rx_index >= RX_BUFFER_SIZE) {
 800197e:	4b07      	ldr	r3, [pc, #28]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b1f      	cmp	r3, #31
 8001984:	d907      	bls.n	8001996 <SimpleProtocol_UART_RxCpltCallback+0x13e>
        rx_index = 0;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 800198c:	2220      	movs	r2, #32
 800198e:	2100      	movs	r1, #0
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 8001992:	f003 faa1 	bl	8004ed8 <memset>
    }
}
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001f4 	.word	0x200001f4
 80019a0:	200001f5 	.word	0x200001f5
 80019a4:	20000120 	.word	0x20000120
 80019a8:	200001d4 	.word	0x200001d4
 80019ac:	200001d6 	.word	0x200001d6
 80019b0:	200001d0 	.word	0x200001d0
 80019b4:	20000180 	.word	0x20000180

080019b8 <SimpleProtocol_Init>:

void SimpleProtocol_Init(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
    // Add some default registered cards for testing
    uint8_t default_card1[4] = {0x12, 0x34, 0x56, 0x78};
 80019be:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <SimpleProtocol_Init+0x44>)
 80019c0:	60fb      	str	r3, [r7, #12]
    uint8_t default_card2[4] = {0xAB, 0xCD, 0xEF, 0x01};
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <SimpleProtocol_Init+0x48>)
 80019c4:	60bb      	str	r3, [r7, #8]
    
    RegisterCard(default_card1);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe8a 	bl	80016e4 <RegisterCard>
    RegisterCard(default_card2);
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe85 	bl	80016e4 <RegisterCard>
    
    // Initialize UART receive interrupt
    HAL_Delay(2000); // Wait for ESP32 to initialize
 80019da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019de:	f000 fa0b 	bl	8001df8 <HAL_Delay>
    SimpleProtocol_StartRxInterrupt();
 80019e2:	f7ff ff1d 	bl	8001820 <SimpleProtocol_StartRxInterrupt>
    
    // Send a test unregistered card message
    uint8_t test_uid[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	607b      	str	r3, [r7, #4]
    SimpleProtocol_SendUnregisteredCard(test_uid);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fec4 	bl	800177c <SimpleProtocol_SendUnregisteredCard>
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	78563412 	.word	0x78563412
 8001a00:	01efcdab 	.word	0x01efcdab

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_SPI_MspInit+0x94>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d133      	bne.n	8001ade <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <HAL_SPI_MspInit+0x98>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001aec <HAL_SPI_MspInit+0x98>)
 8001a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_SPI_MspInit+0x98>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_SPI_MspInit+0x98>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a14      	ldr	r2, [pc, #80]	@ (8001aec <HAL_SPI_MspInit+0x98>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_SPI_MspInit+0x98>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aae:	23e0      	movs	r3, #224	@ 0xe0
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <HAL_SPI_MspInit+0x9c>)
 8001aca:	f000 fb69 	bl	80021a0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2023      	movs	r0, #35	@ 0x23
 8001ad4:	f000 fa8f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ad8:	2023      	movs	r0, #35	@ 0x23
 8001ada:	f000 faa8 	bl	800202e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	@ 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40013000 	.word	0x40013000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	@ (8001b88 <HAL_UART_MspInit+0x94>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d134      	bne.n	8001b80 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <HAL_UART_MspInit+0x98>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <HAL_UART_MspInit+0x98>)
 8001b20:	f043 0310 	orr.w	r3, r3, #16
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_UART_MspInit+0x98>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_UART_MspInit+0x98>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a14      	ldr	r2, [pc, #80]	@ (8001b8c <HAL_UART_MspInit+0x98>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_UART_MspInit+0x98>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b60:	2307      	movs	r3, #7
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4809      	ldr	r0, [pc, #36]	@ (8001b90 <HAL_UART_MspInit+0x9c>)
 8001b6c:	f000 fb18 	bl	80021a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2025      	movs	r0, #37	@ 0x25
 8001b76:	f000 fa3e 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	2025      	movs	r0, #37	@ 0x25
 8001b7c:	f000 fa57 	bl	800202e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	@ 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f000 f8e5 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <TIM2_IRQHandler+0x10>)
 8001bfa:	f001 fee1 	bl	80039c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200000d8 	.word	0x200000d8

08001c08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <SPI1_IRQHandler+0x10>)
 8001c0e:	f001 fcdd 	bl	80035cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000080 	.word	0x20000080

08001c1c <USART1_IRQHandler>:

/**
  * @brief USART1 global interrupt handler
  */
void USART1_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <USART1_IRQHandler+0x10>)
 8001c22:	f002 f9a7 	bl	8003f74 <HAL_UART_IRQHandler>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000120 	.word	0x20000120

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f003 f942 	bl	8004ee8 <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	@ (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20030000 	.word	0x20030000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	200001f8 	.word	0x200001f8
 8001c98:	20000348 	.word	0x20000348

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <SystemInit+0x20>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca6:	4a05      	ldr	r2, [pc, #20]	@ (8001cbc <SystemInit+0x20>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cc4:	f7ff ffea 	bl	8001c9c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc8:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cca:	490d      	ldr	r1, [pc, #52]	@ (8001d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8001d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f003 f901 	bl	8004ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff f8e7 	bl	8000ec4 <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cf8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d04:	08005d9c 	.word	0x08005d9c
  ldr r2, =_sbss
 8001d08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d0c:	20000348 	.word	0x20000348

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>
	...

08001d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d54 <HAL_Init+0x40>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_Init+0x40>)
 8001d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	@ (8001d54 <HAL_Init+0x40>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f94f 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	200f      	movs	r0, #15
 8001d44:	f000 f808 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff fe5c 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f967 	bl	800204a <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f000 f92f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	@ (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000004 	.word	0x20000004
 8001db0:	2000000c 	.word	0x2000000c
 8001db4:	20000008 	.word	0x20000008

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	200001fc 	.word	0x200001fc

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	200001fc 	.word	0x200001fc

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	@ (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	@ (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	@ (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff3e 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff8e 	bl	8001f34 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5d 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff31 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002070:	f7ff feb6 	bl	8001de0 <HAL_GetTick>
 8002074:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d008      	beq.n	8002094 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2280      	movs	r2, #128	@ 0x80
 8002086:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e052      	b.n	800213a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0216 	bic.w	r2, r2, #22
 80020a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <HAL_DMA_Abort+0x62>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e4:	e013      	b.n	800210e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e6:	f7ff fe7b 	bl	8001de0 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d90c      	bls.n	800210e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2203      	movs	r2, #3
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e015      	b.n	800213a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e4      	bne.n	80020e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	223f      	movs	r2, #63	@ 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d004      	beq.n	8002160 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e00c      	b.n	800217a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2205      	movs	r2, #5
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e177      	b.n	80024ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8166 	bne.w	80024a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80c0 	beq.w	80024a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b66      	ldr	r3, [pc, #408]	@ (80024c4 <HAL_GPIO_Init+0x324>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a65      	ldr	r2, [pc, #404]	@ (80024c4 <HAL_GPIO_Init+0x324>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b63      	ldr	r3, [pc, #396]	@ (80024c4 <HAL_GPIO_Init+0x324>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a61      	ldr	r2, [pc, #388]	@ (80024c8 <HAL_GPIO_Init+0x328>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a58      	ldr	r2, [pc, #352]	@ (80024cc <HAL_GPIO_Init+0x32c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d037      	beq.n	80023de <HAL_GPIO_Init+0x23e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a57      	ldr	r2, [pc, #348]	@ (80024d0 <HAL_GPIO_Init+0x330>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d031      	beq.n	80023da <HAL_GPIO_Init+0x23a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a56      	ldr	r2, [pc, #344]	@ (80024d4 <HAL_GPIO_Init+0x334>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02b      	beq.n	80023d6 <HAL_GPIO_Init+0x236>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a55      	ldr	r2, [pc, #340]	@ (80024d8 <HAL_GPIO_Init+0x338>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d025      	beq.n	80023d2 <HAL_GPIO_Init+0x232>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a54      	ldr	r2, [pc, #336]	@ (80024dc <HAL_GPIO_Init+0x33c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <HAL_GPIO_Init+0x22e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a53      	ldr	r2, [pc, #332]	@ (80024e0 <HAL_GPIO_Init+0x340>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <HAL_GPIO_Init+0x22a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_GPIO_Init+0x344>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a51      	ldr	r2, [pc, #324]	@ (80024e8 <HAL_GPIO_Init+0x348>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_GPIO_Init+0x34c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	@ (80024f0 <HAL_GPIO_Init+0x350>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x21a>
 80023b6:	2309      	movs	r3, #9
 80023b8:	e012      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023ba:	230a      	movs	r3, #10
 80023bc:	e010      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023be:	2308      	movs	r3, #8
 80023c0:	e00e      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e00c      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023c6:	2306      	movs	r3, #6
 80023c8:	e00a      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023ce:	2304      	movs	r3, #4
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x240>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	@ (80024c8 <HAL_GPIO_Init+0x328>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a34      	ldr	r2, [pc, #208]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a29      	ldr	r2, [pc, #164]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002476:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a0:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <HAL_GPIO_Init+0x354>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f ae84 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	@ 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021800 	.word	0x40021800
 80024e8:	40021c00 	.word	0x40021c00
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40022400 	.word	0x40022400
 80024f4:	40013c00 	.word	0x40013c00

080024f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e001      	b.n	800251a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800256c:	887a      	ldrh	r2, [r7, #2]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4013      	ands	r3, r2
 8002572:	041a      	lsls	r2, r3, #16
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43d9      	mvns	r1, r3
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	400b      	ands	r3, r1
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	619a      	str	r2, [r3, #24]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <HAL_PWREx_EnableOverDrive+0x90>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <HAL_PWREx_EnableOverDrive+0x90>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_PWREx_EnableOverDrive+0x90>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <HAL_PWREx_EnableOverDrive+0x94>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025bc:	f7ff fc10 	bl	8001de0 <HAL_GetTick>
 80025c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025c2:	e009      	b.n	80025d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025c4:	f7ff fc0c 	bl	8001de0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025d2:	d901      	bls.n	80025d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e01f      	b.n	8002618 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <HAL_PWREx_EnableOverDrive+0x98>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e4:	d1ee      	bne.n	80025c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ec:	f7ff fbf8 	bl	8001de0 <HAL_GetTick>
 80025f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025f2:	e009      	b.n	8002608 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025f4:	f7ff fbf4 	bl	8001de0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002602:	d901      	bls.n	8002608 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e007      	b.n	8002618 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <HAL_PWREx_EnableOverDrive+0x98>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002614:	d1ee      	bne.n	80025f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	420e0040 	.word	0x420e0040
 8002628:	40007000 	.word	0x40007000
 800262c:	420e0044 	.word	0x420e0044

08002630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e267      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d075      	beq.n	800273a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800264e:	4b88      	ldr	r3, [pc, #544]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b04      	cmp	r3, #4
 8002658:	d00c      	beq.n	8002674 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b85      	ldr	r3, [pc, #532]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002662:	2b08      	cmp	r3, #8
 8002664:	d112      	bne.n	800268c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b82      	ldr	r3, [pc, #520]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002672:	d10b      	bne.n	800268c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4b7e      	ldr	r3, [pc, #504]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05b      	beq.n	8002738 <HAL_RCC_OscConfig+0x108>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d157      	bne.n	8002738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e242      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x74>
 8002696:	4b76      	ldr	r3, [pc, #472]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a75      	ldr	r2, [pc, #468]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e01d      	b.n	80026e0 <HAL_RCC_OscConfig+0xb0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x98>
 80026ae:	4b70      	ldr	r3, [pc, #448]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6c      	ldr	r2, [pc, #432]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0xb0>
 80026c8:	4b69      	ldr	r3, [pc, #420]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a68      	ldr	r2, [pc, #416]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b66      	ldr	r3, [pc, #408]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a65      	ldr	r2, [pc, #404]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff fb7a 	bl	8001de0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff fb76 	bl	8001de0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e207      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b5b      	ldr	r3, [pc, #364]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0xc0>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fb66 	bl	8001de0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7ff fb62 	bl	8001de0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e1f3      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	4b51      	ldr	r3, [pc, #324]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0xe8>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002746:	4b4a      	ldr	r3, [pc, #296]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b47      	ldr	r3, [pc, #284]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800275a:	2b08      	cmp	r3, #8
 800275c:	d11c      	bne.n	8002798 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b44      	ldr	r3, [pc, #272]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_RCC_OscConfig+0x152>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1c7      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4937      	ldr	r1, [pc, #220]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e03a      	b.n	800280e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b34      	ldr	r3, [pc, #208]	@ (8002874 <HAL_RCC_OscConfig+0x244>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7ff fb1b 	bl	8001de0 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7ff fb17 	bl	8001de0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1a8      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b28      	ldr	r3, [pc, #160]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4925      	ldr	r1, [pc, #148]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e015      	b.n	800280e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e2:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x244>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff fafa 	bl	8001de0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f0:	f7ff faf6 	bl	8001de0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e187      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d036      	beq.n	8002888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002822:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <HAL_RCC_OscConfig+0x248>)
 8002824:	2201      	movs	r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff fada 	bl	8001de0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff fad6 	bl	8001de0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e167      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <HAL_RCC_OscConfig+0x240>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x200>
 800284e:	e01b      	b.n	8002888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_OscConfig+0x248>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7ff fac3 	bl	8001de0 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	e00e      	b.n	800287c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285e:	f7ff fabf 	bl	8001de0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d907      	bls.n	800287c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e150      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
 8002870:	40023800 	.word	0x40023800
 8002874:	42470000 	.word	0x42470000
 8002878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b88      	ldr	r3, [pc, #544]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ea      	bne.n	800285e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8097 	beq.w	80029c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b81      	ldr	r3, [pc, #516]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d118      	bne.n	8002904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d2:	4b74      	ldr	r3, [pc, #464]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a73      	ldr	r2, [pc, #460]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7ff fa7f 	bl	8001de0 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7ff fa7b 	bl	8001de0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e10c      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa4 <HAL_RCC_OscConfig+0x474>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x2ea>
 800290c:	4b64      	ldr	r3, [pc, #400]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002910:	4a63      	ldr	r2, [pc, #396]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	@ 0x70
 8002918:	e01c      	b.n	8002954 <HAL_RCC_OscConfig+0x324>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x30c>
 8002922:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6713      	str	r3, [r2, #112]	@ 0x70
 800292e:	4b5c      	ldr	r3, [pc, #368]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0x324>
 800293c:	4b58      	ldr	r3, [pc, #352]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a57      	ldr	r2, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	4b55      	ldr	r3, [pc, #340]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a54      	ldr	r2, [pc, #336]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7ff fa40 	bl	8001de0 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7ff fa3c 	bl	8001de0 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e0cb      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	4b49      	ldr	r3, [pc, #292]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0ee      	beq.n	8002964 <HAL_RCC_OscConfig+0x334>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002988:	f7ff fa2a 	bl	8001de0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7ff fa26 	bl	8001de0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0b5      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a6:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ee      	bne.n	8002990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b8:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	4a38      	ldr	r2, [pc, #224]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80a1 	beq.w	8002b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ce:	4b34      	ldr	r3, [pc, #208]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d05c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d141      	bne.n	8002a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b31      	ldr	r3, [pc, #196]	@ (8002aa8 <HAL_RCC_OscConfig+0x478>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff f9fa 	bl	8001de0 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7ff f9f6 	bl	8001de0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e087      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	019b      	lsls	r3, r3, #6
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	491b      	ldr	r1, [pc, #108]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <HAL_RCC_OscConfig+0x478>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7ff f9cf 	bl	8001de0 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff f9cb 	bl	8001de0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e05c      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x416>
 8002a64:	e054      	b.n	8002b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_RCC_OscConfig+0x478>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f9b8 	bl	8001de0 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff f9b4 	bl	8001de0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e045      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <HAL_RCC_OscConfig+0x470>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x444>
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e038      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x4ec>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d028      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d121      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d11a      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002adc:	4013      	ands	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d111      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	3b01      	subs	r3, #1
 8002af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0cc      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b34:	4b68      	ldr	r3, [pc, #416]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d90c      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b65      	ldr	r3, [pc, #404]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b63      	ldr	r3, [pc, #396]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0b8      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b74:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a58      	ldr	r2, [pc, #352]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b8c:	4b53      	ldr	r3, [pc, #332]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a52      	ldr	r2, [pc, #328]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	494d      	ldr	r1, [pc, #308]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d044      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b47      	ldr	r3, [pc, #284]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d119      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e07f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	4b3f      	ldr	r3, [pc, #252]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e067      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfe:	4b37      	ldr	r3, [pc, #220]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 0203 	bic.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4934      	ldr	r1, [pc, #208]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c10:	f7ff f8e6 	bl	8001de0 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7ff f8e2 	bl	8001de0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e04f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 020c 	and.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d1eb      	bne.n	8002c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c40:	4b25      	ldr	r3, [pc, #148]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d20c      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b22      	ldr	r3, [pc, #136]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e032      	b.n	8002cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c74:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4916      	ldr	r1, [pc, #88]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c92:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	490e      	ldr	r1, [pc, #56]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca6:	f000 f821 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	490a      	ldr	r1, [pc, #40]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	5ccb      	ldrb	r3, [r1, r3]
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cc2:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f846 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023c00 	.word	0x40023c00
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	08005d40 	.word	0x08005d40
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	20000008 	.word	0x20000008

08002cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf0:	b090      	sub	sp, #64	@ 0x40
 8002cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d04:	4b59      	ldr	r3, [pc, #356]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d00d      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x40>
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	f200 80a1 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x34>
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1e:	e09b      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d20:	4b53      	ldr	r3, [pc, #332]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d24:	e09b      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d26:	4b53      	ldr	r3, [pc, #332]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d2a:	e098      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d36:	4b4d      	ldr	r3, [pc, #308]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d028      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d42:	4b4a      	ldr	r3, [pc, #296]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	099b      	lsrs	r3, r3, #6
 8002d48:	2200      	movs	r2, #0
 8002d4a:	623b      	str	r3, [r7, #32]
 8002d4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d54:	2100      	movs	r1, #0
 8002d56:	4b47      	ldr	r3, [pc, #284]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d58:	fb03 f201 	mul.w	r2, r3, r1
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	fb00 f303 	mul.w	r3, r0, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	4a43      	ldr	r2, [pc, #268]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d66:	fba0 1202 	umull	r1, r2, r0, r2
 8002d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d72:	4413      	add	r3, r2
 8002d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	61fa      	str	r2, [r7, #28]
 8002d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d86:	f7fd fc3f 	bl	8000608 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4613      	mov	r3, r2
 8002d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d92:	e053      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d94:	4b35      	ldr	r3, [pc, #212]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	617a      	str	r2, [r7, #20]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002da6:	f04f 0b00 	mov.w	fp, #0
 8002daa:	4652      	mov	r2, sl
 8002dac:	465b      	mov	r3, fp
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	0159      	lsls	r1, r3, #5
 8002db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dbc:	0150      	lsls	r0, r2, #5
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	ebb2 080a 	subs.w	r8, r2, sl
 8002dc6:	eb63 090b 	sbc.w	r9, r3, fp
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dde:	ebb2 0408 	subs.w	r4, r2, r8
 8002de2:	eb63 0509 	sbc.w	r5, r3, r9
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	00eb      	lsls	r3, r5, #3
 8002df0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002df4:	00e2      	lsls	r2, r4, #3
 8002df6:	4614      	mov	r4, r2
 8002df8:	461d      	mov	r5, r3
 8002dfa:	eb14 030a 	adds.w	r3, r4, sl
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	eb45 030b 	adc.w	r3, r5, fp
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e12:	4629      	mov	r1, r5
 8002e14:	028b      	lsls	r3, r1, #10
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	028a      	lsls	r2, r1, #10
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	2200      	movs	r2, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	60fa      	str	r2, [r7, #12]
 8002e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e30:	f7fd fbea 	bl	8000608 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002e4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3740      	adds	r7, #64	@ 0x40
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	017d7840 	.word	0x017d7840

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	08005d50 	.word	0x08005d50

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	f7ff ffdc 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08005d50 	.word	0x08005d50

08002ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e07b      	b.n	8002fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d108      	bne.n	8002f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f02:	d009      	beq.n	8002f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
 8002f0a:	e005      	b.n	8002f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe fd8e 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9c:	ea42 0103 	orr.w	r1, r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	f003 0104 	and.w	r1, r3, #4
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	f003 0210 	and.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b088      	sub	sp, #32
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003002:	f7fe feed 	bl	8001de0 <HAL_GetTick>
 8003006:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
 800301a:	e12a      	b.n	8003272 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_SPI_Transmit+0x36>
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e122      	b.n	8003272 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_SPI_Transmit+0x48>
 8003036:	2302      	movs	r3, #2
 8003038:	e11b      	b.n	8003272 <HAL_SPI_Transmit+0x280>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003088:	d10f      	bne.n	80030aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003098:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b4:	2b40      	cmp	r3, #64	@ 0x40
 80030b6:	d007      	beq.n	80030c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d0:	d152      	bne.n	8003178 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_SPI_Transmit+0xee>
 80030da:	8b7b      	ldrh	r3, [r7, #26]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d145      	bne.n	800316c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003104:	e032      	b.n	800316c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d112      	bne.n	800313a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003138:	e018      	b.n	800316c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313a:	f7fe fe51 	bl	8001de0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d803      	bhi.n	8003152 <HAL_SPI_Transmit+0x160>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d102      	bne.n	8003158 <HAL_SPI_Transmit+0x166>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e082      	b.n	8003272 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1c7      	bne.n	8003106 <HAL_SPI_Transmit+0x114>
 8003176:	e053      	b.n	8003220 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_SPI_Transmit+0x194>
 8003180:	8b7b      	ldrh	r3, [r7, #26]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d147      	bne.n	8003216 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031ac:	e033      	b.n	8003216 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d113      	bne.n	80031e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031e2:	e018      	b.n	8003216 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e4:	f7fe fdfc 	bl	8001de0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d803      	bhi.n	80031fc <HAL_SPI_Transmit+0x20a>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d102      	bne.n	8003202 <HAL_SPI_Transmit+0x210>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e02d      	b.n	8003272 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1c6      	bne.n	80031ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	6839      	ldr	r1, [r7, #0]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fb77 	bl	8003918 <SPI_EndRxTxTransaction>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003270:	2300      	movs	r3, #0
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b08a      	sub	sp, #40	@ 0x28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800328c:	f7fe fda8 	bl	8001de0 <HAL_GetTick>
 8003290:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003298:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00c      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x4a>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032b0:	d106      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x46>
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d001      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
 80032c2:	e17f      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x5c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x5c>
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e174      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x6e>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e16d      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d003      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2205      	movs	r2, #5
 8003300:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	887a      	ldrh	r2, [r7, #2]
 800331a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003344:	2b40      	cmp	r3, #64	@ 0x40
 8003346:	d007      	beq.n	8003358 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003360:	d17e      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_TransmitReceive+0xf6>
 800336a:	8afb      	ldrh	r3, [r7, #22]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d16c      	bne.n	800344a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003394:	e059      	b.n	800344a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d11b      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x162>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x162>
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d113      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	1c9a      	adds	r2, r3, #2
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d119      	bne.n	800341e <HAL_SPI_TransmitReceive+0x1a4>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d014      	beq.n	800341e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	b292      	uxth	r2, r2
 8003400:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	1c9a      	adds	r2, r3, #2
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800341a:	2301      	movs	r3, #1
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800341e:	f7fe fcdf 	bl	8001de0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800342a:	429a      	cmp	r2, r3
 800342c:	d80d      	bhi.n	800344a <HAL_SPI_TransmitReceive+0x1d0>
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d009      	beq.n	800344a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0bc      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1a0      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x11c>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d19b      	bne.n	8003396 <HAL_SPI_TransmitReceive+0x11c>
 800345e:	e082      	b.n	8003566 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_SPI_TransmitReceive+0x1f4>
 8003468:	8afb      	ldrh	r3, [r7, #22]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d171      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003494:	e05d      	b.n	8003552 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d11c      	bne.n	80034de <HAL_SPI_TransmitReceive+0x264>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_SPI_TransmitReceive+0x264>
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d114      	bne.n	80034de <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d119      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x2a6>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800351c:	2301      	movs	r3, #1
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003520:	f7fe fc5e 	bl	8001de0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800352c:	429a      	cmp	r2, r3
 800352e:	d803      	bhi.n	8003538 <HAL_SPI_TransmitReceive+0x2be>
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d102      	bne.n	800353e <HAL_SPI_TransmitReceive+0x2c4>
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e038      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d19c      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x21c>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d197      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003566:	6a3a      	ldr	r2, [r7, #32]
 8003568:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f9d4 	bl	8003918 <SPI_EndRxTxTransaction>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e01d      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3728      	adds	r7, #40	@ 0x28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10f      	bne.n	8003610 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
    return;
 800360e:	e0d7      	b.n	80037c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_SPI_IRQHandler+0x66>
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	09db      	lsrs	r3, r3, #7
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
    return;
 8003630:	e0c6      	b.n	80037c0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10c      	bne.n	8003658 <HAL_SPI_IRQHandler+0x8c>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80b4 	beq.w	80037c0 <HAL_SPI_IRQHandler+0x1f4>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80ad 	beq.w	80037c0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b03      	cmp	r3, #3
 800367c:	d011      	beq.n	80036a2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	e00b      	b.n	80036ba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]
        return;
 80036b8:	e082      	b.n	80037c0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d014      	beq.n	80036f0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ca:	f043 0201 	orr.w	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003700:	f043 0208 	orr.w	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04f      	beq.n	80037be <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800372c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <HAL_SPI_IRQHandler+0x17e>
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d034      	beq.n	80037b4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0203 	bic.w	r2, r2, #3
 8003758:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <HAL_SPI_IRQHandler+0x1fc>)
 8003768:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fce7 	bl	8002142 <HAL_DMA_Abort_IT>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003792:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_SPI_IRQHandler+0x1fc>)
 8003794:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fcd1 	bl	8002142 <HAL_DMA_Abort_IT>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80037b2:	e003      	b.n	80037bc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f809 	bl	80037cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037ba:	e000      	b.n	80037be <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80037bc:	bf00      	nop
    return;
 80037be:	bf00      	nop
  }
}
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	080037e1 	.word	0x080037e1

080037cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff ffe6 	bl	80037cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fe fae2 	bl	8001de0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fe fada 	bl	8001de0 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	@ (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e055      	b.n	80038ec <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d051      	beq.n	80038ec <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fe faca 	bl	8001de0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e018      	b.n	800390c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	e002      	b.n	80038ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	429a      	cmp	r2, r3
 8003908:	d19a      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20000004 	.word	0x20000004

08003918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2201      	movs	r2, #1
 800392c:	2102      	movs	r1, #2
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff ff6a 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e032      	b.n	80039b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800394a:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <SPI_EndRxTxTransaction+0xa0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <SPI_EndRxTxTransaction+0xa4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0d5b      	lsrs	r3, r3, #21
 8003956:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003968:	d112      	bne.n	8003990 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	@ 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff ff47 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d016      	beq.n	80039ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00f      	b.n	80039b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3b01      	subs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a6:	2b80      	cmp	r3, #128	@ 0x80
 80039a8:	d0f2      	beq.n	8003990 <SPI_EndRxTxTransaction+0x78>
 80039aa:	e000      	b.n	80039ae <SPI_EndRxTxTransaction+0x96>
        break;
 80039ac:	bf00      	nop
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000004 	.word	0x20000004
 80039bc:	165e9f81 	.word	0x165e9f81

080039c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0202 	mvn.w	r2, #2
 80039f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8dc 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8ce 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f8df 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d020      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0204 	mvn.w	r2, #4
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f8b6 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8a8 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8b9 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d020      	beq.n	8003abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0208 	mvn.w	r2, #8
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2204      	movs	r2, #4
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f890 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f882 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f893 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d020      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01b      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0210 	mvn.w	r2, #16
 8003ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2208      	movs	r2, #8
 8003ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f86a 	bl	8003bc8 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f85c 	bl	8003bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f86d 	bl	8003bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0201 	mvn.w	r2, #1
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f83a 	bl	8003ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f864 	bl	8003c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00c      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f83e 	bl	8003bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0220 	mvn.w	r2, #32
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f836 	bl	8003c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e042      	b.n	8003cc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd ff4e 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	@ 0x24
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fe77 	bl	8004964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	@ 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d175      	bne.n	8003dd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_UART_Transmit+0x2c>
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e06e      	b.n	8003dda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2221      	movs	r2, #33	@ 0x21
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0a:	f7fe f869 	bl	8001de0 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d24:	d108      	bne.n	8003d38 <HAL_UART_Transmit+0x6c>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	e003      	b.n	8003d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d40:	e02e      	b.n	8003da0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fbdb 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e03a      	b.n	8003dda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e007      	b.n	8003d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1cb      	bne.n	8003d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2140      	movs	r1, #64	@ 0x40
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fba7 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e006      	b.n	8003dda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d112      	bne.n	8003e22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_Receive_IT+0x26>
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e00b      	b.n	8003e24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	461a      	mov	r2, r3
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fbce 	bl	80045ba <UART_Start_Receive_IT>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	e000      	b.n	8003e24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b09a      	sub	sp, #104	@ 0x68
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e54:	657a      	str	r2, [r7, #84]	@ 0x54
 8003e56:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003e5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3314      	adds	r3, #20
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e88:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e5      	bne.n	8003e68 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d119      	bne.n	8003ed8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f023 0310 	bic.w	r3, r3, #16
 8003eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e5      	bne.n	8003ea4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b40      	cmp	r3, #64	@ 0x40
 8003ee4:	d136      	bne.n	8003f54 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003efc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f06:	61ba      	str	r2, [r7, #24]
 8003f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	613b      	str	r3, [r7, #16]
   return(result);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d018      	beq.n	8003f54 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f26:	2200      	movs	r2, #0
 8003f28:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe f897 	bl	8002062 <HAL_DMA_Abort>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe f921 	bl	8002186 <HAL_DMA_GetError>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d104      	bne.n	8003f54 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e00a      	b.n	8003f6a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3768      	adds	r7, #104	@ 0x68
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b0ba      	sub	sp, #232	@ 0xe8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_UART_IRQHandler+0x66>
 8003fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fc07 	bl	80047e6 <UART_Receive_IT>
      return;
 8003fd8:	e273      	b.n	80044c2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80de 	beq.w	80041a0 <HAL_UART_IRQHandler+0x22c>
 8003fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80d1 	beq.w	80041a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
 800400a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
 800402e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_UART_IRQHandler+0xf6>
 8004052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0204 	orr.w	r2, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d011      	beq.n	800409a <HAL_UART_IRQHandler+0x126>
 8004076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f043 0208 	orr.w	r2, r3, #8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 820a 	beq.w	80044b8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_UART_IRQHandler+0x14e>
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb92 	bl	80047e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b40      	cmp	r3, #64	@ 0x40
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_UART_IRQHandler+0x17a>
 80040e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d04f      	beq.n	800418e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa9d 	bl	800462e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	d141      	bne.n	8004186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3314      	adds	r3, #20
 8004108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800411c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800412e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800413a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1d9      	bne.n	8004102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415a:	4a8a      	ldr	r2, [pc, #552]	@ (8004384 <HAL_UART_IRQHandler+0x410>)
 800415c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004162:	4618      	mov	r0, r3
 8004164:	f7fd ffed 	bl	8002142 <HAL_DMA_Abort_IT>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00e      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9ac 	bl	80044dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e00a      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9a8 	bl	80044dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e006      	b.n	800419c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9a4 	bl	80044dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800419a:	e18d      	b.n	80044b8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	bf00      	nop
    return;
 800419e:	e18b      	b.n	80044b8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 8167 	bne.w	8004478 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8160 	beq.w	8004478 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8159 	beq.w	8004478 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e6:	2b40      	cmp	r3, #64	@ 0x40
 80041e8:	f040 80ce 	bne.w	8004388 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a9 	beq.w	8004354 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800420a:	429a      	cmp	r2, r3
 800420c:	f080 80a2 	bcs.w	8004354 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004216:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004222:	f000 8088 	beq.w	8004336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800423c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800425e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800426a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1d9      	bne.n	8004226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004296:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800429a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800429e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e1      	bne.n	8004272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3314      	adds	r3, #20
 80042ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e3      	bne.n	80042ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004318:	65ba      	str	r2, [r7, #88]	@ 0x58
 800431a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800431e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e3      	bne.n	80042f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fe96 	bl	8002062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004344:	b29b      	uxth	r3, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	b29b      	uxth	r3, r3
 800434a:	4619      	mov	r1, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f8cf 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004352:	e0b3      	b.n	80044bc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800435c:	429a      	cmp	r2, r3
 800435e:	f040 80ad 	bne.w	80044bc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436c:	f040 80a6 	bne.w	80044bc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f8b7 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
      return;
 8004382:	e09b      	b.n	80044bc <HAL_UART_IRQHandler+0x548>
 8004384:	080046f5 	.word	0x080046f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 808e 	beq.w	80044c0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80043a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 8089 	beq.w	80044c0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80043d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e3      	bne.n	80043ae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	623b      	str	r3, [r7, #32]
   return(result);
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800440a:	633a      	str	r2, [r7, #48]	@ 0x30
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	60fb      	str	r3, [r7, #12]
   return(result);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0310 	bic.w	r3, r3, #16
 8004442:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004450:	61fa      	str	r2, [r7, #28]
 8004452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	617b      	str	r3, [r7, #20]
   return(result);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e3      	bne.n	800442c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800446a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f83d 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004476:	e023      	b.n	80044c0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <HAL_UART_IRQHandler+0x524>
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f940 	bl	8004716 <UART_Transmit_IT>
    return;
 8004496:	e014      	b.n	80044c2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <HAL_UART_IRQHandler+0x54e>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f980 	bl	80047b6 <UART_EndTransmit_IT>
    return;
 80044b6:	e004      	b.n	80044c2 <HAL_UART_IRQHandler+0x54e>
    return;
 80044b8:	bf00      	nop
 80044ba:	e002      	b.n	80044c2 <HAL_UART_IRQHandler+0x54e>
      return;
 80044bc:	bf00      	nop
 80044be:	e000      	b.n	80044c2 <HAL_UART_IRQHandler+0x54e>
      return;
 80044c0:	bf00      	nop
  }
}
 80044c2:	37e8      	adds	r7, #232	@ 0xe8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004518:	e03b      	b.n	8004592 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d037      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fd fc5d 	bl	8001de0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <UART_WaitOnFlagUntilTimeout+0x30>
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e03a      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d023      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0x8a>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b80      	cmp	r3, #128	@ 0x80
 800454e:	d020      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b40      	cmp	r3, #64	@ 0x40
 8004554:	d01d      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d116      	bne.n	8004592 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f857 	bl	800462e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2208      	movs	r2, #8
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e00f      	b.n	80045b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4013      	ands	r3, r2
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	429a      	cmp	r2, r3
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d0b4      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	4613      	mov	r3, r2
 80045c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2222      	movs	r2, #34	@ 0x22
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0220 	orr.w	r2, r2, #32
 800461e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b095      	sub	sp, #84	@ 0x54
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800464c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004656:	643a      	str	r2, [r7, #64]	@ 0x40
 8004658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800465c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1e5      	bne.n	8004636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3314      	adds	r3, #20
 8004670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	61fb      	str	r3, [r7, #28]
   return(result);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800468a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e5      	bne.n	800466a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d119      	bne.n	80046da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0310 	bic.w	r3, r3, #16
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046c6:	61ba      	str	r2, [r7, #24]
 80046c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	613b      	str	r3, [r7, #16]
   return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e5      	bne.n	80046a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046e8:	bf00      	nop
 80046ea:	3754      	adds	r7, #84	@ 0x54
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff fee7 	bl	80044dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b21      	cmp	r3, #33	@ 0x21
 8004728:	d13e      	bne.n	80047a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004732:	d114      	bne.n	800475e <UART_Transmit_IT+0x48>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d110      	bne.n	800475e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	e008      	b.n	8004770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6211      	str	r1, [r2, #32]
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10f      	bne.n	80047a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fe76 	bl	80044c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b08c      	sub	sp, #48	@ 0x30
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b22      	cmp	r3, #34	@ 0x22
 8004800:	f040 80aa 	bne.w	8004958 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480c:	d115      	bne.n	800483a <UART_Receive_IT+0x54>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d111      	bne.n	800483a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b29b      	uxth	r3, r3
 8004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004828:	b29a      	uxth	r2, r3
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28
 8004838:	e024      	b.n	8004884 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004848:	d007      	beq.n	800485a <UART_Receive_IT+0x74>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <UART_Receive_IT+0x82>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e008      	b.n	800487a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004874:	b2da      	uxtb	r2, r3
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4619      	mov	r1, r3
 8004892:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004894:	2b00      	cmp	r3, #0
 8004896:	d15d      	bne.n	8004954 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0220 	bic.w	r2, r2, #32
 80048a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d135      	bne.n	800494a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	613b      	str	r3, [r7, #16]
   return(result);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 0310 	bic.w	r3, r3, #16
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004904:	623a      	str	r2, [r7, #32]
 8004906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	69f9      	ldr	r1, [r7, #28]
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	61bb      	str	r3, [r7, #24]
   return(result);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d10a      	bne.n	800493c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fdd4 	bl	80044f0 <HAL_UARTEx_RxEventCallback>
 8004948:	e002      	b.n	8004950 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fc22 	bl	8001194 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	e002      	b.n	800495a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e000      	b.n	800495a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
  }
}
 800495a:	4618      	mov	r0, r3
 800495c:	3730      	adds	r7, #48	@ 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b0c0      	sub	sp, #256	@ 0x100
 800496a:	af00      	add	r7, sp, #0
 800496c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	68d9      	ldr	r1, [r3, #12]
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	ea40 0301 	orr.w	r3, r0, r1
 800498c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	431a      	orrs	r2, r3
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049bc:	f021 010c 	bic.w	r1, r1, #12
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049ca:	430b      	orrs	r3, r1
 80049cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	6999      	ldr	r1, [r3, #24]
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	ea40 0301 	orr.w	r3, r0, r1
 80049ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004c30 <UART_SetConfig+0x2cc>)
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d005      	beq.n	8004a04 <UART_SetConfig+0xa0>
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004c34 <UART_SetConfig+0x2d0>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d104      	bne.n	8004a0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a04:	f7fe fa58 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 8004a08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a0c:	e003      	b.n	8004a16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a0e:	f7fe fa3f 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8004a12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a20:	f040 810c 	bne.w	8004c3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	1891      	adds	r1, r2, r2
 8004a3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a3e:	415b      	adcs	r3, r3
 8004a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a46:	4621      	mov	r1, r4
 8004a48:	eb12 0801 	adds.w	r8, r2, r1
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	eb43 0901 	adc.w	r9, r3, r1
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a66:	4690      	mov	r8, r2
 8004a68:	4699      	mov	r9, r3
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	eb18 0303 	adds.w	r3, r8, r3
 8004a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a74:	462b      	mov	r3, r5
 8004a76:	eb49 0303 	adc.w	r3, r9, r3
 8004a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a92:	460b      	mov	r3, r1
 8004a94:	18db      	adds	r3, r3, r3
 8004a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a98:	4613      	mov	r3, r2
 8004a9a:	eb42 0303 	adc.w	r3, r2, r3
 8004a9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004aa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004aa8:	f7fb fdae 	bl	8000608 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b61      	ldr	r3, [pc, #388]	@ (8004c38 <UART_SetConfig+0x2d4>)
 8004ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	011c      	lsls	r4, r3, #4
 8004aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ac4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ac8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004adc:	4641      	mov	r1, r8
 8004ade:	eb12 0a01 	adds.w	sl, r2, r1
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004af4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004afc:	4692      	mov	sl, r2
 8004afe:	469b      	mov	fp, r3
 8004b00:	4643      	mov	r3, r8
 8004b02:	eb1a 0303 	adds.w	r3, sl, r3
 8004b06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	18db      	adds	r3, r3, r3
 8004b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b2e:	4613      	mov	r3, r2
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b3e:	f7fb fd63 	bl	8000608 <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	4b3b      	ldr	r3, [pc, #236]	@ (8004c38 <UART_SetConfig+0x2d4>)
 8004b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2264      	movs	r2, #100	@ 0x64
 8004b52:	fb02 f303 	mul.w	r3, r2, r3
 8004b56:	1acb      	subs	r3, r1, r3
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b5e:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <UART_SetConfig+0x2d4>)
 8004b60:	fba3 2302 	umull	r2, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b6c:	441c      	add	r4, r3
 8004b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b80:	4642      	mov	r2, r8
 8004b82:	464b      	mov	r3, r9
 8004b84:	1891      	adds	r1, r2, r2
 8004b86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b88:	415b      	adcs	r3, r3
 8004b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b90:	4641      	mov	r1, r8
 8004b92:	1851      	adds	r1, r2, r1
 8004b94:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b96:	4649      	mov	r1, r9
 8004b98:	414b      	adcs	r3, r1
 8004b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ba8:	4659      	mov	r1, fp
 8004baa:	00cb      	lsls	r3, r1, #3
 8004bac:	4651      	mov	r1, sl
 8004bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bb2:	4651      	mov	r1, sl
 8004bb4:	00ca      	lsls	r2, r1, #3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	eb42 0303 	adc.w	r3, r2, r3
 8004bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004be4:	460b      	mov	r3, r1
 8004be6:	18db      	adds	r3, r3, r3
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bea:	4613      	mov	r3, r2
 8004bec:	eb42 0303 	adc.w	r3, r2, r3
 8004bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bfa:	f7fb fd05 	bl	8000608 <__aeabi_uldivmod>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <UART_SetConfig+0x2d4>)
 8004c04:	fba3 1302 	umull	r1, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2164      	movs	r1, #100	@ 0x64
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	3332      	adds	r3, #50	@ 0x32
 8004c16:	4a08      	ldr	r2, [pc, #32]	@ (8004c38 <UART_SetConfig+0x2d4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 0207 	and.w	r2, r3, #7
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4422      	add	r2, r4
 8004c2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c2c:	e106      	b.n	8004e3c <UART_SetConfig+0x4d8>
 8004c2e:	bf00      	nop
 8004c30:	40011000 	.word	0x40011000
 8004c34:	40011400 	.word	0x40011400
 8004c38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c4e:	4642      	mov	r2, r8
 8004c50:	464b      	mov	r3, r9
 8004c52:	1891      	adds	r1, r2, r2
 8004c54:	6239      	str	r1, [r7, #32]
 8004c56:	415b      	adcs	r3, r3
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c5e:	4641      	mov	r1, r8
 8004c60:	1854      	adds	r4, r2, r1
 8004c62:	4649      	mov	r1, r9
 8004c64:	eb43 0501 	adc.w	r5, r3, r1
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	00eb      	lsls	r3, r5, #3
 8004c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c76:	00e2      	lsls	r2, r4, #3
 8004c78:	4614      	mov	r4, r2
 8004c7a:	461d      	mov	r5, r3
 8004c7c:	4643      	mov	r3, r8
 8004c7e:	18e3      	adds	r3, r4, r3
 8004c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c84:	464b      	mov	r3, r9
 8004c86:	eb45 0303 	adc.w	r3, r5, r3
 8004c8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004caa:	4629      	mov	r1, r5
 8004cac:	008b      	lsls	r3, r1, #2
 8004cae:	4621      	mov	r1, r4
 8004cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	008a      	lsls	r2, r1, #2
 8004cb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cbc:	f7fb fca4 	bl	8000608 <__aeabi_uldivmod>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4b60      	ldr	r3, [pc, #384]	@ (8004e48 <UART_SetConfig+0x4e4>)
 8004cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	011c      	lsls	r4, r3, #4
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	1891      	adds	r1, r2, r2
 8004ce6:	61b9      	str	r1, [r7, #24]
 8004ce8:	415b      	adcs	r3, r3
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	1851      	adds	r1, r2, r1
 8004cf4:	6139      	str	r1, [r7, #16]
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	414b      	adcs	r3, r1
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d08:	4659      	mov	r1, fp
 8004d0a:	00cb      	lsls	r3, r1, #3
 8004d0c:	4651      	mov	r1, sl
 8004d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d12:	4651      	mov	r1, sl
 8004d14:	00ca      	lsls	r2, r1, #3
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d24:	464b      	mov	r3, r9
 8004d26:	460a      	mov	r2, r1
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d48:	4649      	mov	r1, r9
 8004d4a:	008b      	lsls	r3, r1, #2
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d52:	4641      	mov	r1, r8
 8004d54:	008a      	lsls	r2, r1, #2
 8004d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d5a:	f7fb fc55 	bl	8000608 <__aeabi_uldivmod>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	4b38      	ldr	r3, [pc, #224]	@ (8004e48 <UART_SetConfig+0x4e4>)
 8004d66:	fba3 2301 	umull	r2, r3, r3, r1
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2264      	movs	r2, #100	@ 0x64
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	1acb      	subs	r3, r1, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	@ 0x32
 8004d78:	4a33      	ldr	r2, [pc, #204]	@ (8004e48 <UART_SetConfig+0x4e4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d84:	441c      	add	r4, r3
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d94:	4642      	mov	r2, r8
 8004d96:	464b      	mov	r3, r9
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004da4:	4641      	mov	r1, r8
 8004da6:	1851      	adds	r1, r2, r1
 8004da8:	6039      	str	r1, [r7, #0]
 8004daa:	4649      	mov	r1, r9
 8004dac:	414b      	adcs	r3, r1
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	00cb      	lsls	r3, r1, #3
 8004dc0:	4651      	mov	r1, sl
 8004dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc6:	4651      	mov	r1, sl
 8004dc8:	00ca      	lsls	r2, r1, #3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	189b      	adds	r3, r3, r2
 8004dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	460a      	mov	r2, r1
 8004dda:	eb42 0303 	adc.w	r3, r2, r3
 8004dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004df8:	4649      	mov	r1, r9
 8004dfa:	008b      	lsls	r3, r1, #2
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e02:	4641      	mov	r1, r8
 8004e04:	008a      	lsls	r2, r1, #2
 8004e06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e0a:	f7fb fbfd 	bl	8000608 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <UART_SetConfig+0x4e4>)
 8004e14:	fba3 1302 	umull	r1, r3, r3, r2
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	2164      	movs	r1, #100	@ 0x64
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	3332      	adds	r3, #50	@ 0x32
 8004e26:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <UART_SetConfig+0x4e4>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	f003 020f 	and.w	r2, r3, #15
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4422      	add	r2, r4
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	bf00      	nop
 8004e3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e42:	46bd      	mov	sp, r7
 8004e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e48:	51eb851f 	.word	0x51eb851f

08004e4c <sniprintf>:
 8004e4c:	b40c      	push	{r2, r3}
 8004e4e:	b530      	push	{r4, r5, lr}
 8004e50:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <sniprintf+0x68>)
 8004e52:	1e0c      	subs	r4, r1, #0
 8004e54:	681d      	ldr	r5, [r3, #0]
 8004e56:	b09d      	sub	sp, #116	@ 0x74
 8004e58:	da08      	bge.n	8004e6c <sniprintf+0x20>
 8004e5a:	238b      	movs	r3, #139	@ 0x8b
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e62:	b01d      	add	sp, #116	@ 0x74
 8004e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e68:	b002      	add	sp, #8
 8004e6a:	4770      	bx	lr
 8004e6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004e70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004e7a:	bf14      	ite	ne
 8004e7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e80:	4623      	moveq	r3, r4
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	9307      	str	r3, [sp, #28]
 8004e86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004e8a:	9002      	str	r0, [sp, #8]
 8004e8c:	9006      	str	r0, [sp, #24]
 8004e8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e94:	ab21      	add	r3, sp, #132	@ 0x84
 8004e96:	a902      	add	r1, sp, #8
 8004e98:	4628      	mov	r0, r5
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	f000 f9a4 	bl	80051e8 <_svfiprintf_r>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	bfbc      	itt	lt
 8004ea4:	238b      	movlt	r3, #139	@ 0x8b
 8004ea6:	602b      	strlt	r3, [r5, #0]
 8004ea8:	2c00      	cmp	r4, #0
 8004eaa:	d0da      	beq.n	8004e62 <sniprintf+0x16>
 8004eac:	9b02      	ldr	r3, [sp, #8]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e7d6      	b.n	8004e62 <sniprintf+0x16>
 8004eb4:	20000010 	.word	0x20000010

08004eb8 <memcmp>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	3901      	subs	r1, #1
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4290      	cmp	r0, r2
 8004ec0:	d101      	bne.n	8004ec6 <memcmp+0xe>
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	e005      	b.n	8004ed2 <memcmp+0x1a>
 8004ec6:	7803      	ldrb	r3, [r0, #0]
 8004ec8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d001      	beq.n	8004ed4 <memcmp+0x1c>
 8004ed0:	1b18      	subs	r0, r3, r4
 8004ed2:	bd10      	pop	{r4, pc}
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	e7f2      	b.n	8004ebe <memcmp+0x6>

08004ed8 <memset>:
 8004ed8:	4402      	add	r2, r0
 8004eda:	4603      	mov	r3, r0
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d100      	bne.n	8004ee2 <memset+0xa>
 8004ee0:	4770      	bx	lr
 8004ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee6:	e7f9      	b.n	8004edc <memset+0x4>

08004ee8 <__errno>:
 8004ee8:	4b01      	ldr	r3, [pc, #4]	@ (8004ef0 <__errno+0x8>)
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000010 	.word	0x20000010

08004ef4 <__libc_init_array>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8004f2c <__libc_init_array+0x38>)
 8004ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8004f30 <__libc_init_array+0x3c>)
 8004efa:	1b64      	subs	r4, r4, r5
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	2600      	movs	r6, #0
 8004f00:	42a6      	cmp	r6, r4
 8004f02:	d109      	bne.n	8004f18 <__libc_init_array+0x24>
 8004f04:	4d0b      	ldr	r5, [pc, #44]	@ (8004f34 <__libc_init_array+0x40>)
 8004f06:	4c0c      	ldr	r4, [pc, #48]	@ (8004f38 <__libc_init_array+0x44>)
 8004f08:	f000 fc64 	bl	80057d4 <_init>
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	2600      	movs	r6, #0
 8004f12:	42a6      	cmp	r6, r4
 8004f14:	d105      	bne.n	8004f22 <__libc_init_array+0x2e>
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
 8004f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1c:	4798      	blx	r3
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7ee      	b.n	8004f00 <__libc_init_array+0xc>
 8004f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f26:	4798      	blx	r3
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7f2      	b.n	8004f12 <__libc_init_array+0x1e>
 8004f2c:	08005d94 	.word	0x08005d94
 8004f30:	08005d94 	.word	0x08005d94
 8004f34:	08005d94 	.word	0x08005d94
 8004f38:	08005d98 	.word	0x08005d98

08004f3c <__retarget_lock_acquire_recursive>:
 8004f3c:	4770      	bx	lr

08004f3e <__retarget_lock_release_recursive>:
 8004f3e:	4770      	bx	lr

08004f40 <_free_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4605      	mov	r5, r0
 8004f44:	2900      	cmp	r1, #0
 8004f46:	d041      	beq.n	8004fcc <_free_r+0x8c>
 8004f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4c:	1f0c      	subs	r4, r1, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfb8      	it	lt
 8004f52:	18e4      	addlt	r4, r4, r3
 8004f54:	f000 f8e0 	bl	8005118 <__malloc_lock>
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <_free_r+0x90>)
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	b933      	cbnz	r3, 8004f6c <_free_r+0x2c>
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	6014      	str	r4, [r2, #0]
 8004f62:	4628      	mov	r0, r5
 8004f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f68:	f000 b8dc 	b.w	8005124 <__malloc_unlock>
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	d908      	bls.n	8004f82 <_free_r+0x42>
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	1821      	adds	r1, r4, r0
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf01      	itttt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	e7ed      	b.n	8004f5e <_free_r+0x1e>
 8004f82:	461a      	mov	r2, r3
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b10b      	cbz	r3, 8004f8c <_free_r+0x4c>
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d9fa      	bls.n	8004f82 <_free_r+0x42>
 8004f8c:	6811      	ldr	r1, [r2, #0]
 8004f8e:	1850      	adds	r0, r2, r1
 8004f90:	42a0      	cmp	r0, r4
 8004f92:	d10b      	bne.n	8004fac <_free_r+0x6c>
 8004f94:	6820      	ldr	r0, [r4, #0]
 8004f96:	4401      	add	r1, r0
 8004f98:	1850      	adds	r0, r2, r1
 8004f9a:	4283      	cmp	r3, r0
 8004f9c:	6011      	str	r1, [r2, #0]
 8004f9e:	d1e0      	bne.n	8004f62 <_free_r+0x22>
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	6053      	str	r3, [r2, #4]
 8004fa6:	4408      	add	r0, r1
 8004fa8:	6010      	str	r0, [r2, #0]
 8004faa:	e7da      	b.n	8004f62 <_free_r+0x22>
 8004fac:	d902      	bls.n	8004fb4 <_free_r+0x74>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	e7d6      	b.n	8004f62 <_free_r+0x22>
 8004fb4:	6820      	ldr	r0, [r4, #0]
 8004fb6:	1821      	adds	r1, r4, r0
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	bf04      	itt	eq
 8004fbc:	6819      	ldreq	r1, [r3, #0]
 8004fbe:	685b      	ldreq	r3, [r3, #4]
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	bf04      	itt	eq
 8004fc4:	1809      	addeq	r1, r1, r0
 8004fc6:	6021      	streq	r1, [r4, #0]
 8004fc8:	6054      	str	r4, [r2, #4]
 8004fca:	e7ca      	b.n	8004f62 <_free_r+0x22>
 8004fcc:	bd38      	pop	{r3, r4, r5, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000344 	.word	0x20000344

08004fd4 <sbrk_aligned>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8005014 <sbrk_aligned+0x40>)
 8004fd8:	460c      	mov	r4, r1
 8004fda:	6831      	ldr	r1, [r6, #0]
 8004fdc:	4605      	mov	r5, r0
 8004fde:	b911      	cbnz	r1, 8004fe6 <sbrk_aligned+0x12>
 8004fe0:	f000 fba4 	bl	800572c <_sbrk_r>
 8004fe4:	6030      	str	r0, [r6, #0]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 fb9f 	bl	800572c <_sbrk_r>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	d103      	bne.n	8004ffa <sbrk_aligned+0x26>
 8004ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	1cc4      	adds	r4, r0, #3
 8004ffc:	f024 0403 	bic.w	r4, r4, #3
 8005000:	42a0      	cmp	r0, r4
 8005002:	d0f8      	beq.n	8004ff6 <sbrk_aligned+0x22>
 8005004:	1a21      	subs	r1, r4, r0
 8005006:	4628      	mov	r0, r5
 8005008:	f000 fb90 	bl	800572c <_sbrk_r>
 800500c:	3001      	adds	r0, #1
 800500e:	d1f2      	bne.n	8004ff6 <sbrk_aligned+0x22>
 8005010:	e7ef      	b.n	8004ff2 <sbrk_aligned+0x1e>
 8005012:	bf00      	nop
 8005014:	20000340 	.word	0x20000340

08005018 <_malloc_r>:
 8005018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800501c:	1ccd      	adds	r5, r1, #3
 800501e:	f025 0503 	bic.w	r5, r5, #3
 8005022:	3508      	adds	r5, #8
 8005024:	2d0c      	cmp	r5, #12
 8005026:	bf38      	it	cc
 8005028:	250c      	movcc	r5, #12
 800502a:	2d00      	cmp	r5, #0
 800502c:	4606      	mov	r6, r0
 800502e:	db01      	blt.n	8005034 <_malloc_r+0x1c>
 8005030:	42a9      	cmp	r1, r5
 8005032:	d904      	bls.n	800503e <_malloc_r+0x26>
 8005034:	230c      	movs	r3, #12
 8005036:	6033      	str	r3, [r6, #0]
 8005038:	2000      	movs	r0, #0
 800503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005114 <_malloc_r+0xfc>
 8005042:	f000 f869 	bl	8005118 <__malloc_lock>
 8005046:	f8d8 3000 	ldr.w	r3, [r8]
 800504a:	461c      	mov	r4, r3
 800504c:	bb44      	cbnz	r4, 80050a0 <_malloc_r+0x88>
 800504e:	4629      	mov	r1, r5
 8005050:	4630      	mov	r0, r6
 8005052:	f7ff ffbf 	bl	8004fd4 <sbrk_aligned>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	4604      	mov	r4, r0
 800505a:	d158      	bne.n	800510e <_malloc_r+0xf6>
 800505c:	f8d8 4000 	ldr.w	r4, [r8]
 8005060:	4627      	mov	r7, r4
 8005062:	2f00      	cmp	r7, #0
 8005064:	d143      	bne.n	80050ee <_malloc_r+0xd6>
 8005066:	2c00      	cmp	r4, #0
 8005068:	d04b      	beq.n	8005102 <_malloc_r+0xea>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	4639      	mov	r1, r7
 800506e:	4630      	mov	r0, r6
 8005070:	eb04 0903 	add.w	r9, r4, r3
 8005074:	f000 fb5a 	bl	800572c <_sbrk_r>
 8005078:	4581      	cmp	r9, r0
 800507a:	d142      	bne.n	8005102 <_malloc_r+0xea>
 800507c:	6821      	ldr	r1, [r4, #0]
 800507e:	1a6d      	subs	r5, r5, r1
 8005080:	4629      	mov	r1, r5
 8005082:	4630      	mov	r0, r6
 8005084:	f7ff ffa6 	bl	8004fd4 <sbrk_aligned>
 8005088:	3001      	adds	r0, #1
 800508a:	d03a      	beq.n	8005102 <_malloc_r+0xea>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	442b      	add	r3, r5
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	f8d8 3000 	ldr.w	r3, [r8]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	bb62      	cbnz	r2, 80050f4 <_malloc_r+0xdc>
 800509a:	f8c8 7000 	str.w	r7, [r8]
 800509e:	e00f      	b.n	80050c0 <_malloc_r+0xa8>
 80050a0:	6822      	ldr	r2, [r4, #0]
 80050a2:	1b52      	subs	r2, r2, r5
 80050a4:	d420      	bmi.n	80050e8 <_malloc_r+0xd0>
 80050a6:	2a0b      	cmp	r2, #11
 80050a8:	d917      	bls.n	80050da <_malloc_r+0xc2>
 80050aa:	1961      	adds	r1, r4, r5
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	6025      	str	r5, [r4, #0]
 80050b0:	bf18      	it	ne
 80050b2:	6059      	strne	r1, [r3, #4]
 80050b4:	6863      	ldr	r3, [r4, #4]
 80050b6:	bf08      	it	eq
 80050b8:	f8c8 1000 	streq.w	r1, [r8]
 80050bc:	5162      	str	r2, [r4, r5]
 80050be:	604b      	str	r3, [r1, #4]
 80050c0:	4630      	mov	r0, r6
 80050c2:	f000 f82f 	bl	8005124 <__malloc_unlock>
 80050c6:	f104 000b 	add.w	r0, r4, #11
 80050ca:	1d23      	adds	r3, r4, #4
 80050cc:	f020 0007 	bic.w	r0, r0, #7
 80050d0:	1ac2      	subs	r2, r0, r3
 80050d2:	bf1c      	itt	ne
 80050d4:	1a1b      	subne	r3, r3, r0
 80050d6:	50a3      	strne	r3, [r4, r2]
 80050d8:	e7af      	b.n	800503a <_malloc_r+0x22>
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	42a3      	cmp	r3, r4
 80050de:	bf0c      	ite	eq
 80050e0:	f8c8 2000 	streq.w	r2, [r8]
 80050e4:	605a      	strne	r2, [r3, #4]
 80050e6:	e7eb      	b.n	80050c0 <_malloc_r+0xa8>
 80050e8:	4623      	mov	r3, r4
 80050ea:	6864      	ldr	r4, [r4, #4]
 80050ec:	e7ae      	b.n	800504c <_malloc_r+0x34>
 80050ee:	463c      	mov	r4, r7
 80050f0:	687f      	ldr	r7, [r7, #4]
 80050f2:	e7b6      	b.n	8005062 <_malloc_r+0x4a>
 80050f4:	461a      	mov	r2, r3
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d1fb      	bne.n	80050f4 <_malloc_r+0xdc>
 80050fc:	2300      	movs	r3, #0
 80050fe:	6053      	str	r3, [r2, #4]
 8005100:	e7de      	b.n	80050c0 <_malloc_r+0xa8>
 8005102:	230c      	movs	r3, #12
 8005104:	6033      	str	r3, [r6, #0]
 8005106:	4630      	mov	r0, r6
 8005108:	f000 f80c 	bl	8005124 <__malloc_unlock>
 800510c:	e794      	b.n	8005038 <_malloc_r+0x20>
 800510e:	6005      	str	r5, [r0, #0]
 8005110:	e7d6      	b.n	80050c0 <_malloc_r+0xa8>
 8005112:	bf00      	nop
 8005114:	20000344 	.word	0x20000344

08005118 <__malloc_lock>:
 8005118:	4801      	ldr	r0, [pc, #4]	@ (8005120 <__malloc_lock+0x8>)
 800511a:	f7ff bf0f 	b.w	8004f3c <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	2000033c 	.word	0x2000033c

08005124 <__malloc_unlock>:
 8005124:	4801      	ldr	r0, [pc, #4]	@ (800512c <__malloc_unlock+0x8>)
 8005126:	f7ff bf0a 	b.w	8004f3e <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	2000033c 	.word	0x2000033c

08005130 <__ssputs_r>:
 8005130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	688e      	ldr	r6, [r1, #8]
 8005136:	461f      	mov	r7, r3
 8005138:	42be      	cmp	r6, r7
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	4682      	mov	sl, r0
 800513e:	460c      	mov	r4, r1
 8005140:	4690      	mov	r8, r2
 8005142:	d82d      	bhi.n	80051a0 <__ssputs_r+0x70>
 8005144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005148:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800514c:	d026      	beq.n	800519c <__ssputs_r+0x6c>
 800514e:	6965      	ldr	r5, [r4, #20]
 8005150:	6909      	ldr	r1, [r1, #16]
 8005152:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005156:	eba3 0901 	sub.w	r9, r3, r1
 800515a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800515e:	1c7b      	adds	r3, r7, #1
 8005160:	444b      	add	r3, r9
 8005162:	106d      	asrs	r5, r5, #1
 8005164:	429d      	cmp	r5, r3
 8005166:	bf38      	it	cc
 8005168:	461d      	movcc	r5, r3
 800516a:	0553      	lsls	r3, r2, #21
 800516c:	d527      	bpl.n	80051be <__ssputs_r+0x8e>
 800516e:	4629      	mov	r1, r5
 8005170:	f7ff ff52 	bl	8005018 <_malloc_r>
 8005174:	4606      	mov	r6, r0
 8005176:	b360      	cbz	r0, 80051d2 <__ssputs_r+0xa2>
 8005178:	6921      	ldr	r1, [r4, #16]
 800517a:	464a      	mov	r2, r9
 800517c:	f000 fae6 	bl	800574c <memcpy>
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	6126      	str	r6, [r4, #16]
 800518e:	6165      	str	r5, [r4, #20]
 8005190:	444e      	add	r6, r9
 8005192:	eba5 0509 	sub.w	r5, r5, r9
 8005196:	6026      	str	r6, [r4, #0]
 8005198:	60a5      	str	r5, [r4, #8]
 800519a:	463e      	mov	r6, r7
 800519c:	42be      	cmp	r6, r7
 800519e:	d900      	bls.n	80051a2 <__ssputs_r+0x72>
 80051a0:	463e      	mov	r6, r7
 80051a2:	6820      	ldr	r0, [r4, #0]
 80051a4:	4632      	mov	r2, r6
 80051a6:	4641      	mov	r1, r8
 80051a8:	f000 faa6 	bl	80056f8 <memmove>
 80051ac:	68a3      	ldr	r3, [r4, #8]
 80051ae:	1b9b      	subs	r3, r3, r6
 80051b0:	60a3      	str	r3, [r4, #8]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	4433      	add	r3, r6
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	2000      	movs	r0, #0
 80051ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051be:	462a      	mov	r2, r5
 80051c0:	f000 fad2 	bl	8005768 <_realloc_r>
 80051c4:	4606      	mov	r6, r0
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d1e0      	bne.n	800518c <__ssputs_r+0x5c>
 80051ca:	6921      	ldr	r1, [r4, #16]
 80051cc:	4650      	mov	r0, sl
 80051ce:	f7ff feb7 	bl	8004f40 <_free_r>
 80051d2:	230c      	movs	r3, #12
 80051d4:	f8ca 3000 	str.w	r3, [sl]
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295
 80051e4:	e7e9      	b.n	80051ba <__ssputs_r+0x8a>
	...

080051e8 <_svfiprintf_r>:
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	4698      	mov	r8, r3
 80051ee:	898b      	ldrh	r3, [r1, #12]
 80051f0:	061b      	lsls	r3, r3, #24
 80051f2:	b09d      	sub	sp, #116	@ 0x74
 80051f4:	4607      	mov	r7, r0
 80051f6:	460d      	mov	r5, r1
 80051f8:	4614      	mov	r4, r2
 80051fa:	d510      	bpl.n	800521e <_svfiprintf_r+0x36>
 80051fc:	690b      	ldr	r3, [r1, #16]
 80051fe:	b973      	cbnz	r3, 800521e <_svfiprintf_r+0x36>
 8005200:	2140      	movs	r1, #64	@ 0x40
 8005202:	f7ff ff09 	bl	8005018 <_malloc_r>
 8005206:	6028      	str	r0, [r5, #0]
 8005208:	6128      	str	r0, [r5, #16]
 800520a:	b930      	cbnz	r0, 800521a <_svfiprintf_r+0x32>
 800520c:	230c      	movs	r3, #12
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	b01d      	add	sp, #116	@ 0x74
 8005216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521a:	2340      	movs	r3, #64	@ 0x40
 800521c:	616b      	str	r3, [r5, #20]
 800521e:	2300      	movs	r3, #0
 8005220:	9309      	str	r3, [sp, #36]	@ 0x24
 8005222:	2320      	movs	r3, #32
 8005224:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005228:	f8cd 800c 	str.w	r8, [sp, #12]
 800522c:	2330      	movs	r3, #48	@ 0x30
 800522e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053cc <_svfiprintf_r+0x1e4>
 8005232:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005236:	f04f 0901 	mov.w	r9, #1
 800523a:	4623      	mov	r3, r4
 800523c:	469a      	mov	sl, r3
 800523e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005242:	b10a      	cbz	r2, 8005248 <_svfiprintf_r+0x60>
 8005244:	2a25      	cmp	r2, #37	@ 0x25
 8005246:	d1f9      	bne.n	800523c <_svfiprintf_r+0x54>
 8005248:	ebba 0b04 	subs.w	fp, sl, r4
 800524c:	d00b      	beq.n	8005266 <_svfiprintf_r+0x7e>
 800524e:	465b      	mov	r3, fp
 8005250:	4622      	mov	r2, r4
 8005252:	4629      	mov	r1, r5
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff ff6b 	bl	8005130 <__ssputs_r>
 800525a:	3001      	adds	r0, #1
 800525c:	f000 80a7 	beq.w	80053ae <_svfiprintf_r+0x1c6>
 8005260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005262:	445a      	add	r2, fp
 8005264:	9209      	str	r2, [sp, #36]	@ 0x24
 8005266:	f89a 3000 	ldrb.w	r3, [sl]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 809f 	beq.w	80053ae <_svfiprintf_r+0x1c6>
 8005270:	2300      	movs	r3, #0
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800527a:	f10a 0a01 	add.w	sl, sl, #1
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	9307      	str	r3, [sp, #28]
 8005282:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005286:	931a      	str	r3, [sp, #104]	@ 0x68
 8005288:	4654      	mov	r4, sl
 800528a:	2205      	movs	r2, #5
 800528c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005290:	484e      	ldr	r0, [pc, #312]	@ (80053cc <_svfiprintf_r+0x1e4>)
 8005292:	f7fa ffad 	bl	80001f0 <memchr>
 8005296:	9a04      	ldr	r2, [sp, #16]
 8005298:	b9d8      	cbnz	r0, 80052d2 <_svfiprintf_r+0xea>
 800529a:	06d0      	lsls	r0, r2, #27
 800529c:	bf44      	itt	mi
 800529e:	2320      	movmi	r3, #32
 80052a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052a4:	0711      	lsls	r1, r2, #28
 80052a6:	bf44      	itt	mi
 80052a8:	232b      	movmi	r3, #43	@ 0x2b
 80052aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ae:	f89a 3000 	ldrb.w	r3, [sl]
 80052b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80052b4:	d015      	beq.n	80052e2 <_svfiprintf_r+0xfa>
 80052b6:	9a07      	ldr	r2, [sp, #28]
 80052b8:	4654      	mov	r4, sl
 80052ba:	2000      	movs	r0, #0
 80052bc:	f04f 0c0a 	mov.w	ip, #10
 80052c0:	4621      	mov	r1, r4
 80052c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c6:	3b30      	subs	r3, #48	@ 0x30
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d94b      	bls.n	8005364 <_svfiprintf_r+0x17c>
 80052cc:	b1b0      	cbz	r0, 80052fc <_svfiprintf_r+0x114>
 80052ce:	9207      	str	r2, [sp, #28]
 80052d0:	e014      	b.n	80052fc <_svfiprintf_r+0x114>
 80052d2:	eba0 0308 	sub.w	r3, r0, r8
 80052d6:	fa09 f303 	lsl.w	r3, r9, r3
 80052da:	4313      	orrs	r3, r2
 80052dc:	9304      	str	r3, [sp, #16]
 80052de:	46a2      	mov	sl, r4
 80052e0:	e7d2      	b.n	8005288 <_svfiprintf_r+0xa0>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	1d19      	adds	r1, r3, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	9103      	str	r1, [sp, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bfbb      	ittet	lt
 80052ee:	425b      	neglt	r3, r3
 80052f0:	f042 0202 	orrlt.w	r2, r2, #2
 80052f4:	9307      	strge	r3, [sp, #28]
 80052f6:	9307      	strlt	r3, [sp, #28]
 80052f8:	bfb8      	it	lt
 80052fa:	9204      	strlt	r2, [sp, #16]
 80052fc:	7823      	ldrb	r3, [r4, #0]
 80052fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005300:	d10a      	bne.n	8005318 <_svfiprintf_r+0x130>
 8005302:	7863      	ldrb	r3, [r4, #1]
 8005304:	2b2a      	cmp	r3, #42	@ 0x2a
 8005306:	d132      	bne.n	800536e <_svfiprintf_r+0x186>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	1d1a      	adds	r2, r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	9203      	str	r2, [sp, #12]
 8005310:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005314:	3402      	adds	r4, #2
 8005316:	9305      	str	r3, [sp, #20]
 8005318:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053dc <_svfiprintf_r+0x1f4>
 800531c:	7821      	ldrb	r1, [r4, #0]
 800531e:	2203      	movs	r2, #3
 8005320:	4650      	mov	r0, sl
 8005322:	f7fa ff65 	bl	80001f0 <memchr>
 8005326:	b138      	cbz	r0, 8005338 <_svfiprintf_r+0x150>
 8005328:	9b04      	ldr	r3, [sp, #16]
 800532a:	eba0 000a 	sub.w	r0, r0, sl
 800532e:	2240      	movs	r2, #64	@ 0x40
 8005330:	4082      	lsls	r2, r0
 8005332:	4313      	orrs	r3, r2
 8005334:	3401      	adds	r4, #1
 8005336:	9304      	str	r3, [sp, #16]
 8005338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533c:	4824      	ldr	r0, [pc, #144]	@ (80053d0 <_svfiprintf_r+0x1e8>)
 800533e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005342:	2206      	movs	r2, #6
 8005344:	f7fa ff54 	bl	80001f0 <memchr>
 8005348:	2800      	cmp	r0, #0
 800534a:	d036      	beq.n	80053ba <_svfiprintf_r+0x1d2>
 800534c:	4b21      	ldr	r3, [pc, #132]	@ (80053d4 <_svfiprintf_r+0x1ec>)
 800534e:	bb1b      	cbnz	r3, 8005398 <_svfiprintf_r+0x1b0>
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	3307      	adds	r3, #7
 8005354:	f023 0307 	bic.w	r3, r3, #7
 8005358:	3308      	adds	r3, #8
 800535a:	9303      	str	r3, [sp, #12]
 800535c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535e:	4433      	add	r3, r6
 8005360:	9309      	str	r3, [sp, #36]	@ 0x24
 8005362:	e76a      	b.n	800523a <_svfiprintf_r+0x52>
 8005364:	fb0c 3202 	mla	r2, ip, r2, r3
 8005368:	460c      	mov	r4, r1
 800536a:	2001      	movs	r0, #1
 800536c:	e7a8      	b.n	80052c0 <_svfiprintf_r+0xd8>
 800536e:	2300      	movs	r3, #0
 8005370:	3401      	adds	r4, #1
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	4619      	mov	r1, r3
 8005376:	f04f 0c0a 	mov.w	ip, #10
 800537a:	4620      	mov	r0, r4
 800537c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005380:	3a30      	subs	r2, #48	@ 0x30
 8005382:	2a09      	cmp	r2, #9
 8005384:	d903      	bls.n	800538e <_svfiprintf_r+0x1a6>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0c6      	beq.n	8005318 <_svfiprintf_r+0x130>
 800538a:	9105      	str	r1, [sp, #20]
 800538c:	e7c4      	b.n	8005318 <_svfiprintf_r+0x130>
 800538e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005392:	4604      	mov	r4, r0
 8005394:	2301      	movs	r3, #1
 8005396:	e7f0      	b.n	800537a <_svfiprintf_r+0x192>
 8005398:	ab03      	add	r3, sp, #12
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	462a      	mov	r2, r5
 800539e:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <_svfiprintf_r+0x1f0>)
 80053a0:	a904      	add	r1, sp, #16
 80053a2:	4638      	mov	r0, r7
 80053a4:	f3af 8000 	nop.w
 80053a8:	1c42      	adds	r2, r0, #1
 80053aa:	4606      	mov	r6, r0
 80053ac:	d1d6      	bne.n	800535c <_svfiprintf_r+0x174>
 80053ae:	89ab      	ldrh	r3, [r5, #12]
 80053b0:	065b      	lsls	r3, r3, #25
 80053b2:	f53f af2d 	bmi.w	8005210 <_svfiprintf_r+0x28>
 80053b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053b8:	e72c      	b.n	8005214 <_svfiprintf_r+0x2c>
 80053ba:	ab03      	add	r3, sp, #12
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	462a      	mov	r2, r5
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <_svfiprintf_r+0x1f0>)
 80053c2:	a904      	add	r1, sp, #16
 80053c4:	4638      	mov	r0, r7
 80053c6:	f000 f879 	bl	80054bc <_printf_i>
 80053ca:	e7ed      	b.n	80053a8 <_svfiprintf_r+0x1c0>
 80053cc:	08005d58 	.word	0x08005d58
 80053d0:	08005d62 	.word	0x08005d62
 80053d4:	00000000 	.word	0x00000000
 80053d8:	08005131 	.word	0x08005131
 80053dc:	08005d5e 	.word	0x08005d5e

080053e0 <_printf_common>:
 80053e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	4616      	mov	r6, r2
 80053e6:	4698      	mov	r8, r3
 80053e8:	688a      	ldr	r2, [r1, #8]
 80053ea:	690b      	ldr	r3, [r1, #16]
 80053ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053f0:	4293      	cmp	r3, r2
 80053f2:	bfb8      	it	lt
 80053f4:	4613      	movlt	r3, r2
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053fc:	4607      	mov	r7, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	b10a      	cbz	r2, 8005406 <_printf_common+0x26>
 8005402:	3301      	adds	r3, #1
 8005404:	6033      	str	r3, [r6, #0]
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	0699      	lsls	r1, r3, #26
 800540a:	bf42      	ittt	mi
 800540c:	6833      	ldrmi	r3, [r6, #0]
 800540e:	3302      	addmi	r3, #2
 8005410:	6033      	strmi	r3, [r6, #0]
 8005412:	6825      	ldr	r5, [r4, #0]
 8005414:	f015 0506 	ands.w	r5, r5, #6
 8005418:	d106      	bne.n	8005428 <_printf_common+0x48>
 800541a:	f104 0a19 	add.w	sl, r4, #25
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	6832      	ldr	r2, [r6, #0]
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	42ab      	cmp	r3, r5
 8005426:	dc26      	bgt.n	8005476 <_printf_common+0x96>
 8005428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	3b00      	subs	r3, #0
 8005430:	bf18      	it	ne
 8005432:	2301      	movne	r3, #1
 8005434:	0692      	lsls	r2, r2, #26
 8005436:	d42b      	bmi.n	8005490 <_printf_common+0xb0>
 8005438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800543c:	4641      	mov	r1, r8
 800543e:	4638      	mov	r0, r7
 8005440:	47c8      	blx	r9
 8005442:	3001      	adds	r0, #1
 8005444:	d01e      	beq.n	8005484 <_printf_common+0xa4>
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	6922      	ldr	r2, [r4, #16]
 800544a:	f003 0306 	and.w	r3, r3, #6
 800544e:	2b04      	cmp	r3, #4
 8005450:	bf02      	ittt	eq
 8005452:	68e5      	ldreq	r5, [r4, #12]
 8005454:	6833      	ldreq	r3, [r6, #0]
 8005456:	1aed      	subeq	r5, r5, r3
 8005458:	68a3      	ldr	r3, [r4, #8]
 800545a:	bf0c      	ite	eq
 800545c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005460:	2500      	movne	r5, #0
 8005462:	4293      	cmp	r3, r2
 8005464:	bfc4      	itt	gt
 8005466:	1a9b      	subgt	r3, r3, r2
 8005468:	18ed      	addgt	r5, r5, r3
 800546a:	2600      	movs	r6, #0
 800546c:	341a      	adds	r4, #26
 800546e:	42b5      	cmp	r5, r6
 8005470:	d11a      	bne.n	80054a8 <_printf_common+0xc8>
 8005472:	2000      	movs	r0, #0
 8005474:	e008      	b.n	8005488 <_printf_common+0xa8>
 8005476:	2301      	movs	r3, #1
 8005478:	4652      	mov	r2, sl
 800547a:	4641      	mov	r1, r8
 800547c:	4638      	mov	r0, r7
 800547e:	47c8      	blx	r9
 8005480:	3001      	adds	r0, #1
 8005482:	d103      	bne.n	800548c <_printf_common+0xac>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548c:	3501      	adds	r5, #1
 800548e:	e7c6      	b.n	800541e <_printf_common+0x3e>
 8005490:	18e1      	adds	r1, r4, r3
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	2030      	movs	r0, #48	@ 0x30
 8005496:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800549a:	4422      	add	r2, r4
 800549c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054a4:	3302      	adds	r3, #2
 80054a6:	e7c7      	b.n	8005438 <_printf_common+0x58>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4622      	mov	r2, r4
 80054ac:	4641      	mov	r1, r8
 80054ae:	4638      	mov	r0, r7
 80054b0:	47c8      	blx	r9
 80054b2:	3001      	adds	r0, #1
 80054b4:	d0e6      	beq.n	8005484 <_printf_common+0xa4>
 80054b6:	3601      	adds	r6, #1
 80054b8:	e7d9      	b.n	800546e <_printf_common+0x8e>
	...

080054bc <_printf_i>:
 80054bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	7e0f      	ldrb	r7, [r1, #24]
 80054c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054c4:	2f78      	cmp	r7, #120	@ 0x78
 80054c6:	4691      	mov	r9, r2
 80054c8:	4680      	mov	r8, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	469a      	mov	sl, r3
 80054ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054d2:	d807      	bhi.n	80054e4 <_printf_i+0x28>
 80054d4:	2f62      	cmp	r7, #98	@ 0x62
 80054d6:	d80a      	bhi.n	80054ee <_printf_i+0x32>
 80054d8:	2f00      	cmp	r7, #0
 80054da:	f000 80d1 	beq.w	8005680 <_printf_i+0x1c4>
 80054de:	2f58      	cmp	r7, #88	@ 0x58
 80054e0:	f000 80b8 	beq.w	8005654 <_printf_i+0x198>
 80054e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054ec:	e03a      	b.n	8005564 <_printf_i+0xa8>
 80054ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054f2:	2b15      	cmp	r3, #21
 80054f4:	d8f6      	bhi.n	80054e4 <_printf_i+0x28>
 80054f6:	a101      	add	r1, pc, #4	@ (adr r1, 80054fc <_printf_i+0x40>)
 80054f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005569 	.word	0x08005569
 8005504:	080054e5 	.word	0x080054e5
 8005508:	080054e5 	.word	0x080054e5
 800550c:	080054e5 	.word	0x080054e5
 8005510:	080054e5 	.word	0x080054e5
 8005514:	08005569 	.word	0x08005569
 8005518:	080054e5 	.word	0x080054e5
 800551c:	080054e5 	.word	0x080054e5
 8005520:	080054e5 	.word	0x080054e5
 8005524:	080054e5 	.word	0x080054e5
 8005528:	08005667 	.word	0x08005667
 800552c:	08005593 	.word	0x08005593
 8005530:	08005621 	.word	0x08005621
 8005534:	080054e5 	.word	0x080054e5
 8005538:	080054e5 	.word	0x080054e5
 800553c:	08005689 	.word	0x08005689
 8005540:	080054e5 	.word	0x080054e5
 8005544:	08005593 	.word	0x08005593
 8005548:	080054e5 	.word	0x080054e5
 800554c:	080054e5 	.word	0x080054e5
 8005550:	08005629 	.word	0x08005629
 8005554:	6833      	ldr	r3, [r6, #0]
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6032      	str	r2, [r6, #0]
 800555c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005560:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005564:	2301      	movs	r3, #1
 8005566:	e09c      	b.n	80056a2 <_printf_i+0x1e6>
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	6820      	ldr	r0, [r4, #0]
 800556c:	1d19      	adds	r1, r3, #4
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	0606      	lsls	r6, r0, #24
 8005572:	d501      	bpl.n	8005578 <_printf_i+0xbc>
 8005574:	681d      	ldr	r5, [r3, #0]
 8005576:	e003      	b.n	8005580 <_printf_i+0xc4>
 8005578:	0645      	lsls	r5, r0, #25
 800557a:	d5fb      	bpl.n	8005574 <_printf_i+0xb8>
 800557c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005580:	2d00      	cmp	r5, #0
 8005582:	da03      	bge.n	800558c <_printf_i+0xd0>
 8005584:	232d      	movs	r3, #45	@ 0x2d
 8005586:	426d      	negs	r5, r5
 8005588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800558c:	4858      	ldr	r0, [pc, #352]	@ (80056f0 <_printf_i+0x234>)
 800558e:	230a      	movs	r3, #10
 8005590:	e011      	b.n	80055b6 <_printf_i+0xfa>
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	0608      	lsls	r0, r1, #24
 8005598:	f853 5b04 	ldr.w	r5, [r3], #4
 800559c:	d402      	bmi.n	80055a4 <_printf_i+0xe8>
 800559e:	0649      	lsls	r1, r1, #25
 80055a0:	bf48      	it	mi
 80055a2:	b2ad      	uxthmi	r5, r5
 80055a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055a6:	4852      	ldr	r0, [pc, #328]	@ (80056f0 <_printf_i+0x234>)
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	bf14      	ite	ne
 80055ac:	230a      	movne	r3, #10
 80055ae:	2308      	moveq	r3, #8
 80055b0:	2100      	movs	r1, #0
 80055b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055b6:	6866      	ldr	r6, [r4, #4]
 80055b8:	60a6      	str	r6, [r4, #8]
 80055ba:	2e00      	cmp	r6, #0
 80055bc:	db05      	blt.n	80055ca <_printf_i+0x10e>
 80055be:	6821      	ldr	r1, [r4, #0]
 80055c0:	432e      	orrs	r6, r5
 80055c2:	f021 0104 	bic.w	r1, r1, #4
 80055c6:	6021      	str	r1, [r4, #0]
 80055c8:	d04b      	beq.n	8005662 <_printf_i+0x1a6>
 80055ca:	4616      	mov	r6, r2
 80055cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80055d0:	fb03 5711 	mls	r7, r3, r1, r5
 80055d4:	5dc7      	ldrb	r7, [r0, r7]
 80055d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055da:	462f      	mov	r7, r5
 80055dc:	42bb      	cmp	r3, r7
 80055de:	460d      	mov	r5, r1
 80055e0:	d9f4      	bls.n	80055cc <_printf_i+0x110>
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d10b      	bne.n	80055fe <_printf_i+0x142>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	07df      	lsls	r7, r3, #31
 80055ea:	d508      	bpl.n	80055fe <_printf_i+0x142>
 80055ec:	6923      	ldr	r3, [r4, #16]
 80055ee:	6861      	ldr	r1, [r4, #4]
 80055f0:	4299      	cmp	r1, r3
 80055f2:	bfde      	ittt	le
 80055f4:	2330      	movle	r3, #48	@ 0x30
 80055f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055fe:	1b92      	subs	r2, r2, r6
 8005600:	6122      	str	r2, [r4, #16]
 8005602:	f8cd a000 	str.w	sl, [sp]
 8005606:	464b      	mov	r3, r9
 8005608:	aa03      	add	r2, sp, #12
 800560a:	4621      	mov	r1, r4
 800560c:	4640      	mov	r0, r8
 800560e:	f7ff fee7 	bl	80053e0 <_printf_common>
 8005612:	3001      	adds	r0, #1
 8005614:	d14a      	bne.n	80056ac <_printf_i+0x1f0>
 8005616:	f04f 30ff 	mov.w	r0, #4294967295
 800561a:	b004      	add	sp, #16
 800561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	f043 0320 	orr.w	r3, r3, #32
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	4832      	ldr	r0, [pc, #200]	@ (80056f4 <_printf_i+0x238>)
 800562a:	2778      	movs	r7, #120	@ 0x78
 800562c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	6831      	ldr	r1, [r6, #0]
 8005634:	061f      	lsls	r7, r3, #24
 8005636:	f851 5b04 	ldr.w	r5, [r1], #4
 800563a:	d402      	bmi.n	8005642 <_printf_i+0x186>
 800563c:	065f      	lsls	r7, r3, #25
 800563e:	bf48      	it	mi
 8005640:	b2ad      	uxthmi	r5, r5
 8005642:	6031      	str	r1, [r6, #0]
 8005644:	07d9      	lsls	r1, r3, #31
 8005646:	bf44      	itt	mi
 8005648:	f043 0320 	orrmi.w	r3, r3, #32
 800564c:	6023      	strmi	r3, [r4, #0]
 800564e:	b11d      	cbz	r5, 8005658 <_printf_i+0x19c>
 8005650:	2310      	movs	r3, #16
 8005652:	e7ad      	b.n	80055b0 <_printf_i+0xf4>
 8005654:	4826      	ldr	r0, [pc, #152]	@ (80056f0 <_printf_i+0x234>)
 8005656:	e7e9      	b.n	800562c <_printf_i+0x170>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	f023 0320 	bic.w	r3, r3, #32
 800565e:	6023      	str	r3, [r4, #0]
 8005660:	e7f6      	b.n	8005650 <_printf_i+0x194>
 8005662:	4616      	mov	r6, r2
 8005664:	e7bd      	b.n	80055e2 <_printf_i+0x126>
 8005666:	6833      	ldr	r3, [r6, #0]
 8005668:	6825      	ldr	r5, [r4, #0]
 800566a:	6961      	ldr	r1, [r4, #20]
 800566c:	1d18      	adds	r0, r3, #4
 800566e:	6030      	str	r0, [r6, #0]
 8005670:	062e      	lsls	r6, r5, #24
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	d501      	bpl.n	800567a <_printf_i+0x1be>
 8005676:	6019      	str	r1, [r3, #0]
 8005678:	e002      	b.n	8005680 <_printf_i+0x1c4>
 800567a:	0668      	lsls	r0, r5, #25
 800567c:	d5fb      	bpl.n	8005676 <_printf_i+0x1ba>
 800567e:	8019      	strh	r1, [r3, #0]
 8005680:	2300      	movs	r3, #0
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	4616      	mov	r6, r2
 8005686:	e7bc      	b.n	8005602 <_printf_i+0x146>
 8005688:	6833      	ldr	r3, [r6, #0]
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	6032      	str	r2, [r6, #0]
 800568e:	681e      	ldr	r6, [r3, #0]
 8005690:	6862      	ldr	r2, [r4, #4]
 8005692:	2100      	movs	r1, #0
 8005694:	4630      	mov	r0, r6
 8005696:	f7fa fdab 	bl	80001f0 <memchr>
 800569a:	b108      	cbz	r0, 80056a0 <_printf_i+0x1e4>
 800569c:	1b80      	subs	r0, r0, r6
 800569e:	6060      	str	r0, [r4, #4]
 80056a0:	6863      	ldr	r3, [r4, #4]
 80056a2:	6123      	str	r3, [r4, #16]
 80056a4:	2300      	movs	r3, #0
 80056a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056aa:	e7aa      	b.n	8005602 <_printf_i+0x146>
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	4632      	mov	r2, r6
 80056b0:	4649      	mov	r1, r9
 80056b2:	4640      	mov	r0, r8
 80056b4:	47d0      	blx	sl
 80056b6:	3001      	adds	r0, #1
 80056b8:	d0ad      	beq.n	8005616 <_printf_i+0x15a>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	079b      	lsls	r3, r3, #30
 80056be:	d413      	bmi.n	80056e8 <_printf_i+0x22c>
 80056c0:	68e0      	ldr	r0, [r4, #12]
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	4298      	cmp	r0, r3
 80056c6:	bfb8      	it	lt
 80056c8:	4618      	movlt	r0, r3
 80056ca:	e7a6      	b.n	800561a <_printf_i+0x15e>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4632      	mov	r2, r6
 80056d0:	4649      	mov	r1, r9
 80056d2:	4640      	mov	r0, r8
 80056d4:	47d0      	blx	sl
 80056d6:	3001      	adds	r0, #1
 80056d8:	d09d      	beq.n	8005616 <_printf_i+0x15a>
 80056da:	3501      	adds	r5, #1
 80056dc:	68e3      	ldr	r3, [r4, #12]
 80056de:	9903      	ldr	r1, [sp, #12]
 80056e0:	1a5b      	subs	r3, r3, r1
 80056e2:	42ab      	cmp	r3, r5
 80056e4:	dcf2      	bgt.n	80056cc <_printf_i+0x210>
 80056e6:	e7eb      	b.n	80056c0 <_printf_i+0x204>
 80056e8:	2500      	movs	r5, #0
 80056ea:	f104 0619 	add.w	r6, r4, #25
 80056ee:	e7f5      	b.n	80056dc <_printf_i+0x220>
 80056f0:	08005d69 	.word	0x08005d69
 80056f4:	08005d7a 	.word	0x08005d7a

080056f8 <memmove>:
 80056f8:	4288      	cmp	r0, r1
 80056fa:	b510      	push	{r4, lr}
 80056fc:	eb01 0402 	add.w	r4, r1, r2
 8005700:	d902      	bls.n	8005708 <memmove+0x10>
 8005702:	4284      	cmp	r4, r0
 8005704:	4623      	mov	r3, r4
 8005706:	d807      	bhi.n	8005718 <memmove+0x20>
 8005708:	1e43      	subs	r3, r0, #1
 800570a:	42a1      	cmp	r1, r4
 800570c:	d008      	beq.n	8005720 <memmove+0x28>
 800570e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005716:	e7f8      	b.n	800570a <memmove+0x12>
 8005718:	4402      	add	r2, r0
 800571a:	4601      	mov	r1, r0
 800571c:	428a      	cmp	r2, r1
 800571e:	d100      	bne.n	8005722 <memmove+0x2a>
 8005720:	bd10      	pop	{r4, pc}
 8005722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800572a:	e7f7      	b.n	800571c <memmove+0x24>

0800572c <_sbrk_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d06      	ldr	r5, [pc, #24]	@ (8005748 <_sbrk_r+0x1c>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fc fa7a 	bl	8001c30 <_sbrk>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_sbrk_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_sbrk_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20000338 	.word	0x20000338

0800574c <memcpy>:
 800574c:	440a      	add	r2, r1
 800574e:	4291      	cmp	r1, r2
 8005750:	f100 33ff 	add.w	r3, r0, #4294967295
 8005754:	d100      	bne.n	8005758 <memcpy+0xc>
 8005756:	4770      	bx	lr
 8005758:	b510      	push	{r4, lr}
 800575a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005762:	4291      	cmp	r1, r2
 8005764:	d1f9      	bne.n	800575a <memcpy+0xe>
 8005766:	bd10      	pop	{r4, pc}

08005768 <_realloc_r>:
 8005768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576c:	4607      	mov	r7, r0
 800576e:	4614      	mov	r4, r2
 8005770:	460d      	mov	r5, r1
 8005772:	b921      	cbnz	r1, 800577e <_realloc_r+0x16>
 8005774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	4611      	mov	r1, r2
 800577a:	f7ff bc4d 	b.w	8005018 <_malloc_r>
 800577e:	b92a      	cbnz	r2, 800578c <_realloc_r+0x24>
 8005780:	f7ff fbde 	bl	8004f40 <_free_r>
 8005784:	4625      	mov	r5, r4
 8005786:	4628      	mov	r0, r5
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	f000 f81a 	bl	80057c4 <_malloc_usable_size_r>
 8005790:	4284      	cmp	r4, r0
 8005792:	4606      	mov	r6, r0
 8005794:	d802      	bhi.n	800579c <_realloc_r+0x34>
 8005796:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800579a:	d8f4      	bhi.n	8005786 <_realloc_r+0x1e>
 800579c:	4621      	mov	r1, r4
 800579e:	4638      	mov	r0, r7
 80057a0:	f7ff fc3a 	bl	8005018 <_malloc_r>
 80057a4:	4680      	mov	r8, r0
 80057a6:	b908      	cbnz	r0, 80057ac <_realloc_r+0x44>
 80057a8:	4645      	mov	r5, r8
 80057aa:	e7ec      	b.n	8005786 <_realloc_r+0x1e>
 80057ac:	42b4      	cmp	r4, r6
 80057ae:	4622      	mov	r2, r4
 80057b0:	4629      	mov	r1, r5
 80057b2:	bf28      	it	cs
 80057b4:	4632      	movcs	r2, r6
 80057b6:	f7ff ffc9 	bl	800574c <memcpy>
 80057ba:	4629      	mov	r1, r5
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff fbbf 	bl	8004f40 <_free_r>
 80057c2:	e7f1      	b.n	80057a8 <_realloc_r+0x40>

080057c4 <_malloc_usable_size_r>:
 80057c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c8:	1f18      	subs	r0, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfbc      	itt	lt
 80057ce:	580b      	ldrlt	r3, [r1, r0]
 80057d0:	18c0      	addlt	r0, r0, r3
 80057d2:	4770      	bx	lr

080057d4 <_init>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr

080057e0 <_fini>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr
