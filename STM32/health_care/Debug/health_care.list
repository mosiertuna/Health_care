
health_care.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a6c  08006a6c  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a6c  08006a6c  00007a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a74  08006a74  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a74  08006a74  00007a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a78  08006a78  00007a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006a7c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000002e8  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011976  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e9  00000000  00000000  00019a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0001c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0b  00000000  00000000  0001d388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a72  00000000  00000000  0001e093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d85  00000000  00000000  00042b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd430  00000000  00000000  0005588a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132cba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b60  00000000  00000000  00132d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00137860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006444 	.word	0x08006444

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08006444 	.word	0x08006444

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b988 	b.w	8000930 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	468e      	mov	lr, r1
 8000640:	4604      	mov	r4, r0
 8000642:	4688      	mov	r8, r1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d14a      	bne.n	80006de <__udivmoddi4+0xa6>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d962      	bls.n	8000714 <__udivmoddi4+0xdc>
 800064e:	fab2 f682 	clz	r6, r2
 8000652:	b14e      	cbz	r6, 8000668 <__udivmoddi4+0x30>
 8000654:	f1c6 0320 	rsb	r3, r6, #32
 8000658:	fa01 f806 	lsl.w	r8, r1, r6
 800065c:	fa20 f303 	lsr.w	r3, r0, r3
 8000660:	40b7      	lsls	r7, r6
 8000662:	ea43 0808 	orr.w	r8, r3, r8
 8000666:	40b4      	lsls	r4, r6
 8000668:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800066c:	fa1f fc87 	uxth.w	ip, r7
 8000670:	fbb8 f1fe 	udiv	r1, r8, lr
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	fb0e 8811 	mls	r8, lr, r1, r8
 800067a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067e:	fb01 f20c 	mul.w	r2, r1, ip
 8000682:	429a      	cmp	r2, r3
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0x62>
 8000686:	18fb      	adds	r3, r7, r3
 8000688:	f101 30ff 	add.w	r0, r1, #4294967295
 800068c:	f080 80ea 	bcs.w	8000864 <__udivmoddi4+0x22c>
 8000690:	429a      	cmp	r2, r3
 8000692:	f240 80e7 	bls.w	8000864 <__udivmoddi4+0x22c>
 8000696:	3902      	subs	r1, #2
 8000698:	443b      	add	r3, r7
 800069a:	1a9a      	subs	r2, r3, r2
 800069c:	b2a3      	uxth	r3, r4
 800069e:	fbb2 f0fe 	udiv	r0, r2, lr
 80006a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ae:	459c      	cmp	ip, r3
 80006b0:	d909      	bls.n	80006c6 <__udivmoddi4+0x8e>
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006b8:	f080 80d6 	bcs.w	8000868 <__udivmoddi4+0x230>
 80006bc:	459c      	cmp	ip, r3
 80006be:	f240 80d3 	bls.w	8000868 <__udivmoddi4+0x230>
 80006c2:	443b      	add	r3, r7
 80006c4:	3802      	subs	r0, #2
 80006c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ca:	eba3 030c 	sub.w	r3, r3, ip
 80006ce:	2100      	movs	r1, #0
 80006d0:	b11d      	cbz	r5, 80006da <__udivmoddi4+0xa2>
 80006d2:	40f3      	lsrs	r3, r6
 80006d4:	2200      	movs	r2, #0
 80006d6:	e9c5 3200 	strd	r3, r2, [r5]
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d905      	bls.n	80006ee <__udivmoddi4+0xb6>
 80006e2:	b10d      	cbz	r5, 80006e8 <__udivmoddi4+0xb0>
 80006e4:	e9c5 0100 	strd	r0, r1, [r5]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4608      	mov	r0, r1
 80006ec:	e7f5      	b.n	80006da <__udivmoddi4+0xa2>
 80006ee:	fab3 f183 	clz	r1, r3
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d146      	bne.n	8000784 <__udivmoddi4+0x14c>
 80006f6:	4573      	cmp	r3, lr
 80006f8:	d302      	bcc.n	8000700 <__udivmoddi4+0xc8>
 80006fa:	4282      	cmp	r2, r0
 80006fc:	f200 8105 	bhi.w	800090a <__udivmoddi4+0x2d2>
 8000700:	1a84      	subs	r4, r0, r2
 8000702:	eb6e 0203 	sbc.w	r2, lr, r3
 8000706:	2001      	movs	r0, #1
 8000708:	4690      	mov	r8, r2
 800070a:	2d00      	cmp	r5, #0
 800070c:	d0e5      	beq.n	80006da <__udivmoddi4+0xa2>
 800070e:	e9c5 4800 	strd	r4, r8, [r5]
 8000712:	e7e2      	b.n	80006da <__udivmoddi4+0xa2>
 8000714:	2a00      	cmp	r2, #0
 8000716:	f000 8090 	beq.w	800083a <__udivmoddi4+0x202>
 800071a:	fab2 f682 	clz	r6, r2
 800071e:	2e00      	cmp	r6, #0
 8000720:	f040 80a4 	bne.w	800086c <__udivmoddi4+0x234>
 8000724:	1a8a      	subs	r2, r1, r2
 8000726:	0c03      	lsrs	r3, r0, #16
 8000728:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800072c:	b280      	uxth	r0, r0
 800072e:	b2bc      	uxth	r4, r7
 8000730:	2101      	movs	r1, #1
 8000732:	fbb2 fcfe 	udiv	ip, r2, lr
 8000736:	fb0e 221c 	mls	r2, lr, ip, r2
 800073a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073e:	fb04 f20c 	mul.w	r2, r4, ip
 8000742:	429a      	cmp	r2, r3
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x11e>
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	f10c 38ff 	add.w	r8, ip, #4294967295
 800074c:	d202      	bcs.n	8000754 <__udivmoddi4+0x11c>
 800074e:	429a      	cmp	r2, r3
 8000750:	f200 80e0 	bhi.w	8000914 <__udivmoddi4+0x2dc>
 8000754:	46c4      	mov	ip, r8
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	fbb3 f2fe 	udiv	r2, r3, lr
 800075c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000760:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000764:	fb02 f404 	mul.w	r4, r2, r4
 8000768:	429c      	cmp	r4, r3
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0x144>
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0x142>
 8000774:	429c      	cmp	r4, r3
 8000776:	f200 80ca 	bhi.w	800090e <__udivmoddi4+0x2d6>
 800077a:	4602      	mov	r2, r0
 800077c:	1b1b      	subs	r3, r3, r4
 800077e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000782:	e7a5      	b.n	80006d0 <__udivmoddi4+0x98>
 8000784:	f1c1 0620 	rsb	r6, r1, #32
 8000788:	408b      	lsls	r3, r1
 800078a:	fa22 f706 	lsr.w	r7, r2, r6
 800078e:	431f      	orrs	r7, r3
 8000790:	fa0e f401 	lsl.w	r4, lr, r1
 8000794:	fa20 f306 	lsr.w	r3, r0, r6
 8000798:	fa2e fe06 	lsr.w	lr, lr, r6
 800079c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007a0:	4323      	orrs	r3, r4
 80007a2:	fa00 f801 	lsl.w	r8, r0, r1
 80007a6:	fa1f fc87 	uxth.w	ip, r7
 80007aa:	fbbe f0f9 	udiv	r0, lr, r9
 80007ae:	0c1c      	lsrs	r4, r3, #16
 80007b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007bc:	45a6      	cmp	lr, r4
 80007be:	fa02 f201 	lsl.w	r2, r2, r1
 80007c2:	d909      	bls.n	80007d8 <__udivmoddi4+0x1a0>
 80007c4:	193c      	adds	r4, r7, r4
 80007c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ca:	f080 809c 	bcs.w	8000906 <__udivmoddi4+0x2ce>
 80007ce:	45a6      	cmp	lr, r4
 80007d0:	f240 8099 	bls.w	8000906 <__udivmoddi4+0x2ce>
 80007d4:	3802      	subs	r0, #2
 80007d6:	443c      	add	r4, r7
 80007d8:	eba4 040e 	sub.w	r4, r4, lr
 80007dc:	fa1f fe83 	uxth.w	lr, r3
 80007e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e4:	fb09 4413 	mls	r4, r9, r3, r4
 80007e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80007f0:	45a4      	cmp	ip, r4
 80007f2:	d908      	bls.n	8000806 <__udivmoddi4+0x1ce>
 80007f4:	193c      	adds	r4, r7, r4
 80007f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007fa:	f080 8082 	bcs.w	8000902 <__udivmoddi4+0x2ca>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d97f      	bls.n	8000902 <__udivmoddi4+0x2ca>
 8000802:	3b02      	subs	r3, #2
 8000804:	443c      	add	r4, r7
 8000806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800080a:	eba4 040c 	sub.w	r4, r4, ip
 800080e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000812:	4564      	cmp	r4, ip
 8000814:	4673      	mov	r3, lr
 8000816:	46e1      	mov	r9, ip
 8000818:	d362      	bcc.n	80008e0 <__udivmoddi4+0x2a8>
 800081a:	d05f      	beq.n	80008dc <__udivmoddi4+0x2a4>
 800081c:	b15d      	cbz	r5, 8000836 <__udivmoddi4+0x1fe>
 800081e:	ebb8 0203 	subs.w	r2, r8, r3
 8000822:	eb64 0409 	sbc.w	r4, r4, r9
 8000826:	fa04 f606 	lsl.w	r6, r4, r6
 800082a:	fa22 f301 	lsr.w	r3, r2, r1
 800082e:	431e      	orrs	r6, r3
 8000830:	40cc      	lsrs	r4, r1
 8000832:	e9c5 6400 	strd	r6, r4, [r5]
 8000836:	2100      	movs	r1, #0
 8000838:	e74f      	b.n	80006da <__udivmoddi4+0xa2>
 800083a:	fbb1 fcf2 	udiv	ip, r1, r2
 800083e:	0c01      	lsrs	r1, r0, #16
 8000840:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000844:	b280      	uxth	r0, r0
 8000846:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800084a:	463b      	mov	r3, r7
 800084c:	4638      	mov	r0, r7
 800084e:	463c      	mov	r4, r7
 8000850:	46b8      	mov	r8, r7
 8000852:	46be      	mov	lr, r7
 8000854:	2620      	movs	r6, #32
 8000856:	fbb1 f1f7 	udiv	r1, r1, r7
 800085a:	eba2 0208 	sub.w	r2, r2, r8
 800085e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000862:	e766      	b.n	8000732 <__udivmoddi4+0xfa>
 8000864:	4601      	mov	r1, r0
 8000866:	e718      	b.n	800069a <__udivmoddi4+0x62>
 8000868:	4610      	mov	r0, r2
 800086a:	e72c      	b.n	80006c6 <__udivmoddi4+0x8e>
 800086c:	f1c6 0220 	rsb	r2, r6, #32
 8000870:	fa2e f302 	lsr.w	r3, lr, r2
 8000874:	40b7      	lsls	r7, r6
 8000876:	40b1      	lsls	r1, r6
 8000878:	fa20 f202 	lsr.w	r2, r0, r2
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	430a      	orrs	r2, r1
 8000882:	fbb3 f8fe 	udiv	r8, r3, lr
 8000886:	b2bc      	uxth	r4, r7
 8000888:	fb0e 3318 	mls	r3, lr, r8, r3
 800088c:	0c11      	lsrs	r1, r2, #16
 800088e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000892:	fb08 f904 	mul.w	r9, r8, r4
 8000896:	40b0      	lsls	r0, r6
 8000898:	4589      	cmp	r9, r1
 800089a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800089e:	b280      	uxth	r0, r0
 80008a0:	d93e      	bls.n	8000920 <__udivmoddi4+0x2e8>
 80008a2:	1879      	adds	r1, r7, r1
 80008a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008a8:	d201      	bcs.n	80008ae <__udivmoddi4+0x276>
 80008aa:	4589      	cmp	r9, r1
 80008ac:	d81f      	bhi.n	80008ee <__udivmoddi4+0x2b6>
 80008ae:	eba1 0109 	sub.w	r1, r1, r9
 80008b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008b6:	fb09 f804 	mul.w	r8, r9, r4
 80008ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80008be:	b292      	uxth	r2, r2
 80008c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008c4:	4542      	cmp	r2, r8
 80008c6:	d229      	bcs.n	800091c <__udivmoddi4+0x2e4>
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ce:	d2c4      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d0:	4542      	cmp	r2, r8
 80008d2:	d2c2      	bcs.n	800085a <__udivmoddi4+0x222>
 80008d4:	f1a9 0102 	sub.w	r1, r9, #2
 80008d8:	443a      	add	r2, r7
 80008da:	e7be      	b.n	800085a <__udivmoddi4+0x222>
 80008dc:	45f0      	cmp	r8, lr
 80008de:	d29d      	bcs.n	800081c <__udivmoddi4+0x1e4>
 80008e0:	ebbe 0302 	subs.w	r3, lr, r2
 80008e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008e8:	3801      	subs	r0, #1
 80008ea:	46e1      	mov	r9, ip
 80008ec:	e796      	b.n	800081c <__udivmoddi4+0x1e4>
 80008ee:	eba7 0909 	sub.w	r9, r7, r9
 80008f2:	4449      	add	r1, r9
 80008f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fc:	fb09 f804 	mul.w	r8, r9, r4
 8000900:	e7db      	b.n	80008ba <__udivmoddi4+0x282>
 8000902:	4673      	mov	r3, lr
 8000904:	e77f      	b.n	8000806 <__udivmoddi4+0x1ce>
 8000906:	4650      	mov	r0, sl
 8000908:	e766      	b.n	80007d8 <__udivmoddi4+0x1a0>
 800090a:	4608      	mov	r0, r1
 800090c:	e6fd      	b.n	800070a <__udivmoddi4+0xd2>
 800090e:	443b      	add	r3, r7
 8000910:	3a02      	subs	r2, #2
 8000912:	e733      	b.n	800077c <__udivmoddi4+0x144>
 8000914:	f1ac 0c02 	sub.w	ip, ip, #2
 8000918:	443b      	add	r3, r7
 800091a:	e71c      	b.n	8000756 <__udivmoddi4+0x11e>
 800091c:	4649      	mov	r1, r9
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x222>
 8000920:	eba1 0109 	sub.w	r1, r1, r9
 8000924:	46c4      	mov	ip, r8
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fb09 f804 	mul.w	r8, r9, r4
 800092e:	e7c4      	b.n	80008ba <__udivmoddi4+0x282>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <microDelay>:
extern TIM_HandleTypeDef htim2;

/**
 * @brief Microsecond delay using timer
 */
void microDelay(uint16_t delay) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <microDelay+0x30>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8000946:	bf00      	nop
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <microDelay+0x30>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	429a      	cmp	r2, r3
 8000952:	d3f9      	bcc.n	8000948 <microDelay+0x14>
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200000e0 	.word	0x200000e0

08000968 <getHX711>:

/**
 * @brief Get raw data from HX711 using your algorithm
 */
int32_t getHX711(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
    uint32_t data = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
    uint32_t startTime = HAL_GetTick();
 8000972:	f001 fb13 	bl	8001f9c <HAL_GetTick>
 8000976:	6078      	str	r0, [r7, #4]
    
    // Wait for HX711 to be ready with timeout
    while(HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET) {
 8000978:	e008      	b.n	800098c <getHX711+0x24>
        if(HAL_GetTick() - startTime > 200)
 800097a:	f001 fb0f 	bl	8001f9c <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2bc8      	cmp	r3, #200	@ 0xc8
 8000986:	d901      	bls.n	800098c <getHX711+0x24>
            return 0;
 8000988:	2300      	movs	r3, #0
 800098a:	e04b      	b.n	8000a24 <getHX711+0xbc>
    while(HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET) {
 800098c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000990:	4826      	ldr	r0, [pc, #152]	@ (8000a2c <getHX711+0xc4>)
 8000992:	f001 fe8f 	bl	80026b4 <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d0ee      	beq.n	800097a <getHX711+0x12>
    }
    
    // Read 24 bits
    for(int8_t len = 0; len < 24; len++) {
 800099c:	2300      	movs	r3, #0
 800099e:	72fb      	strb	r3, [r7, #11]
 80009a0:	e025      	b.n	80009ee <getHX711+0x86>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a8:	4820      	ldr	r0, [pc, #128]	@ (8000a2c <getHX711+0xc4>)
 80009aa:	f001 fe9b 	bl	80026e4 <HAL_GPIO_WritePin>
        microDelay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff ffc0 	bl	8000934 <microDelay>
        data = data << 1;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c0:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <getHX711+0xc4>)
 80009c2:	f001 fe8f 	bl	80026e4 <HAL_GPIO_WritePin>
        microDelay(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f7ff ffb4 	bl	8000934 <microDelay>
        if(HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 80009cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009d0:	4816      	ldr	r0, [pc, #88]	@ (8000a2c <getHX711+0xc4>)
 80009d2:	f001 fe6f 	bl	80026b4 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d102      	bne.n	80009e2 <getHX711+0x7a>
            data++;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
    for(int8_t len = 0; len < 24; len++) {
 80009e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	3301      	adds	r3, #1
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	72fb      	strb	r3, [r7, #11]
 80009ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009f2:	2b17      	cmp	r3, #23
 80009f4:	ddd5      	ble.n	80009a2 <getHX711+0x3a>
    }
    
    data = data ^ 0x800000;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80009fc:	60fb      	str	r3, [r7, #12]
    
    // Extra pulse for next reading
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a04:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <getHX711+0xc4>)
 8000a06:	f001 fe6d 	bl	80026e4 <HAL_GPIO_WritePin>
    microDelay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff ff92 	bl	8000934 <microDelay>
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <getHX711+0xc4>)
 8000a18:	f001 fe64 	bl	80026e4 <HAL_GPIO_WritePin>
    microDelay(1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff ff89 	bl	8000934 <microDelay>
    
    return data;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40020400 	.word	0x40020400

08000a30 <weigh>:

/**
 * @brief Weigh function using your algorithm
 */
int weigh() {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
    int32_t total = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    int32_t samples = 50;
 8000a3a:	2332      	movs	r3, #50	@ 0x32
 8000a3c:	617b      	str	r3, [r7, #20]
    int milligram;
    float coefficient;
    
    for(uint16_t i = 0; i < samples; i++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	837b      	strh	r3, [r7, #26]
 8000a42:	e00c      	b.n	8000a5e <weigh+0x2e>
        int32_t reading = getHX711();
 8000a44:	f7ff ff90 	bl	8000968 <getHX711>
 8000a48:	6078      	str	r0, [r7, #4]
        if (reading != 0) {  // Only add valid readings
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <weigh+0x28>
            total += reading;
 8000a50:	69fa      	ldr	r2, [r7, #28]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	61fb      	str	r3, [r7, #28]
    for(uint16_t i = 0; i < samples; i++) {
 8000a58:	8b7b      	ldrh	r3, [r7, #26]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	837b      	strh	r3, [r7, #26]
 8000a5e:	8b7b      	ldrh	r3, [r7, #26]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	dcee      	bgt.n	8000a44 <weigh+0x14>
        }
    }
    
    int32_t average = (int32_t)(total / samples);
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a6e:	613b      	str	r3, [r7, #16]
    coefficient = knownOriginal / knownHX711;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <weigh+0x80>)
 8000a72:	edd3 6a00 	vldr	s13, [r3]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <weigh+0x84>)
 8000a78:	ed93 7a00 	vldr	s14, [r3]
 8000a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a80:	edc7 7a03 	vstr	s15, [r7, #12]
    milligram = (int)(average - tare) * coefficient;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <weigh+0x88>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa0:	ee17 3a90 	vmov	r3, s15
 8000aa4:	60bb      	str	r3, [r7, #8]
    
    return milligram;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000004 	.word	0x20000004
 8000ab8:	20000084 	.word	0x20000084

08000abc <HX711_Init>:

/**
 * @brief Initialize HX711
 */
void HX711_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    // Set SCK low
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac6:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <HX711_Init+0x1c>)
 8000ac8:	f001 fe0c 	bl	80026e4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000acc:	2064      	movs	r0, #100	@ 0x64
 8000ace:	f001 fa71 	bl	8001fb4 <HAL_Delay>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40020400 	.word	0x40020400

08000adc <HX711_IsReady>:

/**
 * @brief Check if HX711 is ready for reading
 */
uint8_t HX711_IsReady(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_RESET);
 8000ae0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <HX711_IsReady+0x20>)
 8000ae6:	f001 fde5 	bl	80026b4 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40020400 	.word	0x40020400

08000b00 <HX711_Tare_New>:

/**
 * @brief Tare function using your algorithm
 */
void HX711_Tare_New(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
    int32_t total = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
    int32_t samples = 10;
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	607b      	str	r3, [r7, #4]
    
    for(uint16_t i = 0; i < samples; i++) {
 8000b0e:	2300      	movs	r3, #0
 8000b10:	817b      	strh	r3, [r7, #10]
 8000b12:	e00f      	b.n	8000b34 <HX711_Tare_New+0x34>
        int32_t reading = getHX711();
 8000b14:	f7ff ff28 	bl	8000968 <getHX711>
 8000b18:	6038      	str	r0, [r7, #0]
        if (reading != 0) {
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HX711_Tare_New+0x28>
            total += reading;
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
        }
        HAL_Delay(50);
 8000b28:	2032      	movs	r0, #50	@ 0x32
 8000b2a:	f001 fa43 	bl	8001fb4 <HAL_Delay>
    for(uint16_t i = 0; i < samples; i++) {
 8000b2e:	897b      	ldrh	r3, [r7, #10]
 8000b30:	3301      	adds	r3, #1
 8000b32:	817b      	strh	r3, [r7, #10]
 8000b34:	897b      	ldrh	r3, [r7, #10]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dceb      	bgt.n	8000b14 <HX711_Tare_New+0x14>
    }
    
    tare = total / samples;
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HX711_Tare_New+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000084 	.word	0x20000084

08000b58 <HX711_SetCalibration>:

/**
 * @brief Set calibration values
 */
void HX711_SetCalibration(float known_weight_mg, float hx711_reading) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b62:	edc7 0a00 	vstr	s1, [r7]
    knownOriginal = known_weight_mg;
 8000b66:	4a06      	ldr	r2, [pc, #24]	@ (8000b80 <HX711_SetCalibration+0x28>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
    knownHX711 = hx711_reading;
 8000b6c:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <HX711_SetCalibration+0x2c>)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	6013      	str	r3, [r2, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000004 	.word	0x20000004

08000b88 <HX711_GetTare>:

/**
 * @brief Get current tare value
 */
uint32_t HX711_GetTare(void) {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
    return tare;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HX711_GetTare+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000084 	.word	0x20000084

08000ba0 <HX711_ReadRaw>:
    int weight_mg = weigh();
    return (float)weight_mg / 1000.0f; // Convert mg to grams
}

// Legacy functions for compatibility
uint32_t HX711_ReadRaw(uint8_t channel) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    (void)channel; // Suppress unused parameter warning
    return (uint32_t)getHX711();
 8000baa:	f7ff fedd 	bl	8000968 <getHX711>
 8000bae:	4603      	mov	r3, r0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <System_Error_Handler>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
__attribute__((unused)) static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void System_Error_Handler(const char* file, int line, const char* func) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
#if ENABLE_DEBUG_UART
        char error_msg[256];
        snprintf(error_msg, sizeof(error_msg), "Error in %s:%d (%s)\r\n", file, line, func);
        Debug_Printf(error_msg);
#endif
        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // Toggle LED to indicate error
 8000bc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc8:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <System_Error_Handler+0x20>)
 8000bca:	f001 fda4 	bl	8002716 <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 8000bce:	20c8      	movs	r0, #200	@ 0xc8
 8000bd0:	f001 f9f0 	bl	8001fb4 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13); // Toggle LED to indicate error
 8000bd4:	bf00      	nop
 8000bd6:	e7f5      	b.n	8000bc4 <System_Error_Handler+0xc>
 8000bd8:	40021800 	.word	0x40021800

08000bdc <Debug_Printf>:
}
#else
/**
 * @brief Empty debug function when debug is disabled
 */
void Debug_Printf(const char* format, ...) {
 8000bdc:	b40f      	push	{r0, r1, r2, r3}
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
    (void)format;  // Suppress unused parameter warning
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	b004      	add	sp, #16
 8000bec:	4770      	bx	lr
	...

08000bf0 <System_Init>:
#endif

/**
 * @brief Initialize all modules
 */
void System_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0c6      	sub	sp, #280	@ 0x118
 8000bf4:	af02      	add	r7, sp, #8
    Debug_Printf("Healthcare RFID System Starting...\r\n");
 8000bf6:	4867      	ldr	r0, [pc, #412]	@ (8000d94 <System_Init+0x1a4>)
 8000bf8:	f7ff fff0 	bl	8000bdc <Debug_Printf>
    
    // Initialize RC522 RFID module
    RC522_Init();
 8000bfc:	f000 fc60 	bl	80014c0 <RC522_Init>
    Debug_Printf("RC522 RFID initialized\r\n");
 8000c00:	4865      	ldr	r0, [pc, #404]	@ (8000d98 <System_Init+0x1a8>)
 8000c02:	f7ff ffeb 	bl	8000bdc <Debug_Printf>
    
    // Initialize HX711 weight sensor
    HX711_Init();
 8000c06:	f7ff ff59 	bl	8000abc <HX711_Init>
    Debug_Printf("HX711 weight sensor initialized\r\n");
 8000c0a:	4864      	ldr	r0, [pc, #400]	@ (8000d9c <System_Init+0x1ac>)
 8000c0c:	f7ff ffe6 	bl	8000bdc <Debug_Printf>
    
    // Start timer for microsecond delays
    HAL_TIM_Base_Start(&htim2);
 8000c10:	4863      	ldr	r0, [pc, #396]	@ (8000da0 <System_Init+0x1b0>)
 8000c12:	f003 f803 	bl	8003c1c <HAL_TIM_Base_Start>
    Debug_Printf("Timer2 started for microsecond delays\r\n");
 8000c16:	4863      	ldr	r0, [pc, #396]	@ (8000da4 <System_Init+0x1b4>)
 8000c18:	f7ff ffe0 	bl	8000bdc <Debug_Printf>
    
    // Initialize Simple Protocol
    SimpleProtocol_Init();
 8000c1c:	f000 ff5c 	bl	8001ad8 <SimpleProtocol_Init>
    Debug_Printf("Simple Protocol initialized\r\n");
 8000c20:	4861      	ldr	r0, [pc, #388]	@ (8000da8 <System_Init+0x1b8>)
 8000c22:	f7ff ffdb 	bl	8000bdc <Debug_Printf>
    
    // Wait for system stabilization
    Debug_Printf("System stabilizing...\r\n");
 8000c26:	4861      	ldr	r0, [pc, #388]	@ (8000dac <System_Init+0x1bc>)
 8000c28:	f7ff ffd8 	bl	8000bdc <Debug_Printf>
    HAL_Delay(SYSTEM_INIT_DELAY_MS);
 8000c2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c30:	f001 f9c0 	bl	8001fb4 <HAL_Delay>
    
    // Tare the scale using new algorithm
    Debug_Printf("Taring scale with new algorithm...\r\n");
 8000c34:	485e      	ldr	r0, [pc, #376]	@ (8000db0 <System_Init+0x1c0>)
 8000c36:	f7ff ffd1 	bl	8000bdc <Debug_Printf>
    HX711_Tare_New();
 8000c3a:	f7ff ff61 	bl	8000b00 <HX711_Tare_New>
    
    // Debug: Check tare result
    uint32_t tare_value = HX711_GetTare();
 8000c3e:	f7ff ffa3 	bl	8000b88 <HX711_GetTare>
 8000c42:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    Debug_Printf("Tare completed. Tare value: %lu\r\n", tare_value);
 8000c46:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8000c4a:	485a      	ldr	r0, [pc, #360]	@ (8000db4 <System_Init+0x1c4>)
 8000c4c:	f7ff ffc6 	bl	8000bdc <Debug_Printf>
    
    // Set default calibration (should be adjusted with real calibration)
    HX711_SetCalibration(1000.0f, 1.0f); // 1000mg for 1 unit difference
 8000c50:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8000c54:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8000db8 <System_Init+0x1c8>
 8000c58:	f7ff ff7e 	bl	8000b58 <HX711_SetCalibration>
    Debug_Printf("Default calibration set: 1000mg = 1 unit\r\n");
 8000c5c:	4857      	ldr	r0, [pc, #348]	@ (8000dbc <System_Init+0x1cc>)
 8000c5e:	f7ff ffbd 	bl	8000bdc <Debug_Printf>
    
    // Test weight reading
    Debug_Printf("Testing weight reading...\r\n");
 8000c62:	4857      	ldr	r0, [pc, #348]	@ (8000dc0 <System_Init+0x1d0>)
 8000c64:	f7ff ffba 	bl	8000bdc <Debug_Printf>
    int test_weight_mg = weigh();
 8000c68:	f7ff fee2 	bl	8000a30 <weigh>
 8000c6c:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    float test_weight_g = (float)test_weight_mg / 1000.0f;
 8000c70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c7c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8000db8 <System_Init+0x1c8>
 8000c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c84:	edc7 7a41 	vstr	s15, [r7, #260]	@ 0x104
    Debug_Printf("Current weight: %dmg (%.1fg)\r\n", test_weight_mg, test_weight_g);
 8000c88:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8000c8c:	f7ff fc64 	bl	8000558 <__aeabi_f2d>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8000c98:	484a      	ldr	r0, [pc, #296]	@ (8000dc4 <System_Init+0x1d4>)
 8000c9a:	f7ff ff9f 	bl	8000bdc <Debug_Printf>
    
    // Debug: Verify scale was set correctly
    char scale_verify[100];
    snprintf(scale_verify, sizeof(scale_verify), "Verified scale: %.3f\r\n", hx711_scale); // @suppress("Float formatting support")
 8000c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc8 <System_Init+0x1d8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc58 	bl	8000558 <__aeabi_f2d>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8000cb0:	e9cd 2300 	strd	r2, r3, [sp]
 8000cb4:	4a45      	ldr	r2, [pc, #276]	@ (8000dcc <System_Init+0x1dc>)
 8000cb6:	2164      	movs	r1, #100	@ 0x64
 8000cb8:	f004 ff00 	bl	8005abc <sniprintf>
    Debug_Printf(scale_verify);
 8000cbc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff8b 	bl	8000bdc <Debug_Printf>
    
    // Force fix if scale is still invalid
    if (hx711_scale == 0.0f || hx711_scale != hx711_scale) {
 8000cc6:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <System_Init+0x1d8>)
 8000cc8:	edd3 7a00 	vldr	s15, [r3]
 8000ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd4:	d00a      	beq.n	8000cec <System_Init+0xfc>
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc8 <System_Init+0x1d8>)
 8000cd8:	ed93 7a00 	vldr	s14, [r3]
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <System_Init+0x1d8>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	eeb4 7a67 	vcmp.f32	s14, s15
 8000ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cea:	d018      	beq.n	8000d1e <System_Init+0x12e>
        Debug_Printf("ERROR: Scale still invalid after set! Force fixing...\r\n");
 8000cec:	4838      	ldr	r0, [pc, #224]	@ (8000dd0 <System_Init+0x1e0>)
 8000cee:	f7ff ff75 	bl	8000bdc <Debug_Printf>
        hx711_scale = 420.0f; // Force assignment with known value
 8000cf2:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <System_Init+0x1d8>)
 8000cf4:	4a37      	ldr	r2, [pc, #220]	@ (8000dd4 <System_Init+0x1e4>)
 8000cf6:	601a      	str	r2, [r3, #0]
        char force_fix[100];
        snprintf(force_fix, sizeof(force_fix), "Force fixed scale to: %.3f\r\n", hx711_scale); // @suppress("Float formatting support")
 8000cf8:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <System_Init+0x1d8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc2b 	bl	8000558 <__aeabi_f2d>
 8000d02:	4602      	mov	r2, r0
 8000d04:	460b      	mov	r3, r1
 8000d06:	1d38      	adds	r0, r7, #4
 8000d08:	e9cd 2300 	strd	r2, r3, [sp]
 8000d0c:	4a32      	ldr	r2, [pc, #200]	@ (8000dd8 <System_Init+0x1e8>)
 8000d0e:	2164      	movs	r1, #100	@ 0x64
 8000d10:	f004 fed4 	bl	8005abc <sniprintf>
        Debug_Printf(force_fix);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff60 	bl	8000bdc <Debug_Printf>
    if (hx711_scale == 0.0f || hx711_scale != hx711_scale) {
 8000d1c:	e002      	b.n	8000d24 <System_Init+0x134>
    } else {
        Debug_Printf("Scale appears to be set correctly.\r\n");
 8000d1e:	482f      	ldr	r0, [pc, #188]	@ (8000ddc <System_Init+0x1ec>)
 8000d20:	f7ff ff5c 	bl	8000bdc <Debug_Printf>
    }
    
    // Test HX711 immediately after init
    if (HX711_IsReady()) {
 8000d24:	f7ff feda 	bl	8000adc <HX711_IsReady>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d023      	beq.n	8000d76 <System_Init+0x186>
        uint32_t test_raw = HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff ff36 	bl	8000ba0 <HX711_ReadRaw>
 8000d34:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
        char test_result[150];
        snprintf(test_result, sizeof(test_result), "HX711 Test - Raw: %lu (0x%08lX)\r\n", test_raw, test_raw);
 8000d38:	1d38      	adds	r0, r7, #4
 8000d3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d44:	4a26      	ldr	r2, [pc, #152]	@ (8000de0 <System_Init+0x1f0>)
 8000d46:	2196      	movs	r1, #150	@ 0x96
 8000d48:	f004 feb8 	bl	8005abc <sniprintf>
        Debug_Printf(test_result);
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff44 	bl	8000bdc <Debug_Printf>
        
        if (test_raw == 0xFFFFFFFF || test_raw == 0x00000000) {
 8000d54:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d003      	beq.n	8000d66 <System_Init+0x176>
 8000d5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <System_Init+0x17e>
            Debug_Printf("WARNING: HX711 returning invalid data!\r\n");
 8000d66:	481f      	ldr	r0, [pc, #124]	@ (8000de4 <System_Init+0x1f4>)
 8000d68:	f7ff ff38 	bl	8000bdc <Debug_Printf>
 8000d6c:	e006      	b.n	8000d7c <System_Init+0x18c>
        } else {
            Debug_Printf("HX711 seems to be working.\r\n");
 8000d6e:	481e      	ldr	r0, [pc, #120]	@ (8000de8 <System_Init+0x1f8>)
 8000d70:	f7ff ff34 	bl	8000bdc <Debug_Printf>
 8000d74:	e002      	b.n	8000d7c <System_Init+0x18c>
        }
    } else {
        Debug_Printf("WARNING: HX711 not ready after init!\r\n");
 8000d76:	481d      	ldr	r0, [pc, #116]	@ (8000dec <System_Init+0x1fc>)
 8000d78:	f7ff ff30 	bl	8000bdc <Debug_Printf>
    // Initialize status LEDs
    Status_LED_Control(2, 1); // System ready LED ON
    Debug_Printf("Status LEDs initialized\r\n");
#endif
    
    system_ready = 1;
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000df0 <System_Init+0x200>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
    Debug_Printf("System ready!\r\n");
 8000d82:	481c      	ldr	r0, [pc, #112]	@ (8000df4 <System_Init+0x204>)
 8000d84:	f7ff ff2a 	bl	8000bdc <Debug_Printf>
}
 8000d88:	bf00      	nop
 8000d8a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	0800645c 	.word	0x0800645c
 8000d98:	08006484 	.word	0x08006484
 8000d9c:	080064a0 	.word	0x080064a0
 8000da0:	200000e0 	.word	0x200000e0
 8000da4:	080064c4 	.word	0x080064c4
 8000da8:	080064ec 	.word	0x080064ec
 8000dac:	0800650c 	.word	0x0800650c
 8000db0:	08006524 	.word	0x08006524
 8000db4:	0800654c 	.word	0x0800654c
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	08006570 	.word	0x08006570
 8000dc0:	0800659c 	.word	0x0800659c
 8000dc4:	080065b8 	.word	0x080065b8
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	080065d8 	.word	0x080065d8
 8000dd0:	080065f0 	.word	0x080065f0
 8000dd4:	43d20000 	.word	0x43d20000
 8000dd8:	08006628 	.word	0x08006628
 8000ddc:	08006648 	.word	0x08006648
 8000de0:	08006670 	.word	0x08006670
 8000de4:	08006694 	.word	0x08006694
 8000de8:	080066c0 	.word	0x080066c0
 8000dec:	080066e0 	.word	0x080066e0
 8000df0:	2000017c 	.word	0x2000017c
 8000df4:	08006708 	.word	0x08006708

08000df8 <Process_RFID>:

/**
 * @brief Process RFID card reading - Simple protocol version
 */
void Process_RFID(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
    RC522_Status status;
    uint32_t current_time = HAL_GetTick();
 8000dfe:	f001 f8cd 	bl	8001f9c <HAL_GetTick>
 8000e02:	60b8      	str	r0, [r7, #8]
    static uint8_t card_sent = 0;  // Flag to prevent multiple sends
    
    status = RC522_ReadUID(card_uid);
 8000e04:	4837      	ldr	r0, [pc, #220]	@ (8000ee4 <Process_RFID+0xec>)
 8000e06:	f000 fcbe 	bl	8001786 <RC522_ReadUID>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
    
    if (status == RC522_OK) {
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d159      	bne.n	8000ec8 <Process_RFID+0xd0>
        // Check if this is the same card as before
        uint8_t same_card = (memcmp(card_uid, last_card_uid, UID_SIZE) == 0);
 8000e14:	2204      	movs	r2, #4
 8000e16:	4934      	ldr	r1, [pc, #208]	@ (8000ee8 <Process_RFID+0xf0>)
 8000e18:	4832      	ldr	r0, [pc, #200]	@ (8000ee4 <Process_RFID+0xec>)
 8000e1a:	f004 fe85 	bl	8005b28 <memcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf0c      	ite	eq
 8000e24:	2301      	moveq	r3, #1
 8000e26:	2300      	movne	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	71bb      	strb	r3, [r7, #6]
        
        // Only process if it's a new card or enough time has passed
        if (!same_card || (current_time - last_card_read_time > RC522_CARD_DETECTION_DELAY_MS)) {
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <Process_RFID+0x48>
 8000e32:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <Process_RFID+0xf4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e3e:	d94d      	bls.n	8000edc <Process_RFID+0xe4>
            
            // Reset card sent flag for new card
            if (!same_card) {
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <Process_RFID+0x54>
                card_sent = 0;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <Process_RFID+0xf8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
            }
            
            // Only send once per card detection
            if (!card_sent) {
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <Process_RFID+0xf8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d143      	bne.n	8000edc <Process_RFID+0xe4>
                // Get current weight using your weigh() function
                float weight = 0.0f;
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
                
                // Use your primary weigh algorithm
                int weight_mg = weigh();
 8000e5a:	f7ff fde9 	bl	8000a30 <weigh>
 8000e5e:	6038      	str	r0, [r7, #0]
                
                // Convert milligrams to grams
                weight = (float)weight_mg / 1000.0f;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000ef4 <Process_RFID+0xfc>
 8000e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e72:	edc7 7a03 	vstr	s15, [r7, #12]
                
                // Validate weight range (0-5000g is reasonable)
                if (weight < 0) weight = 0.0f;
 8000e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	d502      	bpl.n	8000e8a <Process_RFID+0x92>
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
                if (weight > 5000.0f) weight = 0.0f;
 8000e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e8e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000ef8 <Process_RFID+0x100>
 8000e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	dd02      	ble.n	8000ea2 <Process_RFID+0xaa>
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
                
                // Send data using simple protocol
                SimpleProtocol_ProcessCardDetection(card_uid, weight);
 8000ea2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ea6:	480f      	ldr	r0, [pc, #60]	@ (8000ee4 <Process_RFID+0xec>)
 8000ea8:	f000 fd30 	bl	800190c <SimpleProtocol_ProcessCardDetection>
                
                // Update status
                memcpy(last_card_uid, card_uid, UID_SIZE);
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <Process_RFID+0xec>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <Process_RFID+0xf0>)
 8000eb2:	6013      	str	r3, [r2, #0]
                last_card_read_time = current_time;
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <Process_RFID+0xf4>)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	6013      	str	r3, [r2, #0]
                card_present = 1;
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <Process_RFID+0x104>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
                card_sent = 1;  // Mark as sent
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <Process_RFID+0xf8>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
            // Card was removed - reset flag
            card_present = 0;
            card_sent = 0;
        }
    }
}
 8000ec6:	e009      	b.n	8000edc <Process_RFID+0xe4>
        if (card_present) {
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <Process_RFID+0x104>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <Process_RFID+0xe4>
            card_present = 0;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <Process_RFID+0x104>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
            card_sent = 0;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <Process_RFID+0xf8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000170 	.word	0x20000170
 8000ee8:	20000180 	.word	0x20000180
 8000eec:	20000178 	.word	0x20000178
 8000ef0:	20000185 	.word	0x20000185
 8000ef4:	447a0000 	.word	0x447a0000
 8000ef8:	459c4000 	.word	0x459c4000
 8000efc:	20000184 	.word	0x20000184

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000f04:	f000 ffe4 	bl	8001ed0 <HAL_Init>
  SystemClock_Config();
 8000f08:	f000 f814 	bl	8000f34 <SystemClock_Config>
  
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f952 	bl	80011b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f10:	f000 f880 	bl	8001014 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f14:	f000 f924 	bl	8001160 <MX_USART1_UART_Init>
  MX_TIM2_Init();  // Timer for microsecond delays
 8000f18:	f000 f8b2 	bl	8001080 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  System_Init();
 8000f1c:	f7ff fe68 	bl	8000bf0 <System_Init>
  SimpleProtocol_Init(); // This will start UART interrupt
 8000f20:	f000 fdda 	bl	8001ad8 <SimpleProtocol_Init>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Process_RFID();
 8000f24:	f7ff ff68 	bl	8000df8 <Process_RFID>
    HAL_Delay(100);
 8000f28:	2064      	movs	r0, #100	@ 0x64
 8000f2a:	f001 f843 	bl	8001fb4 <HAL_Delay>
    Process_RFID();
 8000f2e:	bf00      	nop
 8000f30:	e7f8      	b.n	8000f24 <main+0x24>
	...

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	@ 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	@ 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fe00 	bl	8005b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <SystemClock_Config+0xd8>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	4a2a      	ldr	r2, [pc, #168]	@ (800100c <SystemClock_Config+0xd8>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <SystemClock_Config+0xd8>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <SystemClock_Config+0xdc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f90:	2302      	movs	r3, #2
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fa8:	23b4      	movs	r3, #180	@ 0xb4
 8000faa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fc17 	bl	80027ec <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc4:	f000 f988 	bl	80012d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc8:	f001 fbc0 	bl	800274c <HAL_PWREx_EnableOverDrive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fd2:	f000 f981 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd6:	230f      	movs	r3, #15
 8000fd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2105      	movs	r1, #5
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fe71 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001000:	f000 f96a 	bl	80012d8 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	@ 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_SPI1_Init+0x64>)
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <MX_SPI1_Init+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001020:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001024:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001044:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001048:	2218      	movs	r2, #24
 800104a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001060:	220a      	movs	r2, #10
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_SPI1_Init+0x64>)
 8001066:	f002 f819 	bl	800309c <HAL_SPI_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001070:	f000 f932 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000088 	.word	0x20000088
 800107c:	40013000 	.word	0x40013000

08001080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010b4:	2253      	movs	r2, #83	@ 0x53
 80010b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010be:	4b27      	ldr	r3, [pc, #156]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b23      	ldr	r3, [pc, #140]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d2:	4822      	ldr	r0, [pc, #136]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010d4:	f002 fd52 	bl	8003b7c <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80010de:	f000 f8fb 	bl	80012d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4619      	mov	r1, r3
 80010ee:	481b      	ldr	r0, [pc, #108]	@ (800115c <MX_TIM2_Init+0xdc>)
 80010f0:	f002 ffe1 	bl	80040b6 <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010fa:	f000 f8ed 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010fe:	4817      	ldr	r0, [pc, #92]	@ (800115c <MX_TIM2_Init+0xdc>)
 8001100:	f002 fdf4 	bl	8003cec <HAL_TIM_IC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800110a:	f000 f8e5 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	480f      	ldr	r0, [pc, #60]	@ (800115c <MX_TIM2_Init+0xdc>)
 800111e:	f003 fb2d 	bl	800477c <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001128:	f000 f8d6 	bl	80012d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2204      	movs	r2, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_TIM2_Init+0xdc>)
 8001144:	f002 ff1b 	bl	8003f7e <HAL_TIM_IC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800114e:	f000 f8c3 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000e0 	.word	0x200000e0

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f003 fb80 	bl	800489c <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f899 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000128 	.word	0x20000128
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b36      	ldr	r3, [pc, #216]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a35      	ldr	r2, [pc, #212]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b25      	ldr	r3, [pc, #148]	@ (80012a8 <MX_GPIO_Init+0xf4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HC_TRIG_Pin|ILI9341_CS_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2103      	movs	r1, #3
 8001222:	4822      	ldr	r0, [pc, #136]	@ (80012ac <MX_GPIO_Init+0xf8>)
 8001224:	f001 fa5e 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_CS_Pin|ILI9341_DC_Pin|ILI9341_RESET_Pin|HX711_SCK_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f241 0107 	movw	r1, #4103	@ 0x1007
 800122e:	4820      	ldr	r0, [pc, #128]	@ (80012b0 <MX_GPIO_Init+0xfc>)
 8001230:	f001 fa58 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HC_TRIG_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = HC_TRIG_Pin|ILI9341_CS_Pin;
 8001234:	2303      	movs	r3, #3
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4619      	mov	r1, r3
 800124a:	4818      	ldr	r0, [pc, #96]	@ (80012ac <MX_GPIO_Init+0xf8>)
 800124c:	f001 f886 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_ECHO_Pin */
  GPIO_InitStruct.Pin = HC_ECHO_Pin;
 8001250:	2310      	movs	r3, #16
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HC_ECHO_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4812      	ldr	r0, [pc, #72]	@ (80012ac <MX_GPIO_Init+0xf8>)
 8001264:	f001 f87a 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_CS_Pin ILI9341_DC_Pin ILI9341_RESET_Pin HX711_SCK_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|ILI9341_DC_Pin|ILI9341_RESET_Pin|HX711_SCK_Pin;
 8001268:	f241 0307 	movw	r3, #4103	@ 0x1007
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <MX_GPIO_Init+0xfc>)
 8001282:	f001 f86b 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8001286:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_GPIO_Init+0xfc>)
 800129c:	f001 f85e 	bl	800235c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020400 	.word	0x40020400

080012b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <HAL_UART_RxCpltCallback+0x20>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_UART_RxCpltCallback+0x16>
        SimpleProtocol_UART_RxCpltCallback();
 80012c6:	f000 fb57 	bl	8001978 <SimpleProtocol_UART_RxCpltCallback>
    }
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40011000 	.word	0x40011000

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  System_Error_Handler(__FILE__, __LINE__, __FUNCTION__);
 80012dc:	4a03      	ldr	r2, [pc, #12]	@ (80012ec <Error_Handler+0x14>)
 80012de:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
 80012e2:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <Error_Handler+0x18>)
 80012e4:	f7ff fc68 	bl	8000bb8 <System_Error_Handler>
  /* USER CODE END Error_Handler_Debug */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08006a10 	.word	0x08006a10
 80012f0:	080069fc 	.word	0x080069fc

080012f4 <RC522_WriteRegister>:
extern UART_HandleTypeDef huart1;

/**
 * @brief Write data to RC522 register
 */
void RC522_WriteRegister(uint8_t addr, uint8_t val) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2];
    tx_data[0] = (addr << 1) & 0x7E;  // Address shifted and write bit
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800130e:	b2db      	uxtb	r3, r3
 8001310:	733b      	strb	r3, [r7, #12]
    tx_data[1] = val;
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	737b      	strb	r3, [r7, #13]
    
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2101      	movs	r1, #1
 800131a:	480a      	ldr	r0, [pc, #40]	@ (8001344 <RC522_WriteRegister+0x50>)
 800131c:	f001 f9e2 	bl	80026e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx_data, 2, HAL_MAX_DELAY);
 8001320:	f107 010c 	add.w	r1, r7, #12
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	2202      	movs	r2, #2
 800132a:	4807      	ldr	r0, [pc, #28]	@ (8001348 <RC522_WriteRegister+0x54>)
 800132c:	f001 ff3f 	bl	80031ae <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <RC522_WriteRegister+0x50>)
 8001336:	f001 f9d5 	bl	80026e4 <HAL_GPIO_WritePin>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40020400 	.word	0x40020400
 8001348:	20000088 	.word	0x20000088

0800134c <RC522_ReadRegister>:

/**
 * @brief Read data from RC522 register
 */
uint8_t RC522_ReadRegister(uint8_t addr) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[2];
    uint8_t rx_data[2];
    
    tx_data[0] = ((addr << 1) & 0x7E) | 0x80;  // Address shifted and read bit
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	b25b      	sxtb	r3, r3
 800135e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001362:	b25b      	sxtb	r3, r3
 8001364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	737b      	strb	r3, [r7, #13]
    
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2101      	movs	r1, #1
 8001376:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <RC522_ReadRegister+0x5c>)
 8001378:	f001 f9b4 	bl	80026e4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
 800137c:	f107 0208 	add.w	r2, r7, #8
 8001380:	f107 010c 	add.w	r1, r7, #12
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2302      	movs	r3, #2
 800138c:	4807      	ldr	r0, [pc, #28]	@ (80013ac <RC522_ReadRegister+0x60>)
 800138e:	f002 f852 	bl	8003436 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2101      	movs	r1, #1
 8001396:	4804      	ldr	r0, [pc, #16]	@ (80013a8 <RC522_ReadRegister+0x5c>)
 8001398:	f001 f9a4 	bl	80026e4 <HAL_GPIO_WritePin>
    
    return rx_data[1];
 800139c:	7a7b      	ldrb	r3, [r7, #9]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40020400 	.word	0x40020400
 80013ac:	20000088 	.word	0x20000088

080013b0 <RC522_SetBitMask>:

/**
 * @brief Set bit mask in register
 */
void RC522_SetBitMask(uint8_t addr, uint8_t mask) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	460a      	mov	r2, r1
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	71bb      	strb	r3, [r7, #6]
    uint8_t val = RC522_ReadRegister(addr);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffc2 	bl	800134c <RC522_ReadRegister>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(addr, val | mask);
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff8b 	bl	80012f4 <RC522_WriteRegister>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <RC522_ClearBitMask>:

/**
 * @brief Clear bit mask in register
 */
void RC522_ClearBitMask(uint8_t addr, uint8_t mask) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	460a      	mov	r2, r1
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	4613      	mov	r3, r2
 80013f4:	71bb      	strb	r3, [r7, #6]
    uint8_t val = RC522_ReadRegister(addr);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffa7 	bl	800134c <RC522_ReadRegister>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(addr, val & (~mask));
 8001402:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001406:	43db      	mvns	r3, r3
 8001408:	b25a      	sxtb	r2, r3
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4013      	ands	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff6b 	bl	80012f4 <RC522_WriteRegister>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <RC522_Reset>:

/**
 * @brief Reset RC522 with improved sequence
 */
void RC522_Reset(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
    // Hardware reset if RST pin is defined
    #ifdef RC522_RST_Pin
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2104      	movs	r1, #4
 8001432:	4817      	ldr	r0, [pc, #92]	@ (8001490 <RC522_Reset+0x68>)
 8001434:	f001 f956 	bl	80026e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Hold reset for 10ms
 8001438:	200a      	movs	r0, #10
 800143a:	f000 fdbb 	bl	8001fb4 <HAL_Delay>
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2104      	movs	r1, #4
 8001442:	4813      	ldr	r0, [pc, #76]	@ (8001490 <RC522_Reset+0x68>)
 8001444:	f001 f94e 	bl	80026e4 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // Wait for RC522 to start up
 8001448:	2032      	movs	r0, #50	@ 0x32
 800144a:	f000 fdb3 	bl	8001fb4 <HAL_Delay>
    #endif
    
    // Software reset command
    RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_SOFT_RESET);
 800144e:	210f      	movs	r1, #15
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff ff4f 	bl	80012f4 <RC522_WriteRegister>
    HAL_Delay(RC522_RESET_DELAY_MS);
 8001456:	2032      	movs	r0, #50	@ 0x32
 8001458:	f000 fdac 	bl	8001fb4 <HAL_Delay>
    
    // Wait for reset to complete - check if RC522 is ready
    for (int i = 0; i < 10; i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	e00d      	b.n	800147e <RC522_Reset+0x56>
        uint8_t status = RC522_ReadRegister(RC522_REG_COMMAND);
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff ff72 	bl	800134c <RC522_ReadRegister>
 8001468:	4603      	mov	r3, r0
 800146a:	70fb      	strb	r3, [r7, #3]
        if (status == RC522_CMD_IDLE) {
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <RC522_Reset+0x5e>
            break;  // Reset completed
        }
        HAL_Delay(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f000 fd9e 	bl	8001fb4 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3301      	adds	r3, #1
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b09      	cmp	r3, #9
 8001482:	ddee      	ble.n	8001462 <RC522_Reset+0x3a>
    }
}
 8001484:	e000      	b.n	8001488 <RC522_Reset+0x60>
            break;  // Reset completed
 8001486:	bf00      	nop
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020400 	.word	0x40020400

08001494 <RC522_AntennaOn>:

/**
 * @brief Turn on antenna
 */
void RC522_AntennaOn(void) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
    uint8_t val = RC522_ReadRegister(RC522_REG_TX_CONTROL);
 800149a:	2014      	movs	r0, #20
 800149c:	f7ff ff56 	bl	800134c <RC522_ReadRegister>
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
    if (!(val & 0x03)) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d103      	bne.n	80014b6 <RC522_AntennaOn+0x22>
        RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03);
 80014ae:	2103      	movs	r1, #3
 80014b0:	2014      	movs	r0, #20
 80014b2:	f7ff ff7d 	bl	80013b0 <RC522_SetBitMask>
    }
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <RC522_Init>:
}

/**
 * @brief Initialize RC522 with enhanced sequence
 */
void RC522_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    // Initialize CS pin to high (not selected)
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2101      	movs	r1, #1
 80014c8:	4815      	ldr	r0, [pc, #84]	@ (8001520 <RC522_Init+0x60>)
 80014ca:	f001 f90b 	bl	80026e4 <HAL_GPIO_WritePin>
    
    // Initialize RST pin if defined
    #ifdef RC522_RST_Pin
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2104      	movs	r1, #4
 80014d2:	4813      	ldr	r0, [pc, #76]	@ (8001520 <RC522_Init+0x60>)
 80014d4:	f001 f906 	bl	80026e4 <HAL_GPIO_WritePin>
    #endif
    
    // Wait for power stabilization
    HAL_Delay(100);
 80014d8:	2064      	movs	r0, #100	@ 0x64
 80014da:	f000 fd6b 	bl	8001fb4 <HAL_Delay>
    
    // Reset RC522
    RC522_Reset();
 80014de:	f7ff ffa3 	bl	8001428 <RC522_Reset>
    
    // Additional delay after reset
    HAL_Delay(100);
 80014e2:	2064      	movs	r0, #100	@ 0x64
 80014e4:	f000 fd66 	bl	8001fb4 <HAL_Delay>
    
    // Configure timer
    RC522_WriteRegister(RC522_REG_T_MODE, 0x8D);
 80014e8:	218d      	movs	r1, #141	@ 0x8d
 80014ea:	202a      	movs	r0, #42	@ 0x2a
 80014ec:	f7ff ff02 	bl	80012f4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3E);
 80014f0:	213e      	movs	r1, #62	@ 0x3e
 80014f2:	202b      	movs	r0, #43	@ 0x2b
 80014f4:	f7ff fefe 	bl	80012f4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30);
 80014f8:	211e      	movs	r1, #30
 80014fa:	202d      	movs	r0, #45	@ 0x2d
 80014fc:	f7ff fefa 	bl	80012f4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0);
 8001500:	2100      	movs	r1, #0
 8001502:	202c      	movs	r0, #44	@ 0x2c
 8001504:	f7ff fef6 	bl	80012f4 <RC522_WriteRegister>
    
    // Configure RF
    RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40);
 8001508:	2140      	movs	r1, #64	@ 0x40
 800150a:	2015      	movs	r0, #21
 800150c:	f7ff fef2 	bl	80012f4 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_MODE, 0x3D);
 8001510:	213d      	movs	r1, #61	@ 0x3d
 8001512:	2011      	movs	r0, #17
 8001514:	f7ff feee 	bl	80012f4 <RC522_WriteRegister>
    
    RC522_AntennaOn();
 8001518:	f7ff ffbc 	bl	8001494 <RC522_AntennaOn>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40020400 	.word	0x40020400

08001524 <RC522_ToCard>:

/**
 * @brief Communicate with card
 */
RC522_Status RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, 
                          uint8_t *backData, uint16_t *backLen) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	4613      	mov	r3, r2
 8001534:	73bb      	strb	r3, [r7, #14]
    RC522_Status status = RC522_ERROR;
 8001536:	2302      	movs	r3, #2
 8001538:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x77;
 800153a:	2377      	movs	r3, #119	@ 0x77
 800153c:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x30;
 800153e:	2330      	movs	r3, #48	@ 0x30
 8001540:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;
    
    switch (command) {
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d006      	beq.n	8001556 <RC522_ToCard+0x32>
 8001548:	2b0e      	cmp	r3, #14
 800154a:	d109      	bne.n	8001560 <RC522_ToCard+0x3c>
        case RC522_CMD_MF_AUTHENT:
            irqEn = 0x12;
 800154c:	2312      	movs	r3, #18
 800154e:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
 8001550:	2310      	movs	r3, #16
 8001552:	757b      	strb	r3, [r7, #21]
            break;
 8001554:	e005      	b.n	8001562 <RC522_ToCard+0x3e>
        case RC522_CMD_TRANSCEIVE:
            irqEn = 0x77;
 8001556:	2377      	movs	r3, #119	@ 0x77
 8001558:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
 800155a:	2330      	movs	r3, #48	@ 0x30
 800155c:	757b      	strb	r3, [r7, #21]
            break;
 800155e:	e000      	b.n	8001562 <RC522_ToCard+0x3e>
        default:
            break;
 8001560:	bf00      	nop
    }
    
    RC522_WriteRegister(RC522_REG_COMM_IEN, irqEn | 0x80);
 8001562:	7dbb      	ldrb	r3, [r7, #22]
 8001564:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4619      	mov	r1, r3
 800156c:	2002      	movs	r0, #2
 800156e:	f7ff fec1 	bl	80012f4 <RC522_WriteRegister>
    RC522_ClearBitMask(RC522_REG_COMM_IRQ, 0x80);
 8001572:	2180      	movs	r1, #128	@ 0x80
 8001574:	2004      	movs	r0, #4
 8001576:	f7ff ff36 	bl	80013e6 <RC522_ClearBitMask>
    RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80);
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	200a      	movs	r0, #10
 800157e:	f7ff ff17 	bl	80013b0 <RC522_SetBitMask>
    
    RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_IDLE);
 8001582:	2100      	movs	r1, #0
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff feb5 	bl	80012f4 <RC522_WriteRegister>
    
    // Write data to FIFO
    for (i = 0; i < sendLen; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	827b      	strh	r3, [r7, #18]
 800158e:	e00a      	b.n	80015a6 <RC522_ToCard+0x82>
        RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);
 8001590:	8a7b      	ldrh	r3, [r7, #18]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	2009      	movs	r0, #9
 800159c:	f7ff feaa 	bl	80012f4 <RC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
 80015a0:	8a7b      	ldrh	r3, [r7, #18]
 80015a2:	3301      	adds	r3, #1
 80015a4:	827b      	strh	r3, [r7, #18]
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	8a7a      	ldrh	r2, [r7, #18]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3ef      	bcc.n	8001590 <RC522_ToCard+0x6c>
    }
    
    // Execute command
    RC522_WriteRegister(RC522_REG_COMMAND, command);
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	4619      	mov	r1, r3
 80015b4:	2001      	movs	r0, #1
 80015b6:	f7ff fe9d 	bl	80012f4 <RC522_WriteRegister>
    if (command == RC522_CMD_TRANSCEIVE) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d103      	bne.n	80015c8 <RC522_ToCard+0xa4>
        RC522_SetBitMask(RC522_REG_BIT_FRAMING, 0x80);
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	200d      	movs	r0, #13
 80015c4:	f7ff fef4 	bl	80013b0 <RC522_SetBitMask>
    }
    
    // Wait for completion
    i = 2000;
 80015c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015cc:	827b      	strh	r3, [r7, #18]
    do {
        n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
 80015ce:	2004      	movs	r0, #4
 80015d0:	f7ff febc 	bl	800134c <RC522_ReadRegister>
 80015d4:	4603      	mov	r3, r0
 80015d6:	753b      	strb	r3, [r7, #20]
        i--;
 80015d8:	8a7b      	ldrh	r3, [r7, #18]
 80015da:	3b01      	subs	r3, #1
 80015dc:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80015de:	8a7b      	ldrh	r3, [r7, #18]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <RC522_ToCard+0xd6>
 80015e4:	7d3b      	ldrb	r3, [r7, #20]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <RC522_ToCard+0xd6>
 80015ee:	7d3a      	ldrb	r2, [r7, #20]
 80015f0:	7d7b      	ldrb	r3, [r7, #21]
 80015f2:	4013      	ands	r3, r2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0e9      	beq.n	80015ce <RC522_ToCard+0xaa>
    
    RC522_ClearBitMask(RC522_REG_BIT_FRAMING, 0x80);
 80015fa:	2180      	movs	r1, #128	@ 0x80
 80015fc:	200d      	movs	r0, #13
 80015fe:	f7ff fef2 	bl	80013e6 <RC522_ClearBitMask>
    
    if (i != 0) {
 8001602:	8a7b      	ldrh	r3, [r7, #18]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d057      	beq.n	80016b8 <RC522_ToCard+0x194>
        if (!(RC522_ReadRegister(RC522_REG_ERROR) & 0x1B)) {
 8001608:	2006      	movs	r0, #6
 800160a:	f7ff fe9f 	bl	800134c <RC522_ReadRegister>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 031b 	and.w	r3, r3, #27
 8001614:	2b00      	cmp	r3, #0
 8001616:	d14d      	bne.n	80016b4 <RC522_ToCard+0x190>
            status = RC522_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
            
            if (n & irqEn & 0x01) {
 800161c:	7d3a      	ldrb	r2, [r7, #20]
 800161e:	7dbb      	ldrb	r3, [r7, #22]
 8001620:	4013      	ands	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <RC522_ToCard+0x10c>
                status = RC522_NOTAG;
 800162c:	2301      	movs	r3, #1
 800162e:	75fb      	strb	r3, [r7, #23]
            }
            
            if (command == RC522_CMD_TRANSCEIVE) {
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d140      	bne.n	80016b8 <RC522_ToCard+0x194>
                n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
 8001636:	200a      	movs	r0, #10
 8001638:	f7ff fe88 	bl	800134c <RC522_ReadRegister>
 800163c:	4603      	mov	r3, r0
 800163e:	753b      	strb	r3, [r7, #20]
                lastBits = RC522_ReadRegister(RC522_REG_CONTROL) & 0x07;
 8001640:	200c      	movs	r0, #12
 8001642:	f7ff fe83 	bl	800134c <RC522_ReadRegister>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	747b      	strb	r3, [r7, #17]
                if (lastBits) {
 800164e:	7c7b      	ldrb	r3, [r7, #17]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <RC522_ToCard+0x148>
                    *backLen = (n - 1) * 8 + lastBits;
 8001654:	7d3b      	ldrb	r3, [r7, #20]
 8001656:	3b01      	subs	r3, #1
 8001658:	b29b      	uxth	r3, r3
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	b29a      	uxth	r2, r3
 800165e:	7c7b      	ldrb	r3, [r7, #17]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	e005      	b.n	8001678 <RC522_ToCard+0x154>
                } else {
                    *backLen = n * 8;
 800166c:	7d3b      	ldrb	r3, [r7, #20]
 800166e:	b29b      	uxth	r3, r3
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	b29a      	uxth	r2, r3
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001676:	801a      	strh	r2, [r3, #0]
                }
                
                if (n == 0) {
 8001678:	7d3b      	ldrb	r3, [r7, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <RC522_ToCard+0x15e>
                    n = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	753b      	strb	r3, [r7, #20]
                }
                if (n > 16) {
 8001682:	7d3b      	ldrb	r3, [r7, #20]
 8001684:	2b10      	cmp	r3, #16
 8001686:	d901      	bls.n	800168c <RC522_ToCard+0x168>
                    n = 16;
 8001688:	2310      	movs	r3, #16
 800168a:	753b      	strb	r3, [r7, #20]
                }
                
                // Read received data from FIFO
                for (i = 0; i < n; i++) {
 800168c:	2300      	movs	r3, #0
 800168e:	827b      	strh	r3, [r7, #18]
 8001690:	e00a      	b.n	80016a8 <RC522_ToCard+0x184>
                    backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
 8001692:	8a7b      	ldrh	r3, [r7, #18]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	18d4      	adds	r4, r2, r3
 8001698:	2009      	movs	r0, #9
 800169a:	f7ff fe57 	bl	800134c <RC522_ReadRegister>
 800169e:	4603      	mov	r3, r0
 80016a0:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
 80016a2:	8a7b      	ldrh	r3, [r7, #18]
 80016a4:	3301      	adds	r3, #1
 80016a6:	827b      	strh	r3, [r7, #18]
 80016a8:	7d3b      	ldrb	r3, [r7, #20]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	8a7a      	ldrh	r2, [r7, #18]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3ef      	bcc.n	8001692 <RC522_ToCard+0x16e>
 80016b2:	e001      	b.n	80016b8 <RC522_ToCard+0x194>
                }
            }
        } else {
            status = RC522_ERROR;
 80016b4:	2302      	movs	r3, #2
 80016b6:	75fb      	strb	r3, [r7, #23]
        }
    }
    
    return status;
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}

080016c2 <RC522_Request>:

/**
 * @brief Request card
 */
RC522_Status RC522_Request(uint8_t reqMode, uint8_t *TagType) {
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af02      	add	r7, sp, #8
 80016c8:	4603      	mov	r3, r0
 80016ca:	6039      	str	r1, [r7, #0]
 80016cc:	71fb      	strb	r3, [r7, #7]
    RC522_Status status;
    uint16_t backBits;
    
    RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07);
 80016ce:	2107      	movs	r1, #7
 80016d0:	200d      	movs	r0, #13
 80016d2:	f7ff fe0f 	bl	80012f4 <RC522_WriteRegister>
    
    TagType[0] = reqMode;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	701a      	strb	r2, [r3, #0]
    status = RC522_ToCard(RC522_CMD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	200c      	movs	r0, #12
 80016ea:	f7ff ff1b 	bl	8001524 <RC522_ToCard>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]
    
    if ((status != RC522_OK) || (backBits != 0x10)) {
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <RC522_Request+0x3c>
 80016f8:	89bb      	ldrh	r3, [r7, #12]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d001      	beq.n	8001702 <RC522_Request+0x40>
        status = RC522_ERROR;
 80016fe:	2302      	movs	r3, #2
 8001700:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <RC522_Anticoll>:

/**
 * @brief Anticollision
 */
RC522_Status RC522_Anticoll(uint8_t *serNum) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af02      	add	r7, sp, #8
 8001712:	6078      	str	r0, [r7, #4]
    RC522_Status status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;
    
    RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x00);
 8001718:	2100      	movs	r1, #0
 800171a:	200d      	movs	r0, #13
 800171c:	f7ff fdea 	bl	80012f4 <RC522_WriteRegister>
    
    serNum[0] = PICC_CMD_SEL_CL1;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2293      	movs	r2, #147	@ 0x93
 8001724:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3301      	adds	r3, #1
 800172a:	2220      	movs	r2, #32
 800172c:	701a      	strb	r2, [r3, #0]
    
    status = RC522_ToCard(RC522_CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800172e:	f107 030a 	add.w	r3, r7, #10
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2202      	movs	r2, #2
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	200c      	movs	r0, #12
 800173c:	f7ff fef2 	bl	8001524 <RC522_ToCard>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
    
    if (status == RC522_OK) {
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <RC522_Anticoll+0x70>
        // Check serial number
        for (i = 0; i < 4; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	73bb      	strb	r3, [r7, #14]
 800174e:	e009      	b.n	8001764 <RC522_Anticoll+0x58>
            serNumCheck ^= serNum[i];
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	7b7b      	ldrb	r3, [r7, #13]
 800175a:	4053      	eors	r3, r2
 800175c:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
 800175e:	7bbb      	ldrb	r3, [r7, #14]
 8001760:	3301      	adds	r3, #1
 8001762:	73bb      	strb	r3, [r7, #14]
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d9f2      	bls.n	8001750 <RC522_Anticoll+0x44>
        }
        if (serNumCheck != serNum[i]) {
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	7b7a      	ldrb	r2, [r7, #13]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <RC522_Anticoll+0x70>
            status = RC522_ERROR;
 8001778:	2302      	movs	r3, #2
 800177a:	73fb      	strb	r3, [r7, #15]
        }
    }
    
    return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <RC522_ReadUID>:
}

/**
 * @brief Read UID from card
 */
RC522_Status RC522_ReadUID(uint8_t *uid) {
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
    RC522_Status status;
    uint8_t TagType[2];
    
    status = RC522_Request(PICC_CMD_REQA, TagType);
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	2026      	movs	r0, #38	@ 0x26
 8001796:	f7ff ff94 	bl	80016c2 <RC522_Request>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
    if (status == RC522_OK) {
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d104      	bne.n	80017ae <RC522_ReadUID+0x28>
        status = RC522_Anticoll(uid);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ffb1 	bl	800170c <RC522_Anticoll>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <IsCardRegistered>:
static uint8_t registered_count = 0;
static uint8_t rx_buffer[RX_BUFFER_SIZE];
static uint8_t rx_index = 0;
uint8_t rx_byte; // For interrupt receive, now exported

static uint8_t IsCardRegistered(uint8_t* uid) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < registered_count; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e010      	b.n	80017e8 <IsCardRegistered+0x30>
        if (memcmp(registered_cards[i], uid, 4) == 0) {
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <IsCardRegistered+0x44>)
 80017cc:	4413      	add	r3, r2
 80017ce:	2204      	movs	r2, #4
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f9a8 	bl	8005b28 <memcmp>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <IsCardRegistered+0x2a>
            return 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	e008      	b.n	80017f4 <IsCardRegistered+0x3c>
    for (uint8_t i = 0; i < registered_count; i++) {
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <IsCardRegistered+0x48>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3e9      	bcc.n	80017c6 <IsCardRegistered+0xe>
        }
    }
    return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000188 	.word	0x20000188
 8001800:	200001d8 	.word	0x200001d8

08001804 <RegisterCard>:

static uint8_t RegisterCard(uint8_t* uid) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    if (registered_count >= MAX_REGISTERED_CARDS) return 0;
 800180c:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <RegisterCard+0x4c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b13      	cmp	r3, #19
 8001812:	d901      	bls.n	8001818 <RegisterCard+0x14>
 8001814:	2300      	movs	r3, #0
 8001816:	e016      	b.n	8001846 <RegisterCard+0x42>
    if (IsCardRegistered(uid)) return 1;
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffcd 	bl	80017b8 <IsCardRegistered>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <RegisterCard+0x24>
 8001824:	2301      	movs	r3, #1
 8001826:	e00e      	b.n	8001846 <RegisterCard+0x42>
    
    memcpy(registered_cards[registered_count], uid, 4);
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <RegisterCard+0x4c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <RegisterCard+0x50>)
 8001830:	4413      	add	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	601a      	str	r2, [r3, #0]
    registered_count++;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <RegisterCard+0x4c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <RegisterCard+0x4c>)
 8001842:	701a      	strb	r2, [r3, #0]
    return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200001d8 	.word	0x200001d8
 8001854:	20000188 	.word	0x20000188

08001858 <SimpleProtocol_SendRegisteredCard>:

void SimpleProtocol_SendRegisteredCard(uint8_t* uid, float weight) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	ed87 0a00 	vstr	s0, [r7]
    uint8_t buffer[11];
    buffer[0] = PROTOCOL_START_BYTE;
 8001864:	23aa      	movs	r3, #170	@ 0xaa
 8001866:	733b      	strb	r3, [r7, #12]
    buffer[1] = MSG_TYPE_CARD_REGISTERED;
 8001868:	2301      	movs	r3, #1
 800186a:	737b      	strb	r3, [r7, #13]
    memcpy(&buffer[2], uid, 4);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8c7 300e 	str.w	r3, [r7, #14]
    memcpy(&buffer[6], &weight, 4);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f8c7 3012 	str.w	r3, [r7, #18]
    buffer[10] = PROTOCOL_END_BYTE;
 800187a:	2355      	movs	r3, #85	@ 0x55
 800187c:	75bb      	strb	r3, [r7, #22]
    
    HAL_UART_Transmit(&huart1, buffer, 11, 1000);
 800187e:	f107 010c 	add.w	r1, r7, #12
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	220b      	movs	r2, #11
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <SimpleProtocol_SendRegisteredCard+0x40>)
 800188a:	f003 f857 	bl	800493c <HAL_UART_Transmit>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000128 	.word	0x20000128

0800189c <SimpleProtocol_SendUnregisteredCard>:

void SimpleProtocol_SendUnregisteredCard(uint8_t* uid) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];
    buffer[0] = PROTOCOL_START_BYTE;
 80018a4:	23aa      	movs	r3, #170	@ 0xaa
 80018a6:	723b      	strb	r3, [r7, #8]
    buffer[1] = MSG_TYPE_CARD_UNREGISTERED;
 80018a8:	2302      	movs	r3, #2
 80018aa:	727b      	strb	r3, [r7, #9]
    memcpy(&buffer[2], uid, 4);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8c7 300a 	str.w	r3, [r7, #10]
    buffer[6] = PROTOCOL_END_BYTE;
 80018b4:	2355      	movs	r3, #85	@ 0x55
 80018b6:	73bb      	strb	r3, [r7, #14]
    
    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
 80018b8:	f107 0108 	add.w	r1, r7, #8
 80018bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c0:	2207      	movs	r2, #7
 80018c2:	4803      	ldr	r0, [pc, #12]	@ (80018d0 <SimpleProtocol_SendUnregisteredCard+0x34>)
 80018c4:	f003 f83a 	bl	800493c <HAL_UART_Transmit>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000128 	.word	0x20000128

080018d4 <SimpleProtocol_SendACK>:

void SimpleProtocol_SendACK(uint8_t msgType) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[5];
    buffer[0] = PROTOCOL_START_BYTE;
 80018de:	23aa      	movs	r3, #170	@ 0xaa
 80018e0:	723b      	strb	r3, [r7, #8]
    buffer[1] = MSG_TYPE_ACK;
 80018e2:	2305      	movs	r3, #5
 80018e4:	727b      	strb	r3, [r7, #9]
    buffer[2] = msgType; // Type of message being ACKed
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	72bb      	strb	r3, [r7, #10]
    buffer[3] = PROTOCOL_END_BYTE;
 80018ea:	2355      	movs	r3, #85	@ 0x55
 80018ec:	72fb      	strb	r3, [r7, #11]
    
    HAL_UART_Transmit(&huart1, buffer, 4, 1000);
 80018ee:	f107 0108 	add.w	r1, r7, #8
 80018f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f6:	2204      	movs	r2, #4
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <SimpleProtocol_SendACK+0x34>)
 80018fa:	f003 f81f 	bl	800493c <HAL_UART_Transmit>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000128 	.word	0x20000128

0800190c <SimpleProtocol_ProcessCardDetection>:

void SimpleProtocol_ProcessCardDetection(uint8_t* uid, float weight) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	ed87 0a00 	vstr	s0, [r7]
    if (IsCardRegistered(uid)) {
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff4d 	bl	80017b8 <IsCardRegistered>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <SimpleProtocol_ProcessCardDetection+0x24>
        SimpleProtocol_SendRegisteredCard(uid, weight);
 8001924:	ed97 0a00 	vldr	s0, [r7]
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff95 	bl	8001858 <SimpleProtocol_SendRegisteredCard>
    } else {
        SimpleProtocol_SendUnregisteredCard(uid);
    }
}
 800192e:	e002      	b.n	8001936 <SimpleProtocol_ProcessCardDetection+0x2a>
        SimpleProtocol_SendUnregisteredCard(uid);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffb3 	bl	800189c <SimpleProtocol_SendUnregisteredCard>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <SimpleProtocol_StartRxInterrupt>:
void SimpleProtocol_PushReceivedByte(uint8_t byte) {
    rx_byte = byte;
    SimpleProtocol_UART_RxCpltCallback();
}

void SimpleProtocol_StartRxInterrupt(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
    // Reset UART state and buffer
    HAL_UART_AbortReceive(&huart1);
 8001944:	4808      	ldr	r0, [pc, #32]	@ (8001968 <SimpleProtocol_StartRxInterrupt+0x28>)
 8001946:	f003 f8a9 	bl	8004a9c <HAL_UART_AbortReceive>
    rx_index = 0;
 800194a:	4b08      	ldr	r3, [pc, #32]	@ (800196c <SimpleProtocol_StartRxInterrupt+0x2c>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001950:	2220      	movs	r2, #32
 8001952:	2100      	movs	r1, #0
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <SimpleProtocol_StartRxInterrupt+0x30>)
 8001956:	f004 f8f7 	bl	8005b48 <memset>
    
    // Start receiving first byte
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	4905      	ldr	r1, [pc, #20]	@ (8001974 <SimpleProtocol_StartRxInterrupt+0x34>)
 800195e:	4802      	ldr	r0, [pc, #8]	@ (8001968 <SimpleProtocol_StartRxInterrupt+0x28>)
 8001960:	f003 f877 	bl	8004a52 <HAL_UART_Receive_IT>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000128 	.word	0x20000128
 800196c:	200001fc 	.word	0x200001fc
 8001970:	200001dc 	.word	0x200001dc
 8001974:	200001fd 	.word	0x200001fd

08001978 <SimpleProtocol_UART_RxCpltCallback>:

void SimpleProtocol_UART_RxCpltCallback(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
    // Process received byte
    if (rx_index == 0 && rx_byte != PROTOCOL_START_BYTE) {
 800197e:	4b4f      	ldr	r3, [pc, #316]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <SimpleProtocol_UART_RxCpltCallback+0x22>
 8001986:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2baa      	cmp	r3, #170	@ 0xaa
 800198c:	d005      	beq.n	800199a <SimpleProtocol_UART_RxCpltCallback+0x22>
        // Invalid start byte, wait for next byte
        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800198e:	2201      	movs	r2, #1
 8001990:	494b      	ldr	r1, [pc, #300]	@ (8001ac0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 8001992:	484c      	ldr	r0, [pc, #304]	@ (8001ac4 <SimpleProtocol_UART_RxCpltCallback+0x14c>)
 8001994:	f003 f85d 	bl	8004a52 <HAL_UART_Receive_IT>
        return;
 8001998:	e08d      	b.n	8001ab6 <SimpleProtocol_UART_RxCpltCallback+0x13e>
    }

    // Add byte to buffer
    rx_buffer[rx_index++] = rx_byte;
 800199a:	4b48      	ldr	r3, [pc, #288]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	b2d1      	uxtb	r1, r2
 80019a2:	4a46      	ldr	r2, [pc, #280]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80019a4:	7011      	strb	r1, [r2, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b45      	ldr	r3, [pc, #276]	@ (8001ac0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 80019aa:	7819      	ldrb	r1, [r3, #0]
 80019ac:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 80019ae:	5499      	strb	r1, [r3, r2]

    // Start receiving next byte
    HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	4943      	ldr	r1, [pc, #268]	@ (8001ac0 <SimpleProtocol_UART_RxCpltCallback+0x148>)
 80019b4:	4843      	ldr	r0, [pc, #268]	@ (8001ac4 <SimpleProtocol_UART_RxCpltCallback+0x14c>)
 80019b6:	f003 f84c 	bl	8004a52 <HAL_UART_Receive_IT>

    // Check for complete message
    if (rx_index >= 2) {
 80019ba:	4b40      	ldr	r3, [pc, #256]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d96d      	bls.n	8001a9e <SimpleProtocol_UART_RxCpltCallback+0x126>
        uint8_t msg_type = rx_buffer[1];
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	737b      	strb	r3, [r7, #13]
        uint8_t expected_length = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

        switch (msg_type) {
 80019cc:	7b7b      	ldrb	r3, [r7, #13]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d002      	beq.n	80019d8 <SimpleProtocol_UART_RxCpltCallback+0x60>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <SimpleProtocol_UART_RxCpltCallback+0x66>
 80019d6:	e00d      	b.n	80019f4 <SimpleProtocol_UART_RxCpltCallback+0x7c>
            case MSG_TYPE_REGISTER_CARD:
                expected_length = 7; // AA 03 UID[4] 55
 80019d8:	2307      	movs	r3, #7
 80019da:	73fb      	strb	r3, [r7, #15]
                break;
 80019dc:	e00f      	b.n	80019fe <SimpleProtocol_UART_RxCpltCallback+0x86>
            case MSG_TYPE_VALID_CARDS:
                if (rx_index >= 3) {
 80019de:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d90a      	bls.n	80019fc <SimpleProtocol_UART_RxCpltCallback+0x84>
                    uint8_t data_length = rx_buffer[2];
 80019e6:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 80019e8:	789b      	ldrb	r3, [r3, #2]
 80019ea:	733b      	strb	r3, [r7, #12]
                    expected_length = 6 + data_length; // AA 04 LENGTH DATA[data_length] CHECKSUM 55
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	3306      	adds	r3, #6
 80019f0:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80019f2:	e003      	b.n	80019fc <SimpleProtocol_UART_RxCpltCallback+0x84>
            default:
                // Unknown message type, reset
                rx_index = 0;
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
                return;
 80019fa:	e05c      	b.n	8001ab6 <SimpleProtocol_UART_RxCpltCallback+0x13e>
                break;
 80019fc:	bf00      	nop
        }

        // Process complete message
        if (expected_length > 0 && rx_index >= expected_length) {
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d04c      	beq.n	8001a9e <SimpleProtocol_UART_RxCpltCallback+0x126>
 8001a04:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d847      	bhi.n	8001a9e <SimpleProtocol_UART_RxCpltCallback+0x126>
            if (rx_buffer[expected_length - 1] == PROTOCOL_END_BYTE) {
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	2b55      	cmp	r3, #85	@ 0x55
 8001a18:	d13e      	bne.n	8001a98 <SimpleProtocol_UART_RxCpltCallback+0x120>
                // Process valid message
                if (msg_type == MSG_TYPE_REGISTER_CARD) {
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d10b      	bne.n	8001a38 <SimpleProtocol_UART_RxCpltCallback+0xc0>
                    uint8_t* uid = &rx_buffer[2];
 8001a20:	4b2a      	ldr	r3, [pc, #168]	@ (8001acc <SimpleProtocol_UART_RxCpltCallback+0x154>)
 8001a22:	603b      	str	r3, [r7, #0]
                    if (RegisterCard(uid)) {
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7ff feed 	bl	8001804 <RegisterCard>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d033      	beq.n	8001a98 <SimpleProtocol_UART_RxCpltCallback+0x120>
                        SimpleProtocol_SendACK(MSG_TYPE_REGISTER_CARD);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f7ff ff4f 	bl	80018d4 <SimpleProtocol_SendACK>
 8001a36:	e02f      	b.n	8001a98 <SimpleProtocol_UART_RxCpltCallback+0x120>
                    }
                } else if (msg_type == MSG_TYPE_VALID_CARDS) {
 8001a38:	7b7b      	ldrb	r3, [r7, #13]
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d12c      	bne.n	8001a98 <SimpleProtocol_UART_RxCpltCallback+0x120>
                    uint8_t data_length = rx_buffer[2];
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 8001a40:	789b      	ldrb	r3, [r3, #2]
 8001a42:	72fb      	strb	r3, [r7, #11]
                    uint8_t num_cards = data_length / 4;
 8001a44:	7afb      	ldrb	r3, [r7, #11]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	72bb      	strb	r3, [r7, #10]
                    
                    registered_count = 0;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
                    for (uint8_t i = 0; i < num_cards && i < MAX_REGISTERED_CARDS; i++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	73bb      	strb	r3, [r7, #14]
 8001a54:	e016      	b.n	8001a84 <SimpleProtocol_UART_RxCpltCallback+0x10c>
                        uint8_t* uid = &rx_buffer[3 + (i * 4)];
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	607b      	str	r3, [r7, #4]
                        memcpy(registered_cards[registered_count], uid, 4);
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad4 <SimpleProtocol_UART_RxCpltCallback+0x15c>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	601a      	str	r2, [r3, #0]
                        registered_count++;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <SimpleProtocol_UART_RxCpltCallback+0x158>)
 8001a7c:	701a      	strb	r2, [r3, #0]
                    for (uint8_t i = 0; i < num_cards && i < MAX_REGISTERED_CARDS; i++) {
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73bb      	strb	r3, [r7, #14]
 8001a84:	7bba      	ldrb	r2, [r7, #14]
 8001a86:	7abb      	ldrb	r3, [r7, #10]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d202      	bcs.n	8001a92 <SimpleProtocol_UART_RxCpltCallback+0x11a>
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	2b13      	cmp	r3, #19
 8001a90:	d9e1      	bls.n	8001a56 <SimpleProtocol_UART_RxCpltCallback+0xde>
                    }
                    SimpleProtocol_SendACK(MSG_TYPE_VALID_CARDS);
 8001a92:	2004      	movs	r0, #4
 8001a94:	f7ff ff1e 	bl	80018d4 <SimpleProtocol_SendACK>
                }
            }
            // Reset buffer after processing
            rx_index = 0;
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
        }
    }

    // Prevent buffer overflow
    if (rx_index >= RX_BUFFER_SIZE) {
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b1f      	cmp	r3, #31
 8001aa4:	d907      	bls.n	8001ab6 <SimpleProtocol_UART_RxCpltCallback+0x13e>
        rx_index = 0;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <SimpleProtocol_UART_RxCpltCallback+0x144>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001aac:	2220      	movs	r2, #32
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <SimpleProtocol_UART_RxCpltCallback+0x150>)
 8001ab2:	f004 f849 	bl	8005b48 <memset>
    }
}
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200001fc 	.word	0x200001fc
 8001ac0:	200001fd 	.word	0x200001fd
 8001ac4:	20000128 	.word	0x20000128
 8001ac8:	200001dc 	.word	0x200001dc
 8001acc:	200001de 	.word	0x200001de
 8001ad0:	200001d8 	.word	0x200001d8
 8001ad4:	20000188 	.word	0x20000188

08001ad8 <SimpleProtocol_Init>:

void SimpleProtocol_Init(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
    // Add some default registered cards for testing
    uint8_t default_card1[4] = {0x12, 0x34, 0x56, 0x78};
 8001ade:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <SimpleProtocol_Init+0x44>)
 8001ae0:	60fb      	str	r3, [r7, #12]
    uint8_t default_card2[4] = {0xAB, 0xCD, 0xEF, 0x01};
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <SimpleProtocol_Init+0x48>)
 8001ae4:	60bb      	str	r3, [r7, #8]
    
    RegisterCard(default_card1);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fe8a 	bl	8001804 <RegisterCard>
    RegisterCard(default_card2);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fe85 	bl	8001804 <RegisterCard>
    
    // Initialize UART receive interrupt
    HAL_Delay(2000); // Wait for ESP32 to initialize
 8001afa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001afe:	f000 fa59 	bl	8001fb4 <HAL_Delay>
    SimpleProtocol_StartRxInterrupt();
 8001b02:	f7ff ff1d 	bl	8001940 <SimpleProtocol_StartRxInterrupt>
    
    // Send a test unregistered card message
    uint8_t test_uid[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	607b      	str	r3, [r7, #4]
    SimpleProtocol_SendUnregisteredCard(test_uid);
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fec4 	bl	800189c <SimpleProtocol_SendUnregisteredCard>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	78563412 	.word	0x78563412
 8001b20:	01efcdab 	.word	0x01efcdab

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a0f      	ldr	r2, [pc, #60]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <HAL_SPI_MspInit+0x94>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d133      	bne.n	8001bfe <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <HAL_SPI_MspInit+0x98>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c0c <HAL_SPI_MspInit+0x98>)
 8001ba0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_SPI_MspInit+0x98>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_SPI_MspInit+0x98>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <HAL_SPI_MspInit+0x98>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_SPI_MspInit+0x98>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001bce:	23e0      	movs	r3, #224	@ 0xe0
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bde:	2305      	movs	r3, #5
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <HAL_SPI_MspInit+0x9c>)
 8001bea:	f000 fbb7 	bl	800235c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2023      	movs	r0, #35	@ 0x23
 8001bf4:	f000 fadd 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bf8:	2023      	movs	r0, #35	@ 0x23
 8001bfa:	f000 faf6 	bl	80021ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	@ 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40013000 	.word	0x40013000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	@ 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c34:	d133      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x94>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x94>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x94>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x94>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x94>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x94>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4808      	ldr	r0, [pc, #32]	@ (8001cac <HAL_TIM_Base_MspInit+0x98>)
 8001c8a:	f000 fb67 	bl	800235c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	201c      	movs	r0, #28
 8001c94:	f000 fa8d 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c98:	201c      	movs	r0, #28
 8001c9a:	f000 faa6 	bl	80021ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	@ 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	@ 0x28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_UART_MspInit+0x94>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d134      	bne.n	8001d3c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_UART_MspInit+0x98>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a1b      	ldr	r2, [pc, #108]	@ (8001d48 <HAL_UART_MspInit+0x98>)
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_UART_MspInit+0x98>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_UART_MspInit+0x98>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <HAL_UART_MspInit+0x98>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_UART_MspInit+0x98>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	4619      	mov	r1, r3
 8001d26:	4809      	ldr	r0, [pc, #36]	@ (8001d4c <HAL_UART_MspInit+0x9c>)
 8001d28:	f000 fb18 	bl	800235c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2025      	movs	r0, #37	@ 0x25
 8001d32:	f000 fa3e 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d36:	2025      	movs	r0, #37	@ 0x25
 8001d38:	f000 fa57 	bl	80021ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	@ 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <NMI_Handler+0x4>

08001d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <HardFault_Handler+0x4>

08001d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <MemManage_Handler+0x4>

08001d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da6:	f000 f8e5 	bl	8001f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <TIM2_IRQHandler+0x10>)
 8001db6:	f001 fff2 	bl	8003d9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200000e0 	.word	0x200000e0

08001dc4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <SPI1_IRQHandler+0x10>)
 8001dca:	f001 fcdd 	bl	8003788 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000088 	.word	0x20000088

08001dd8 <USART1_IRQHandler>:

/**
  * @brief USART1 global interrupt handler
  */
void USART1_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	@ (8001de8 <USART1_IRQHandler+0x10>)
 8001dde:	f002 ff01 	bl	8004be4 <HAL_UART_IRQHandler>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000128 	.word	0x20000128

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f003 fe9c 	bl	8005b58 <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20030000 	.word	0x20030000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000200 	.word	0x20000200
 8001e54:	20000350 	.word	0x20000350

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	@ (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e80:	f7ff ffea 	bl	8001e58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e84:	480c      	ldr	r0, [pc, #48]	@ (8001eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e86:	490d      	ldr	r1, [pc, #52]	@ (8001ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f003 fe5b 	bl	8005b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7ff f827 	bl	8000f00 <main>
  bx  lr    
 8001eb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001eb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ec0:	08006a7c 	.word	0x08006a7c
  ldr r2, =_sbss
 8001ec4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ec8:	20000350 	.word	0x20000350

08001ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>
	...

08001ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <HAL_Init+0x40>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <HAL_Init+0x40>)
 8001ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a07      	ldr	r2, [pc, #28]	@ (8001f10 <HAL_Init+0x40>)
 8001ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f000 f94f 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f000 f808 	bl	8001f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f04:	f7ff fe0e 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_InitTick+0x54>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_InitTick+0x58>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f967 	bl	8002206 <HAL_SYSTICK_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00e      	b.n	8001f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d80a      	bhi.n	8001f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f000 f92f 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f54:	4a06      	ldr	r2, [pc, #24]	@ (8001f70 <HAL_InitTick+0x5c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	20000014 	.word	0x20000014
 8001f70:	20000010 	.word	0x20000010

08001f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_IncTick+0x20>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_IncTick+0x24>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <HAL_IncTick+0x24>)
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014
 8001f98:	20000204 	.word	0x20000204

08001f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <HAL_GetTick+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000204 	.word	0x20000204

08001fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff ffee 	bl	8001f9c <HAL_GetTick>
 8001fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fcc:	d005      	beq.n	8001fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_Delay+0x44>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fda:	bf00      	nop
 8001fdc:	f7ff ffde 	bl	8001f9c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d8f7      	bhi.n	8001fdc <HAL_Delay+0x28>
  {
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000014 	.word	0x20000014

08001ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	@ (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	@ 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff29 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff3e 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff8e 	bl	80020f0 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5d 	bl	800209c <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff31 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff feb6 	bl	8001f9c <HAL_GetTick>
 8002230:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d008      	beq.n	8002250 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2280      	movs	r2, #128	@ 0x80
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e052      	b.n	80022f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0216 	bic.w	r2, r2, #22
 800225e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800226e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <HAL_DMA_Abort+0x62>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0208 	bic.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a0:	e013      	b.n	80022ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a2:	f7ff fe7b 	bl	8001f9c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d90c      	bls.n	80022ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e015      	b.n	80022f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e4      	bne.n	80022a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022dc:	223f      	movs	r2, #63	@ 0x3f
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d004      	beq.n	800231c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e00c      	b.n	8002336 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2205      	movs	r2, #5
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e177      	b.n	8002668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8166 	bne.w	8002662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d005      	beq.n	80023ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d130      	bne.n	8002410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d017      	beq.n	800244c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	69b9      	ldr	r1, [r7, #24]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80c0 	beq.w	8002662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <HAL_GPIO_Init+0x324>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	4a65      	ldr	r2, [pc, #404]	@ (8002680 <HAL_GPIO_Init+0x324>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f2:	4b63      	ldr	r3, [pc, #396]	@ (8002680 <HAL_GPIO_Init+0x324>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fe:	4a61      	ldr	r2, [pc, #388]	@ (8002684 <HAL_GPIO_Init+0x328>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	@ (8002688 <HAL_GPIO_Init+0x32c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d037      	beq.n	800259a <HAL_GPIO_Init+0x23e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a57      	ldr	r2, [pc, #348]	@ (800268c <HAL_GPIO_Init+0x330>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_Init+0x23a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a56      	ldr	r2, [pc, #344]	@ (8002690 <HAL_GPIO_Init+0x334>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x236>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a55      	ldr	r2, [pc, #340]	@ (8002694 <HAL_GPIO_Init+0x338>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x232>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a54      	ldr	r2, [pc, #336]	@ (8002698 <HAL_GPIO_Init+0x33c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a53      	ldr	r2, [pc, #332]	@ (800269c <HAL_GPIO_Init+0x340>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x22a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_GPIO_Init+0x344>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x226>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a51      	ldr	r2, [pc, #324]	@ (80026a4 <HAL_GPIO_Init+0x348>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a50      	ldr	r2, [pc, #320]	@ (80026a8 <HAL_GPIO_Init+0x34c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4f      	ldr	r2, [pc, #316]	@ (80026ac <HAL_GPIO_Init+0x350>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x21a>
 8002572:	2309      	movs	r3, #9
 8002574:	e012      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002576:	230a      	movs	r3, #10
 8002578:	e010      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257a:	2308      	movs	r3, #8
 800257c:	e00e      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257e:	2307      	movs	r3, #7
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002582:	2306      	movs	r3, #6
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x240>
 800259a:	2300      	movs	r3, #0
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ac:	4935      	ldr	r1, [pc, #212]	@ (8002684 <HAL_GPIO_Init+0x328>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025de:	4a34      	ldr	r2, [pc, #208]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002608:	4a29      	ldr	r2, [pc, #164]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002632:	4a1f      	ldr	r2, [pc, #124]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800265c:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	f67f ae84 	bls.w	8002378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3724      	adds	r7, #36	@ 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40022400 	.word	0x40022400
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	041a      	lsls	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4013      	ands	r3, r2
 800272e:	041a      	lsls	r2, r3, #16
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43d9      	mvns	r1, r3
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	400b      	ands	r3, r1
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_PWREx_EnableOverDrive+0x90>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	4a1f      	ldr	r2, [pc, #124]	@ (80027dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	@ 0x40
 8002766:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002772:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002778:	f7ff fc10 	bl	8001f9c <HAL_GetTick>
 800277c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800277e:	e009      	b.n	8002794 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002780:	f7ff fc0c 	bl	8001f9c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800278e:	d901      	bls.n	8002794 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e01f      	b.n	80027d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a0:	d1ee      	bne.n	8002780 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a8:	f7ff fbf8 	bl	8001f9c <HAL_GetTick>
 80027ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027ae:	e009      	b.n	80027c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b0:	f7ff fbf4 	bl	8001f9c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027be:	d901      	bls.n	80027c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e007      	b.n	80027d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80027d0:	d1ee      	bne.n	80027b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	420e0040 	.word	0x420e0040
 80027e4:	40007000 	.word	0x40007000
 80027e8:	420e0044 	.word	0x420e0044

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e267      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800280a:	4b88      	ldr	r3, [pc, #544]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b85      	ldr	r3, [pc, #532]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b82      	ldr	r3, [pc, #520]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b7e      	ldr	r3, [pc, #504]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e242      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b76      	ldr	r3, [pc, #472]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b70      	ldr	r3, [pc, #448]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6d      	ldr	r3, [pc, #436]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b69      	ldr	r3, [pc, #420]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a68      	ldr	r2, [pc, #416]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b66      	ldr	r3, [pc, #408]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a65      	ldr	r2, [pc, #404]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fb7a 	bl	8001f9c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff fb76 	bl	8001f9c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e207      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b5b      	ldr	r3, [pc, #364]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff fb66 	bl	8001f9c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff fb62 	bl	8001f9c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f3      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b51      	ldr	r3, [pc, #324]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002902:	4b4a      	ldr	r3, [pc, #296]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b44      	ldr	r3, [pc, #272]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1c7      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4937      	ldr	r1, [pc, #220]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b34      	ldr	r3, [pc, #208]	@ (8002a30 <HAL_RCC_OscConfig+0x244>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7ff fb1b 	bl	8001f9c <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff fb17 	bl	8001f9c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1a8      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b28      	ldr	r3, [pc, #160]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4925      	ldr	r1, [pc, #148]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff fafa 	bl	8001f9c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff faf6 	bl	8001f9c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e187      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d036      	beq.n	8002a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_RCC_OscConfig+0x248>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff fada 	bl	8001f9c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff fad6 	bl	8001f9c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e167      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_RCC_OscConfig+0x248>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7ff fac3 	bl	8001f9c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e00e      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7ff fabf 	bl	8001f9c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d907      	bls.n	8002a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e150      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	42470000 	.word	0x42470000
 8002a34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b88      	ldr	r3, [pc, #544]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ea      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8097 	beq.w	8002b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b81      	ldr	r3, [pc, #516]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b7d      	ldr	r3, [pc, #500]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a72:	4b7a      	ldr	r3, [pc, #488]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b77      	ldr	r3, [pc, #476]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b74      	ldr	r3, [pc, #464]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a73      	ldr	r2, [pc, #460]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff fa7f 	bl	8001f9c <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7ff fa7b 	bl	8001f9c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e10c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ea>
 8002ac8:	4b64      	ldr	r3, [pc, #400]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a63      	ldr	r2, [pc, #396]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x30c>
 8002ade:	4b5f      	ldr	r3, [pc, #380]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aea:	4b5c      	ldr	r3, [pc, #368]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a5b      	ldr	r2, [pc, #364]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002af8:	4b58      	ldr	r3, [pc, #352]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afc:	4a57      	ldr	r2, [pc, #348]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b04:	4b55      	ldr	r3, [pc, #340]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	4a54      	ldr	r2, [pc, #336]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7ff fa40 	bl	8001f9c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7ff fa3c 	bl	8001f9c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0cb      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b49      	ldr	r3, [pc, #292]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ee      	beq.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7ff fa2a 	bl	8001f9c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7ff fa26 	bl	8001f9c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b5      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ee      	bne.n	8002b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	4a38      	ldr	r2, [pc, #224]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a1 	beq.w	8002ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d05c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d141      	bne.n	8002c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f9fa 	bl	8001f9c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7ff f9f6 	bl	8001f9c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e087      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b27      	ldr	r3, [pc, #156]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	491b      	ldr	r1, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7ff f9cf 	bl	8001f9c <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7ff f9cb 	bl	8001f9c <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e05c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x416>
 8002c20:	e054      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff f9b8 	bl	8001f9c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7ff f9b4 	bl	8001f9c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e045      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e038      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7ff f8e6 	bl	8001f9c <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7ff f8e2 	bl	8001f9c <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f846 	bl	8001f14 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08006a20 	.word	0x08006a20
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	20000010 	.word	0x20000010

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b090      	sub	sp, #64	@ 0x40
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80a1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e09b      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee0:	e09b      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee6:	e098      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d028      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f10:	2100      	movs	r1, #0
 8002f12:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f14:	fb03 f201 	mul.w	r2, r3, r1
 8002f18:	2300      	movs	r3, #0
 8002f1a:	fb00 f303 	mul.w	r3, r0, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f22:	fba0 1202 	umull	r1, r2, r0, r2
 8002f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f28:	460a      	mov	r2, r1
 8002f2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f2e:	4413      	add	r3, r2
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f34:	2200      	movs	r2, #0
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	61fa      	str	r2, [r7, #28]
 8002f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f42:	f7fd fb61 	bl	8000608 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4e:	e053      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	617a      	str	r2, [r7, #20]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f62:	f04f 0b00 	mov.w	fp, #0
 8002f66:	4652      	mov	r2, sl
 8002f68:	465b      	mov	r3, fp
 8002f6a:	f04f 0000 	mov.w	r0, #0
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f78:	0150      	lsls	r0, r2, #5
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f82:	eb63 090b 	sbc.w	r9, r3, fp
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	00eb      	lsls	r3, r5, #3
 8002fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb0:	00e2      	lsls	r2, r4, #3
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	eb14 030a 	adds.w	r3, r4, sl
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	eb45 030b 	adc.w	r3, r5, fp
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	028b      	lsls	r3, r1, #10
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd8:	4621      	mov	r1, r4
 8002fda:	028a      	lsls	r2, r1, #10
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	60fa      	str	r2, [r7, #12]
 8002fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fec:	f7fd fb0c 	bl	8000608 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetSysClockFreq+0x184>)
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800301c:	4618      	mov	r0, r3
 800301e:	3740      	adds	r7, #64	@ 0x40
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	017d7840 	.word	0x017d7840

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	2000000c 	.word	0x2000000c

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	08006a30 	.word	0x08006a30

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08006a30 	.word	0x08006a30

0800309c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07b      	b.n	80031a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030be:	d009      	beq.n	80030d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fd40 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800310a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003158:	ea42 0103 	orr.w	r1, r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0104 	and.w	r1, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	f003 0210 	and.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b088      	sub	sp, #32
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031be:	f7fe feed 	bl	8001f9c <HAL_GetTick>
 80031c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d001      	beq.n	80031d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
 80031d6:	e12a      	b.n	800342e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_SPI_Transmit+0x36>
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e122      	b.n	800342e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_SPI_Transmit+0x48>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e11b      	b.n	800342e <HAL_SPI_Transmit+0x280>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003244:	d10f      	bne.n	8003266 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003264:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003270:	2b40      	cmp	r3, #64	@ 0x40
 8003272:	d007      	beq.n	8003284 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800328c:	d152      	bne.n	8003334 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_SPI_Transmit+0xee>
 8003296:	8b7b      	ldrh	r3, [r7, #26]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d145      	bne.n	8003328 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032c0:	e032      	b.n	8003328 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d112      	bne.n	80032f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	881a      	ldrh	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	1c9a      	adds	r2, r3, #2
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032f4:	e018      	b.n	8003328 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f6:	f7fe fe51 	bl	8001f9c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d803      	bhi.n	800330e <HAL_SPI_Transmit+0x160>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d102      	bne.n	8003314 <HAL_SPI_Transmit+0x166>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e082      	b.n	800342e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1c7      	bne.n	80032c2 <HAL_SPI_Transmit+0x114>
 8003332:	e053      	b.n	80033dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_Transmit+0x194>
 800333c:	8b7b      	ldrh	r3, [r7, #26]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d147      	bne.n	80033d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	7812      	ldrb	r2, [r2, #0]
 800334e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003368:	e033      	b.n	80033d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b02      	cmp	r3, #2
 8003376:	d113      	bne.n	80033a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800339e:	e018      	b.n	80033d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a0:	f7fe fdfc 	bl	8001f9c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d803      	bhi.n	80033b8 <HAL_SPI_Transmit+0x20a>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Transmit+0x210>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e02d      	b.n	800342e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1c6      	bne.n	800336a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fb77 	bl	8003ad4 <SPI_EndRxTxTransaction>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800342c:	2300      	movs	r3, #0
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b08a      	sub	sp, #40	@ 0x28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003444:	2301      	movs	r3, #1
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003448:	f7fe fda8 	bl	8001f9c <HAL_GetTick>
 800344c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003454:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d00c      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x4a>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346c:	d106      	bne.n	800347c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_SPI_TransmitReceive+0x46>
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d001      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	e17f      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x5c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x5c>
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e174      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x6e>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e16d      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d003      	beq.n	80034c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2205      	movs	r2, #5
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	887a      	ldrh	r2, [r7, #2]
 80034d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	887a      	ldrh	r2, [r7, #2]
 80034e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003500:	2b40      	cmp	r3, #64	@ 0x40
 8003502:	d007      	beq.n	8003514 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800351c:	d17e      	bne.n	800361c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_TransmitReceive+0xf6>
 8003526:	8afb      	ldrh	r3, [r7, #22]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d16c      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003550:	e059      	b.n	8003606 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d11b      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x162>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x162>
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	2b01      	cmp	r3, #1
 800356e:	d113      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d119      	bne.n	80035da <HAL_SPI_TransmitReceive+0x1a4>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d014      	beq.n	80035da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ba:	b292      	uxth	r2, r2
 80035bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c2:	1c9a      	adds	r2, r3, #2
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d6:	2301      	movs	r3, #1
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035da:	f7fe fcdf 	bl	8001f9c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d80d      	bhi.n	8003606 <HAL_SPI_TransmitReceive+0x1d0>
 80035ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d009      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0bc      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1a0      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x11c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d19b      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x11c>
 800361a:	e082      	b.n	8003722 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_SPI_TransmitReceive+0x1f4>
 8003624:	8afb      	ldrh	r3, [r7, #22]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d171      	bne.n	800370e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003650:	e05d      	b.n	800370e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d11c      	bne.n	800369a <HAL_SPI_TransmitReceive+0x264>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d017      	beq.n	800369a <HAL_SPI_TransmitReceive+0x264>
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	2b01      	cmp	r3, #1
 800366e:	d114      	bne.n	800369a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d119      	bne.n	80036dc <HAL_SPI_TransmitReceive+0x2a6>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d014      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036d8:	2301      	movs	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036dc:	f7fe fc5e 	bl	8001f9c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d803      	bhi.n	80036f4 <HAL_SPI_TransmitReceive+0x2be>
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d102      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x2c4>
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e038      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d19c      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x21c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d197      	bne.n	8003652 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003722:	6a3a      	ldr	r2, [r7, #32]
 8003724:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f9d4 	bl	8003ad4 <SPI_EndRxTxTransaction>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e01d      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800377e:	2300      	movs	r3, #0
  }
}
 8003780:	4618      	mov	r0, r3
 8003782:	3728      	adds	r7, #40	@ 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
    return;
 80037ca:	e0d7      	b.n	800397c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_SPI_IRQHandler+0x66>
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	09db      	lsrs	r3, r3, #7
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
    return;
 80037ec:	e0c6      	b.n	800397c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_SPI_IRQHandler+0x8c>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80b4 	beq.w	800397c <HAL_SPI_IRQHandler+0x1f4>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80ad 	beq.w	800397c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d023      	beq.n	8003876 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b03      	cmp	r3, #3
 8003838:	d011      	beq.n	800385e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	e00b      	b.n	8003876 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
        return;
 8003874:	e082      	b.n	800397c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d014      	beq.n	80038ac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f043 0208 	orr.w	r2, r3, #8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d04f      	beq.n	800397a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <HAL_SPI_IRQHandler+0x17e>
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d034      	beq.n	8003970 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0203 	bic.w	r2, r2, #3
 8003914:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d011      	beq.n	8003942 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <HAL_SPI_IRQHandler+0x1fc>)
 8003924:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fce7 	bl	80022fe <HAL_DMA_Abort_IT>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394e:	4a0d      	ldr	r2, [pc, #52]	@ (8003984 <HAL_SPI_IRQHandler+0x1fc>)
 8003950:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fcd1 	bl	80022fe <HAL_DMA_Abort_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800396e:	e003      	b.n	8003978 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f809 	bl	8003988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003976:	e000      	b.n	800397a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003978:	bf00      	nop
    return;
 800397a:	bf00      	nop
  }
}
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	0800399d 	.word	0x0800399d

08003988 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff ffe6 	bl	8003988 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d4:	f7fe fae2 	bl	8001f9c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e4:	f7fe fada 	bl	8001f9c <HAL_GetTick>
 80039e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	0d1b      	lsrs	r3, r3, #20
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039fa:	e055      	b.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d051      	beq.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a04:	f7fe faca 	bl	8001f9c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d902      	bls.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d13d      	bne.n	8003a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a32:	d111      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a3c:	d004      	beq.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a46:	d107      	bne.n	8003a58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a60:	d10f      	bne.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e018      	b.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e002      	b.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d19a      	bne.n	80039fc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2102      	movs	r1, #2
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ff6a 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e032      	b.n	8003b6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b06:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <SPI_EndRxTxTransaction+0xa0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <SPI_EndRxTxTransaction+0xa4>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	0d5b      	lsrs	r3, r3, #21
 8003b12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b24:	d112      	bne.n	8003b4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2180      	movs	r1, #128	@ 0x80
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff ff47 	bl	80039c4 <SPI_WaitFlagStateUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b40:	f043 0220 	orr.w	r2, r3, #32
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d0f2      	beq.n	8003b4c <SPI_EndRxTxTransaction+0x78>
 8003b66:	e000      	b.n	8003b6a <SPI_EndRxTxTransaction+0x96>
        break;
 8003b68:	bf00      	nop
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	2000000c 	.word	0x2000000c
 8003b78:	165e9f81 	.word	0x165e9f81

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e041      	b.n	8003c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe f836 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fb74 	bl	80042a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e046      	b.n	8003cc2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a23      	ldr	r2, [pc, #140]	@ (8003cd0 <HAL_TIM_Base_Start+0xb4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4e:	d01d      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd4 <HAL_TIM_Base_Start+0xb8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <HAL_TIM_Base_Start+0xbc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <HAL_TIM_Base_Start+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <HAL_TIM_Base_Start+0xc4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_TIM_Base_Start+0xc8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_TIM_Base_Start+0x70>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_TIM_Base_Start+0xcc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d111      	bne.n	8003cb0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d010      	beq.n	8003cc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cae:	e007      	b.n	8003cc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40010400 	.word	0x40010400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40001800 	.word	0x40001800

08003cec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e041      	b.n	8003d82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f839 	bl	8003d8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f000 fabc 	bl	80042a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01b      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0202 	mvn.w	r2, #2
 8003dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0303 	and.w	r3, r3, #3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fa3f 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003dee:	e005      	b.n	8003dfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa31 	bl	8004258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa42 	bl	8004280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01b      	beq.n	8003e4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f06f 0204 	mvn.w	r2, #4
 8003e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa19 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003e3a:	e005      	b.n	8003e48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa0b 	bl	8004258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fa1c 	bl	8004280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01b      	beq.n	8003e9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0208 	mvn.w	r2, #8
 8003e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f9f3 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003e86:	e005      	b.n	8003e94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f9e5 	bl	8004258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9f6 	bl	8004280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01b      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0210 	mvn.w	r2, #16
 8003eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9cd 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003ed2:	e005      	b.n	8003ee0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f9bf 	bl	8004258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9d0 	bl	8004280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00c      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0201 	mvn.w	r2, #1
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f99d 	bl	8004244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fcad 	bl	8004888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00c      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f9a1 	bl	8004294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00c      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f06f 0220 	mvn.w	r2, #32
 8003f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fc7f 	bl	8004874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e088      	b.n	80040ae <HAL_TIM_IC_ConfigChannel+0x130>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003fba:	f000 fa1b 	bl	80043f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 020c 	bic.w	r2, r2, #12
 8003fcc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6999      	ldr	r1, [r3, #24]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	619a      	str	r2, [r3, #24]
 8003fe0:	e060      	b.n	80040a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d11c      	bne.n	8004022 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003ff8:	f000 fa9f 	bl	800453a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800400a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
 8004020:	e040      	b.n	80040a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004038:	f000 faec 	bl	8004614 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 020c 	bic.w	r2, r2, #12
 800404a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69d9      	ldr	r1, [r3, #28]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	61da      	str	r2, [r3, #28]
 800405e:	e021      	b.n	80040a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d11c      	bne.n	80040a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004076:	f000 fb09 	bl	800468c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004088:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	61da      	str	r2, [r3, #28]
 800409e:	e001      	b.n	80040a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_ConfigClockSource+0x1c>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0b4      	b.n	800423c <HAL_TIM_ConfigClockSource+0x186>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	d03e      	beq.n	800418a <HAL_TIM_ConfigClockSource+0xd4>
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004110:	f200 8087 	bhi.w	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004118:	f000 8086 	beq.w	8004228 <HAL_TIM_ConfigClockSource+0x172>
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004120:	d87f      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 8004122:	2b70      	cmp	r3, #112	@ 0x70
 8004124:	d01a      	beq.n	800415c <HAL_TIM_ConfigClockSource+0xa6>
 8004126:	2b70      	cmp	r3, #112	@ 0x70
 8004128:	d87b      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 800412a:	2b60      	cmp	r3, #96	@ 0x60
 800412c:	d050      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0x11a>
 800412e:	2b60      	cmp	r3, #96	@ 0x60
 8004130:	d877      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 8004132:	2b50      	cmp	r3, #80	@ 0x50
 8004134:	d03c      	beq.n	80041b0 <HAL_TIM_ConfigClockSource+0xfa>
 8004136:	2b50      	cmp	r3, #80	@ 0x50
 8004138:	d873      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d058      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0x13a>
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d86f      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 8004142:	2b30      	cmp	r3, #48	@ 0x30
 8004144:	d064      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x15a>
 8004146:	2b30      	cmp	r3, #48	@ 0x30
 8004148:	d86b      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 800414a:	2b20      	cmp	r3, #32
 800414c:	d060      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x15a>
 800414e:	2b20      	cmp	r3, #32
 8004150:	d867      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d05c      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x15a>
 8004156:	2b10      	cmp	r3, #16
 8004158:	d05a      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x15a>
 800415a:	e062      	b.n	8004222 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800416c:	f000 fae6 	bl	800473c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800417e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]
      break;
 8004188:	e04f      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800419a:	f000 facf 	bl	800473c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041ac:	609a      	str	r2, [r3, #8]
      break;
 80041ae:	e03c      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041bc:	461a      	mov	r2, r3
 80041be:	f000 f98d 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2150      	movs	r1, #80	@ 0x50
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fa9c 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 80041ce:	e02c      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041dc:	461a      	mov	r2, r3
 80041de:	f000 f9e9 	bl	80045b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2160      	movs	r1, #96	@ 0x60
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fa8c 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 80041ee:	e01c      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041fc:	461a      	mov	r2, r3
 80041fe:	f000 f96d 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2140      	movs	r1, #64	@ 0x40
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fa7c 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 800420e:	e00c      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fa73 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 8004220:	e003      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
      break;
 8004226:	e000      	b.n	800422a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004228:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a43      	ldr	r2, [pc, #268]	@ (80043c8 <TIM_Base_SetConfig+0x120>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c6:	d00f      	beq.n	80042e8 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a40      	ldr	r2, [pc, #256]	@ (80043cc <TIM_Base_SetConfig+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3f      	ldr	r2, [pc, #252]	@ (80043d0 <TIM_Base_SetConfig+0x128>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d007      	beq.n	80042e8 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3e      	ldr	r2, [pc, #248]	@ (80043d4 <TIM_Base_SetConfig+0x12c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3d      	ldr	r2, [pc, #244]	@ (80043d8 <TIM_Base_SetConfig+0x130>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d108      	bne.n	80042fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a32      	ldr	r2, [pc, #200]	@ (80043c8 <TIM_Base_SetConfig+0x120>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02b      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004308:	d027      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2f      	ldr	r2, [pc, #188]	@ (80043cc <TIM_Base_SetConfig+0x124>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d023      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <TIM_Base_SetConfig+0x128>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01f      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2d      	ldr	r2, [pc, #180]	@ (80043d4 <TIM_Base_SetConfig+0x12c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01b      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2c      	ldr	r2, [pc, #176]	@ (80043d8 <TIM_Base_SetConfig+0x130>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d017      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2b      	ldr	r2, [pc, #172]	@ (80043dc <TIM_Base_SetConfig+0x134>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2a      	ldr	r2, [pc, #168]	@ (80043e0 <TIM_Base_SetConfig+0x138>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00f      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a29      	ldr	r2, [pc, #164]	@ (80043e4 <TIM_Base_SetConfig+0x13c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a28      	ldr	r2, [pc, #160]	@ (80043e8 <TIM_Base_SetConfig+0x140>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a27      	ldr	r2, [pc, #156]	@ (80043ec <TIM_Base_SetConfig+0x144>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a26      	ldr	r2, [pc, #152]	@ (80043f0 <TIM_Base_SetConfig+0x148>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d108      	bne.n	800436c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a0e      	ldr	r2, [pc, #56]	@ (80043c8 <TIM_Base_SetConfig+0x120>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_Base_SetConfig+0xf2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a10      	ldr	r2, [pc, #64]	@ (80043d8 <TIM_Base_SetConfig+0x130>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d103      	bne.n	80043a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40010400 	.word	0x40010400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40014400 	.word	0x40014400
 80043e4:	40014800 	.word	0x40014800
 80043e8:	40001800 	.word	0x40001800
 80043ec:	40001c00 	.word	0x40001c00
 80043f0:	40002000 	.word	0x40002000

080043f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 0201 	bic.w	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a28      	ldr	r2, [pc, #160]	@ (80044c0 <TIM_TI1_SetConfig+0xcc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01b      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004428:	d017      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a25      	ldr	r2, [pc, #148]	@ (80044c4 <TIM_TI1_SetConfig+0xd0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a24      	ldr	r2, [pc, #144]	@ (80044c8 <TIM_TI1_SetConfig+0xd4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00f      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a23      	ldr	r2, [pc, #140]	@ (80044cc <TIM_TI1_SetConfig+0xd8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <TIM_TI1_SetConfig+0xdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a21      	ldr	r2, [pc, #132]	@ (80044d4 <TIM_TI1_SetConfig+0xe0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_TI1_SetConfig+0x66>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a20      	ldr	r2, [pc, #128]	@ (80044d8 <TIM_TI1_SetConfig+0xe4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d101      	bne.n	800445e <TIM_TI1_SetConfig+0x6a>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <TIM_TI1_SetConfig+0x6c>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e003      	b.n	800447e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	b2db      	uxtb	r3, r3
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f023 030a 	bic.w	r3, r3, #10
 8004498:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 030a 	and.w	r3, r3, #10
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800

080044dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 030a 	bic.w	r3, r3, #10
 8004518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f023 0210 	bic.w	r2, r3, #16
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004578:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	b29b      	uxth	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800458c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0210 	bic.w	r2, r3, #16
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f023 0303 	bic.w	r3, r3, #3
 8004640:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004650:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	b2db      	uxtb	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004664:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	031b      	lsls	r3, r3, #12
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80046de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	031b      	lsls	r3, r3, #12
 80046e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	f043 0307 	orr.w	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	021a      	lsls	r2, r3, #8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	431a      	orrs	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800478c:	2b01      	cmp	r3, #1
 800478e:	d101      	bne.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004790:	2302      	movs	r3, #2
 8004792:	e05a      	b.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a21      	ldr	r2, [pc, #132]	@ (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d022      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e0:	d01d      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d018      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00e      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a17      	ldr	r2, [pc, #92]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a15      	ldr	r2, [pc, #84]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d10c      	bne.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4313      	orrs	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010000 	.word	0x40010000
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40010400 	.word	0x40010400
 800486c:	40014000 	.word	0x40014000
 8004870:	40001800 	.word	0x40001800

08004874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e042      	b.n	8004934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd f9f4 	bl	8001cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	@ 0x24
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fe77 	bl	80055d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	d175      	bne.n	8004a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Transmit+0x2c>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e06e      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fb0f 	bl	8001f9c <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b0:	e02e      	b.n	8004a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fbdb 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e03a      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1cb      	bne.n	80049b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2200      	movs	r2, #0
 8004a22:	2140      	movs	r1, #64	@ 0x40
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fba7 	bl	8005178 <UART_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d112      	bne.n	8004a92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_UART_Receive_IT+0x26>
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e00b      	b.n	8004a94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	461a      	mov	r2, r3
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fbce 	bl	800522a <UART_Start_Receive_IT>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	e000      	b.n	8004a94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b09a      	sub	sp, #104	@ 0x68
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aba:	667b      	str	r3, [r7, #100]	@ 0x64
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ac4:	657a      	str	r2, [r7, #84]	@ 0x54
 8004ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004aca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004af8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004afe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d119      	bne.n	8004b48 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d136      	bne.n	8004bc4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3314      	adds	r3, #20
 8004b74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b76:	61ba      	str	r2, [r7, #24]
 8004b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	613b      	str	r3, [r7, #16]
   return(result);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e5      	bne.n	8004b56 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d018      	beq.n	8004bc4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b96:	2200      	movs	r2, #0
 8004b98:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fd fb3d 	bl	800221e <HAL_DMA_Abort>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fbc7 	bl	8002342 <HAL_DMA_GetError>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d104      	bne.n	8004bc4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e00a      	b.n	8004bda <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3768      	adds	r7, #104	@ 0x68
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b0ba      	sub	sp, #232	@ 0xe8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_UART_IRQHandler+0x66>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fc07 	bl	8005456 <UART_Receive_IT>
      return;
 8004c48:	e273      	b.n	8005132 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80de 	beq.w	8004e10 <HAL_UART_IRQHandler+0x22c>
 8004c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80d1 	beq.w	8004e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_UART_IRQHandler+0xae>
 8004c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xd2>
 8004c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cae:	f043 0202 	orr.w	r2, r3, #2
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_UART_IRQHandler+0xf6>
 8004cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f043 0204 	orr.w	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <HAL_UART_IRQHandler+0x126>
 8004ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f043 0208 	orr.w	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 820a 	beq.w	8005128 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_UART_IRQHandler+0x14e>
 8004d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb92 	bl	8005456 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	bf0c      	ite	eq
 8004d40:	2301      	moveq	r3, #1
 8004d42:	2300      	movne	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <HAL_UART_IRQHandler+0x17a>
 8004d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04f      	beq.n	8004dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fa9d 	bl	800529e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b40      	cmp	r3, #64	@ 0x40
 8004d70:	d141      	bne.n	8004df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1d9      	bne.n	8004d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d013      	beq.n	8004dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dca:	4a8a      	ldr	r2, [pc, #552]	@ (8004ff4 <HAL_UART_IRQHandler+0x410>)
 8004dcc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fa93 	bl	80022fe <HAL_DMA_Abort_IT>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004de8:	4610      	mov	r0, r2
 8004dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00e      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9ac 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e00a      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9a8 	bl	800514c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f9a4 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e0a:	e18d      	b.n	8005128 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	bf00      	nop
    return;
 8004e0e:	e18b      	b.n	8005128 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 8167 	bne.w	80050e8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8160 	beq.w	80050e8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 8159 	beq.w	80050e8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	f040 80ce 	bne.w	8004ff8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80a9 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	f080 80a2 	bcs.w	8004fc4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e92:	f000 8088 	beq.w	8004fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ec2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1d9      	bne.n	8004e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eec:	e853 3f00 	ldrex	r3, [r3]
 8004ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e1      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e3      	bne.n	8004f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e3      	bne.n	8004f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd f93c 	bl	800221e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8cf 	bl	8005160 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004fc2:	e0b3      	b.n	800512c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	f040 80ad 	bne.w	800512c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fdc:	f040 80a6 	bne.w	800512c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f8b7 	bl	8005160 <HAL_UARTEx_RxEventCallback>
      return;
 8004ff2:	e09b      	b.n	800512c <HAL_UART_IRQHandler+0x548>
 8004ff4:	08005365 	.word	0x08005365
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005000:	b29b      	uxth	r3, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 808e 	beq.w	8005130 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005014:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8089 	beq.w	8005130 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800502e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005034:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005042:	647a      	str	r2, [r7, #68]	@ 0x44
 8005044:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e3      	bne.n	800501e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3314      	adds	r3, #20
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	623b      	str	r3, [r7, #32]
   return(result);
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3314      	adds	r3, #20
 8005076:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800507a:	633a      	str	r2, [r7, #48]	@ 0x30
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e3      	bne.n	8005056 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0310 	bic.w	r3, r3, #16
 80050b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050c0:	61fa      	str	r2, [r7, #28]
 80050c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	617b      	str	r3, [r7, #20]
   return(result);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e3      	bne.n	800509c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f83d 	bl	8005160 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050e6:	e023      	b.n	8005130 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <HAL_UART_IRQHandler+0x524>
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f940 	bl	8005386 <UART_Transmit_IT>
    return;
 8005106:	e014      	b.n	8005132 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800510c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00e      	beq.n	8005132 <HAL_UART_IRQHandler+0x54e>
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f980 	bl	8005426 <UART_EndTransmit_IT>
    return;
 8005126:	e004      	b.n	8005132 <HAL_UART_IRQHandler+0x54e>
    return;
 8005128:	bf00      	nop
 800512a:	e002      	b.n	8005132 <HAL_UART_IRQHandler+0x54e>
      return;
 800512c:	bf00      	nop
 800512e:	e000      	b.n	8005132 <HAL_UART_IRQHandler+0x54e>
      return;
 8005130:	bf00      	nop
  }
}
 8005132:	37e8      	adds	r7, #232	@ 0xe8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005188:	e03b      	b.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d037      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005192:	f7fc ff03 	bl	8001f9c <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d302      	bcc.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e03a      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d023      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b80      	cmp	r3, #128	@ 0x80
 80051be:	d020      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d01d      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d116      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f857 	bl	800529e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2208      	movs	r2, #8
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0b4      	beq.n	800518a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	4613      	mov	r3, r2
 8005236:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2222      	movs	r2, #34	@ 0x22
 8005254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800526e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b095      	sub	sp, #84	@ 0x54
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	2b01      	cmp	r3, #1
 8005314:	d119      	bne.n	800534a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005336:	61ba      	str	r2, [r7, #24]
 8005338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005358:	bf00      	nop
 800535a:	3754      	adds	r7, #84	@ 0x54
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff fee7 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b21      	cmp	r3, #33	@ 0x21
 8005398:	d13e      	bne.n	8005418 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a2:	d114      	bne.n	80053ce <UART_Transmit_IT+0x48>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d110      	bne.n	80053ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	1c9a      	adds	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	621a      	str	r2, [r3, #32]
 80053cc:	e008      	b.n	80053e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6211      	str	r1, [r2, #32]
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4619      	mov	r1, r3
 80053ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10f      	bne.n	8005414 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005402:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005412:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e000      	b.n	800541a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005418:	2302      	movs	r3, #2
  }
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff fe76 	bl	8005138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b08c      	sub	sp, #48	@ 0x30
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b22      	cmp	r3, #34	@ 0x22
 8005470:	f040 80aa 	bne.w	80055c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547c:	d115      	bne.n	80054aa <UART_Receive_IT+0x54>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d111      	bne.n	80054aa <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005498:	b29a      	uxth	r2, r3
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	1c9a      	adds	r2, r3, #2
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80054a8:	e024      	b.n	80054f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b8:	d007      	beq.n	80054ca <UART_Receive_IT+0x74>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <UART_Receive_IT+0x82>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	e008      	b.n	80054ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4619      	mov	r1, r3
 8005502:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005504:	2b00      	cmp	r3, #0
 8005506:	d15d      	bne.n	80055c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0220 	bic.w	r2, r2, #32
 8005516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	2b01      	cmp	r3, #1
 800554c:	d135      	bne.n	80055ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	613b      	str	r3, [r7, #16]
   return(result);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f023 0310 	bic.w	r3, r3, #16
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005574:	623a      	str	r2, [r7, #32]
 8005576:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	69f9      	ldr	r1, [r7, #28]
 800557a:	6a3a      	ldr	r2, [r7, #32]
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	61bb      	str	r3, [r7, #24]
   return(result);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b10      	cmp	r3, #16
 8005594:	d10a      	bne.n	80055ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fdd4 	bl	8005160 <HAL_UARTEx_RxEventCallback>
 80055b8:	e002      	b.n	80055c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb fe7a 	bl	80012b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e002      	b.n	80055ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	e000      	b.n	80055ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055c8:	2302      	movs	r3, #2
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3730      	adds	r7, #48	@ 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
	...

080055d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d8:	b0c0      	sub	sp, #256	@ 0x100
 80055da:	af00      	add	r7, sp, #0
 80055dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f0:	68d9      	ldr	r1, [r3, #12]
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	ea40 0301 	orr.w	r3, r0, r1
 80055fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	431a      	orrs	r2, r3
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800562c:	f021 010c 	bic.w	r1, r1, #12
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800563a:	430b      	orrs	r3, r1
 800563c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	6999      	ldr	r1, [r3, #24]
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	ea40 0301 	orr.w	r3, r0, r1
 800565a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b8f      	ldr	r3, [pc, #572]	@ (80058a0 <UART_SetConfig+0x2cc>)
 8005664:	429a      	cmp	r2, r3
 8005666:	d005      	beq.n	8005674 <UART_SetConfig+0xa0>
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b8d      	ldr	r3, [pc, #564]	@ (80058a4 <UART_SetConfig+0x2d0>)
 8005670:	429a      	cmp	r2, r3
 8005672:	d104      	bne.n	800567e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fd fcfe 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8005678:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800567c:	e003      	b.n	8005686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800567e:	f7fd fce5 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8005682:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005690:	f040 810c 	bne.w	80058ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005698:	2200      	movs	r2, #0
 800569a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800569e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056a6:	4622      	mov	r2, r4
 80056a8:	462b      	mov	r3, r5
 80056aa:	1891      	adds	r1, r2, r2
 80056ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056ae:	415b      	adcs	r3, r3
 80056b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056b6:	4621      	mov	r1, r4
 80056b8:	eb12 0801 	adds.w	r8, r2, r1
 80056bc:	4629      	mov	r1, r5
 80056be:	eb43 0901 	adc.w	r9, r3, r1
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056d6:	4690      	mov	r8, r2
 80056d8:	4699      	mov	r9, r3
 80056da:	4623      	mov	r3, r4
 80056dc:	eb18 0303 	adds.w	r3, r8, r3
 80056e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056e4:	462b      	mov	r3, r5
 80056e6:	eb49 0303 	adc.w	r3, r9, r3
 80056ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005702:	460b      	mov	r3, r1
 8005704:	18db      	adds	r3, r3, r3
 8005706:	653b      	str	r3, [r7, #80]	@ 0x50
 8005708:	4613      	mov	r3, r2
 800570a:	eb42 0303 	adc.w	r3, r2, r3
 800570e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005718:	f7fa ff76 	bl	8000608 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4b61      	ldr	r3, [pc, #388]	@ (80058a8 <UART_SetConfig+0x2d4>)
 8005722:	fba3 2302 	umull	r2, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	011c      	lsls	r4, r3, #4
 800572a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005734:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	1891      	adds	r1, r2, r2
 8005742:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005744:	415b      	adcs	r3, r3
 8005746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800574c:	4641      	mov	r1, r8
 800574e:	eb12 0a01 	adds.w	sl, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb43 0b01 	adc.w	fp, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576c:	4692      	mov	sl, r2
 800576e:	469b      	mov	fp, r3
 8005770:	4643      	mov	r3, r8
 8005772:	eb1a 0303 	adds.w	r3, sl, r3
 8005776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800577a:	464b      	mov	r3, r9
 800577c:	eb4b 0303 	adc.w	r3, fp, r3
 8005780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005790:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005798:	460b      	mov	r3, r1
 800579a:	18db      	adds	r3, r3, r3
 800579c:	643b      	str	r3, [r7, #64]	@ 0x40
 800579e:	4613      	mov	r3, r2
 80057a0:	eb42 0303 	adc.w	r3, r2, r3
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057ae:	f7fa ff2b 	bl	8000608 <__aeabi_uldivmod>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	4b3b      	ldr	r3, [pc, #236]	@ (80058a8 <UART_SetConfig+0x2d4>)
 80057ba:	fba3 2301 	umull	r2, r3, r3, r1
 80057be:	095b      	lsrs	r3, r3, #5
 80057c0:	2264      	movs	r2, #100	@ 0x64
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	1acb      	subs	r3, r1, r3
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057ce:	4b36      	ldr	r3, [pc, #216]	@ (80058a8 <UART_SetConfig+0x2d4>)
 80057d0:	fba3 2302 	umull	r2, r3, r3, r2
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057dc:	441c      	add	r4, r3
 80057de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	1891      	adds	r1, r2, r2
 80057f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057f8:	415b      	adcs	r3, r3
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005800:	4641      	mov	r1, r8
 8005802:	1851      	adds	r1, r2, r1
 8005804:	6339      	str	r1, [r7, #48]	@ 0x30
 8005806:	4649      	mov	r1, r9
 8005808:	414b      	adcs	r3, r1
 800580a:	637b      	str	r3, [r7, #52]	@ 0x34
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005818:	4659      	mov	r1, fp
 800581a:	00cb      	lsls	r3, r1, #3
 800581c:	4651      	mov	r1, sl
 800581e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005822:	4651      	mov	r1, sl
 8005824:	00ca      	lsls	r2, r1, #3
 8005826:	4610      	mov	r0, r2
 8005828:	4619      	mov	r1, r3
 800582a:	4603      	mov	r3, r0
 800582c:	4642      	mov	r2, r8
 800582e:	189b      	adds	r3, r3, r2
 8005830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005834:	464b      	mov	r3, r9
 8005836:	460a      	mov	r2, r1
 8005838:	eb42 0303 	adc.w	r3, r2, r3
 800583c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800584c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005854:	460b      	mov	r3, r1
 8005856:	18db      	adds	r3, r3, r3
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	4613      	mov	r3, r2
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800586a:	f7fa fecd 	bl	8000608 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <UART_SetConfig+0x2d4>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	2164      	movs	r1, #100	@ 0x64
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	3332      	adds	r3, #50	@ 0x32
 8005886:	4a08      	ldr	r2, [pc, #32]	@ (80058a8 <UART_SetConfig+0x2d4>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	f003 0207 	and.w	r2, r3, #7
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4422      	add	r2, r4
 800589a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800589c:	e106      	b.n	8005aac <UART_SetConfig+0x4d8>
 800589e:	bf00      	nop
 80058a0:	40011000 	.word	0x40011000
 80058a4:	40011400 	.word	0x40011400
 80058a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b0:	2200      	movs	r2, #0
 80058b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058be:	4642      	mov	r2, r8
 80058c0:	464b      	mov	r3, r9
 80058c2:	1891      	adds	r1, r2, r2
 80058c4:	6239      	str	r1, [r7, #32]
 80058c6:	415b      	adcs	r3, r3
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ce:	4641      	mov	r1, r8
 80058d0:	1854      	adds	r4, r2, r1
 80058d2:	4649      	mov	r1, r9
 80058d4:	eb43 0501 	adc.w	r5, r3, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	00eb      	lsls	r3, r5, #3
 80058e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058e6:	00e2      	lsls	r2, r4, #3
 80058e8:	4614      	mov	r4, r2
 80058ea:	461d      	mov	r5, r3
 80058ec:	4643      	mov	r3, r8
 80058ee:	18e3      	adds	r3, r4, r3
 80058f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058f4:	464b      	mov	r3, r9
 80058f6:	eb45 0303 	adc.w	r3, r5, r3
 80058fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800590a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800591a:	4629      	mov	r1, r5
 800591c:	008b      	lsls	r3, r1, #2
 800591e:	4621      	mov	r1, r4
 8005920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005924:	4621      	mov	r1, r4
 8005926:	008a      	lsls	r2, r1, #2
 8005928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800592c:	f7fa fe6c 	bl	8000608 <__aeabi_uldivmod>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4b60      	ldr	r3, [pc, #384]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 8005936:	fba3 2302 	umull	r2, r3, r3, r2
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	011c      	lsls	r4, r3, #4
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005948:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800594c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	61b9      	str	r1, [r7, #24]
 8005958:	415b      	adcs	r3, r3
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005960:	4641      	mov	r1, r8
 8005962:	1851      	adds	r1, r2, r1
 8005964:	6139      	str	r1, [r7, #16]
 8005966:	4649      	mov	r1, r9
 8005968:	414b      	adcs	r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	00cb      	lsls	r3, r1, #3
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005982:	4651      	mov	r1, sl
 8005984:	00ca      	lsls	r2, r1, #3
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	4603      	mov	r3, r0
 800598c:	4642      	mov	r2, r8
 800598e:	189b      	adds	r3, r3, r2
 8005990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005994:	464b      	mov	r3, r9
 8005996:	460a      	mov	r2, r1
 8005998:	eb42 0303 	adc.w	r3, r2, r3
 800599c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059b8:	4649      	mov	r1, r9
 80059ba:	008b      	lsls	r3, r1, #2
 80059bc:	4641      	mov	r1, r8
 80059be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c2:	4641      	mov	r1, r8
 80059c4:	008a      	lsls	r2, r1, #2
 80059c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059ca:	f7fa fe1d 	bl	8000608 <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	4b38      	ldr	r3, [pc, #224]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 80059d6:	fba3 2301 	umull	r2, r3, r3, r1
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	2264      	movs	r2, #100	@ 0x64
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	1acb      	subs	r3, r1, r3
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	3332      	adds	r3, #50	@ 0x32
 80059e8:	4a33      	ldr	r2, [pc, #204]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059f4:	441c      	add	r4, r3
 80059f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059fa:	2200      	movs	r2, #0
 80059fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80059fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	1891      	adds	r1, r2, r2
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	415b      	adcs	r3, r3
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a14:	4641      	mov	r1, r8
 8005a16:	1851      	adds	r1, r2, r1
 8005a18:	6039      	str	r1, [r7, #0]
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	414b      	adcs	r3, r1
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	00cb      	lsls	r3, r1, #3
 8005a30:	4651      	mov	r1, sl
 8005a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a36:	4651      	mov	r1, sl
 8005a38:	00ca      	lsls	r2, r1, #3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4642      	mov	r2, r8
 8005a42:	189b      	adds	r3, r3, r2
 8005a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a46:	464b      	mov	r3, r9
 8005a48:	460a      	mov	r2, r1
 8005a4a:	eb42 0303 	adc.w	r3, r2, r3
 8005a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a68:	4649      	mov	r1, r9
 8005a6a:	008b      	lsls	r3, r1, #2
 8005a6c:	4641      	mov	r1, r8
 8005a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a72:	4641      	mov	r1, r8
 8005a74:	008a      	lsls	r2, r1, #2
 8005a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a7a:	f7fa fdc5 	bl	8000608 <__aeabi_uldivmod>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 8005a84:	fba3 1302 	umull	r1, r3, r3, r2
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	2164      	movs	r1, #100	@ 0x64
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	3332      	adds	r3, #50	@ 0x32
 8005a96:	4a08      	ldr	r2, [pc, #32]	@ (8005ab8 <UART_SetConfig+0x4e4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	095b      	lsrs	r3, r3, #5
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4422      	add	r2, r4
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab8:	51eb851f 	.word	0x51eb851f

08005abc <sniprintf>:
 8005abc:	b40c      	push	{r2, r3}
 8005abe:	b530      	push	{r4, r5, lr}
 8005ac0:	4b18      	ldr	r3, [pc, #96]	@ (8005b24 <sniprintf+0x68>)
 8005ac2:	1e0c      	subs	r4, r1, #0
 8005ac4:	681d      	ldr	r5, [r3, #0]
 8005ac6:	b09d      	sub	sp, #116	@ 0x74
 8005ac8:	da08      	bge.n	8005adc <sniprintf+0x20>
 8005aca:	238b      	movs	r3, #139	@ 0x8b
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad2:	b01d      	add	sp, #116	@ 0x74
 8005ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad8:	b002      	add	sp, #8
 8005ada:	4770      	bx	lr
 8005adc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ae0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005aea:	bf14      	ite	ne
 8005aec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005af0:	4623      	moveq	r3, r4
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	9307      	str	r3, [sp, #28]
 8005af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005afa:	9002      	str	r0, [sp, #8]
 8005afc:	9006      	str	r0, [sp, #24]
 8005afe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b02:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b04:	ab21      	add	r3, sp, #132	@ 0x84
 8005b06:	a902      	add	r1, sp, #8
 8005b08:	4628      	mov	r0, r5
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	f000 f9a4 	bl	8005e58 <_svfiprintf_r>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	bfbc      	itt	lt
 8005b14:	238b      	movlt	r3, #139	@ 0x8b
 8005b16:	602b      	strlt	r3, [r5, #0]
 8005b18:	2c00      	cmp	r4, #0
 8005b1a:	d0da      	beq.n	8005ad2 <sniprintf+0x16>
 8005b1c:	9b02      	ldr	r3, [sp, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e7d6      	b.n	8005ad2 <sniprintf+0x16>
 8005b24:	20000018 	.word	0x20000018

08005b28 <memcmp>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	3901      	subs	r1, #1
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4290      	cmp	r0, r2
 8005b30:	d101      	bne.n	8005b36 <memcmp+0xe>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e005      	b.n	8005b42 <memcmp+0x1a>
 8005b36:	7803      	ldrb	r3, [r0, #0]
 8005b38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	d001      	beq.n	8005b44 <memcmp+0x1c>
 8005b40:	1b18      	subs	r0, r3, r4
 8005b42:	bd10      	pop	{r4, pc}
 8005b44:	3001      	adds	r0, #1
 8005b46:	e7f2      	b.n	8005b2e <memcmp+0x6>

08005b48 <memset>:
 8005b48:	4402      	add	r2, r0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d100      	bne.n	8005b52 <memset+0xa>
 8005b50:	4770      	bx	lr
 8005b52:	f803 1b01 	strb.w	r1, [r3], #1
 8005b56:	e7f9      	b.n	8005b4c <memset+0x4>

08005b58 <__errno>:
 8005b58:	4b01      	ldr	r3, [pc, #4]	@ (8005b60 <__errno+0x8>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000018 	.word	0x20000018

08005b64 <__libc_init_array>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	4d0d      	ldr	r5, [pc, #52]	@ (8005b9c <__libc_init_array+0x38>)
 8005b68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ba0 <__libc_init_array+0x3c>)
 8005b6a:	1b64      	subs	r4, r4, r5
 8005b6c:	10a4      	asrs	r4, r4, #2
 8005b6e:	2600      	movs	r6, #0
 8005b70:	42a6      	cmp	r6, r4
 8005b72:	d109      	bne.n	8005b88 <__libc_init_array+0x24>
 8005b74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ba4 <__libc_init_array+0x40>)
 8005b76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ba8 <__libc_init_array+0x44>)
 8005b78:	f000 fc64 	bl	8006444 <_init>
 8005b7c:	1b64      	subs	r4, r4, r5
 8005b7e:	10a4      	asrs	r4, r4, #2
 8005b80:	2600      	movs	r6, #0
 8005b82:	42a6      	cmp	r6, r4
 8005b84:	d105      	bne.n	8005b92 <__libc_init_array+0x2e>
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8c:	4798      	blx	r3
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7ee      	b.n	8005b70 <__libc_init_array+0xc>
 8005b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b96:	4798      	blx	r3
 8005b98:	3601      	adds	r6, #1
 8005b9a:	e7f2      	b.n	8005b82 <__libc_init_array+0x1e>
 8005b9c:	08006a74 	.word	0x08006a74
 8005ba0:	08006a74 	.word	0x08006a74
 8005ba4:	08006a74 	.word	0x08006a74
 8005ba8:	08006a78 	.word	0x08006a78

08005bac <__retarget_lock_acquire_recursive>:
 8005bac:	4770      	bx	lr

08005bae <__retarget_lock_release_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <_free_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d041      	beq.n	8005c3c <_free_r+0x8c>
 8005bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bbc:	1f0c      	subs	r4, r1, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	bfb8      	it	lt
 8005bc2:	18e4      	addlt	r4, r4, r3
 8005bc4:	f000 f8e0 	bl	8005d88 <__malloc_lock>
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c40 <_free_r+0x90>)
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	b933      	cbnz	r3, 8005bdc <_free_r+0x2c>
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd8:	f000 b8dc 	b.w	8005d94 <__malloc_unlock>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d908      	bls.n	8005bf2 <_free_r+0x42>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	1821      	adds	r1, r4, r0
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf01      	itttt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	1809      	addeq	r1, r1, r0
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	e7ed      	b.n	8005bce <_free_r+0x1e>
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b10b      	cbz	r3, 8005bfc <_free_r+0x4c>
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d9fa      	bls.n	8005bf2 <_free_r+0x42>
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	1850      	adds	r0, r2, r1
 8005c00:	42a0      	cmp	r0, r4
 8005c02:	d10b      	bne.n	8005c1c <_free_r+0x6c>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	4401      	add	r1, r0
 8005c08:	1850      	adds	r0, r2, r1
 8005c0a:	4283      	cmp	r3, r0
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	d1e0      	bne.n	8005bd2 <_free_r+0x22>
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	4408      	add	r0, r1
 8005c18:	6010      	str	r0, [r2, #0]
 8005c1a:	e7da      	b.n	8005bd2 <_free_r+0x22>
 8005c1c:	d902      	bls.n	8005c24 <_free_r+0x74>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	602b      	str	r3, [r5, #0]
 8005c22:	e7d6      	b.n	8005bd2 <_free_r+0x22>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	1821      	adds	r1, r4, r0
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf04      	itt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	bf04      	itt	eq
 8005c34:	1809      	addeq	r1, r1, r0
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	6054      	str	r4, [r2, #4]
 8005c3a:	e7ca      	b.n	8005bd2 <_free_r+0x22>
 8005c3c:	bd38      	pop	{r3, r4, r5, pc}
 8005c3e:	bf00      	nop
 8005c40:	2000034c 	.word	0x2000034c

08005c44 <sbrk_aligned>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4e0f      	ldr	r6, [pc, #60]	@ (8005c84 <sbrk_aligned+0x40>)
 8005c48:	460c      	mov	r4, r1
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	b911      	cbnz	r1, 8005c56 <sbrk_aligned+0x12>
 8005c50:	f000 fba4 	bl	800639c <_sbrk_r>
 8005c54:	6030      	str	r0, [r6, #0]
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 fb9f 	bl	800639c <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d103      	bne.n	8005c6a <sbrk_aligned+0x26>
 8005c62:	f04f 34ff 	mov.w	r4, #4294967295
 8005c66:	4620      	mov	r0, r4
 8005c68:	bd70      	pop	{r4, r5, r6, pc}
 8005c6a:	1cc4      	adds	r4, r0, #3
 8005c6c:	f024 0403 	bic.w	r4, r4, #3
 8005c70:	42a0      	cmp	r0, r4
 8005c72:	d0f8      	beq.n	8005c66 <sbrk_aligned+0x22>
 8005c74:	1a21      	subs	r1, r4, r0
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fb90 	bl	800639c <_sbrk_r>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d1f2      	bne.n	8005c66 <sbrk_aligned+0x22>
 8005c80:	e7ef      	b.n	8005c62 <sbrk_aligned+0x1e>
 8005c82:	bf00      	nop
 8005c84:	20000348 	.word	0x20000348

08005c88 <_malloc_r>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	1ccd      	adds	r5, r1, #3
 8005c8e:	f025 0503 	bic.w	r5, r5, #3
 8005c92:	3508      	adds	r5, #8
 8005c94:	2d0c      	cmp	r5, #12
 8005c96:	bf38      	it	cc
 8005c98:	250c      	movcc	r5, #12
 8005c9a:	2d00      	cmp	r5, #0
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	db01      	blt.n	8005ca4 <_malloc_r+0x1c>
 8005ca0:	42a9      	cmp	r1, r5
 8005ca2:	d904      	bls.n	8005cae <_malloc_r+0x26>
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d84 <_malloc_r+0xfc>
 8005cb2:	f000 f869 	bl	8005d88 <__malloc_lock>
 8005cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cba:	461c      	mov	r4, r3
 8005cbc:	bb44      	cbnz	r4, 8005d10 <_malloc_r+0x88>
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff ffbf 	bl	8005c44 <sbrk_aligned>
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	4604      	mov	r4, r0
 8005cca:	d158      	bne.n	8005d7e <_malloc_r+0xf6>
 8005ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8005cd0:	4627      	mov	r7, r4
 8005cd2:	2f00      	cmp	r7, #0
 8005cd4:	d143      	bne.n	8005d5e <_malloc_r+0xd6>
 8005cd6:	2c00      	cmp	r4, #0
 8005cd8:	d04b      	beq.n	8005d72 <_malloc_r+0xea>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	4639      	mov	r1, r7
 8005cde:	4630      	mov	r0, r6
 8005ce0:	eb04 0903 	add.w	r9, r4, r3
 8005ce4:	f000 fb5a 	bl	800639c <_sbrk_r>
 8005ce8:	4581      	cmp	r9, r0
 8005cea:	d142      	bne.n	8005d72 <_malloc_r+0xea>
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	1a6d      	subs	r5, r5, r1
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ffa6 	bl	8005c44 <sbrk_aligned>
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	d03a      	beq.n	8005d72 <_malloc_r+0xea>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	442b      	add	r3, r5
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	f8d8 3000 	ldr.w	r3, [r8]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	bb62      	cbnz	r2, 8005d64 <_malloc_r+0xdc>
 8005d0a:	f8c8 7000 	str.w	r7, [r8]
 8005d0e:	e00f      	b.n	8005d30 <_malloc_r+0xa8>
 8005d10:	6822      	ldr	r2, [r4, #0]
 8005d12:	1b52      	subs	r2, r2, r5
 8005d14:	d420      	bmi.n	8005d58 <_malloc_r+0xd0>
 8005d16:	2a0b      	cmp	r2, #11
 8005d18:	d917      	bls.n	8005d4a <_malloc_r+0xc2>
 8005d1a:	1961      	adds	r1, r4, r5
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	6025      	str	r5, [r4, #0]
 8005d20:	bf18      	it	ne
 8005d22:	6059      	strne	r1, [r3, #4]
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	bf08      	it	eq
 8005d28:	f8c8 1000 	streq.w	r1, [r8]
 8005d2c:	5162      	str	r2, [r4, r5]
 8005d2e:	604b      	str	r3, [r1, #4]
 8005d30:	4630      	mov	r0, r6
 8005d32:	f000 f82f 	bl	8005d94 <__malloc_unlock>
 8005d36:	f104 000b 	add.w	r0, r4, #11
 8005d3a:	1d23      	adds	r3, r4, #4
 8005d3c:	f020 0007 	bic.w	r0, r0, #7
 8005d40:	1ac2      	subs	r2, r0, r3
 8005d42:	bf1c      	itt	ne
 8005d44:	1a1b      	subne	r3, r3, r0
 8005d46:	50a3      	strne	r3, [r4, r2]
 8005d48:	e7af      	b.n	8005caa <_malloc_r+0x22>
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	bf0c      	ite	eq
 8005d50:	f8c8 2000 	streq.w	r2, [r8]
 8005d54:	605a      	strne	r2, [r3, #4]
 8005d56:	e7eb      	b.n	8005d30 <_malloc_r+0xa8>
 8005d58:	4623      	mov	r3, r4
 8005d5a:	6864      	ldr	r4, [r4, #4]
 8005d5c:	e7ae      	b.n	8005cbc <_malloc_r+0x34>
 8005d5e:	463c      	mov	r4, r7
 8005d60:	687f      	ldr	r7, [r7, #4]
 8005d62:	e7b6      	b.n	8005cd2 <_malloc_r+0x4a>
 8005d64:	461a      	mov	r2, r3
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	42a3      	cmp	r3, r4
 8005d6a:	d1fb      	bne.n	8005d64 <_malloc_r+0xdc>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6053      	str	r3, [r2, #4]
 8005d70:	e7de      	b.n	8005d30 <_malloc_r+0xa8>
 8005d72:	230c      	movs	r3, #12
 8005d74:	6033      	str	r3, [r6, #0]
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f80c 	bl	8005d94 <__malloc_unlock>
 8005d7c:	e794      	b.n	8005ca8 <_malloc_r+0x20>
 8005d7e:	6005      	str	r5, [r0, #0]
 8005d80:	e7d6      	b.n	8005d30 <_malloc_r+0xa8>
 8005d82:	bf00      	nop
 8005d84:	2000034c 	.word	0x2000034c

08005d88 <__malloc_lock>:
 8005d88:	4801      	ldr	r0, [pc, #4]	@ (8005d90 <__malloc_lock+0x8>)
 8005d8a:	f7ff bf0f 	b.w	8005bac <__retarget_lock_acquire_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20000344 	.word	0x20000344

08005d94 <__malloc_unlock>:
 8005d94:	4801      	ldr	r0, [pc, #4]	@ (8005d9c <__malloc_unlock+0x8>)
 8005d96:	f7ff bf0a 	b.w	8005bae <__retarget_lock_release_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	20000344 	.word	0x20000344

08005da0 <__ssputs_r>:
 8005da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	688e      	ldr	r6, [r1, #8]
 8005da6:	461f      	mov	r7, r3
 8005da8:	42be      	cmp	r6, r7
 8005daa:	680b      	ldr	r3, [r1, #0]
 8005dac:	4682      	mov	sl, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	4690      	mov	r8, r2
 8005db2:	d82d      	bhi.n	8005e10 <__ssputs_r+0x70>
 8005db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005dbc:	d026      	beq.n	8005e0c <__ssputs_r+0x6c>
 8005dbe:	6965      	ldr	r5, [r4, #20]
 8005dc0:	6909      	ldr	r1, [r1, #16]
 8005dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dc6:	eba3 0901 	sub.w	r9, r3, r1
 8005dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dce:	1c7b      	adds	r3, r7, #1
 8005dd0:	444b      	add	r3, r9
 8005dd2:	106d      	asrs	r5, r5, #1
 8005dd4:	429d      	cmp	r5, r3
 8005dd6:	bf38      	it	cc
 8005dd8:	461d      	movcc	r5, r3
 8005dda:	0553      	lsls	r3, r2, #21
 8005ddc:	d527      	bpl.n	8005e2e <__ssputs_r+0x8e>
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7ff ff52 	bl	8005c88 <_malloc_r>
 8005de4:	4606      	mov	r6, r0
 8005de6:	b360      	cbz	r0, 8005e42 <__ssputs_r+0xa2>
 8005de8:	6921      	ldr	r1, [r4, #16]
 8005dea:	464a      	mov	r2, r9
 8005dec:	f000 fae6 	bl	80063bc <memcpy>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	6126      	str	r6, [r4, #16]
 8005dfe:	6165      	str	r5, [r4, #20]
 8005e00:	444e      	add	r6, r9
 8005e02:	eba5 0509 	sub.w	r5, r5, r9
 8005e06:	6026      	str	r6, [r4, #0]
 8005e08:	60a5      	str	r5, [r4, #8]
 8005e0a:	463e      	mov	r6, r7
 8005e0c:	42be      	cmp	r6, r7
 8005e0e:	d900      	bls.n	8005e12 <__ssputs_r+0x72>
 8005e10:	463e      	mov	r6, r7
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	4632      	mov	r2, r6
 8005e16:	4641      	mov	r1, r8
 8005e18:	f000 faa6 	bl	8006368 <memmove>
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	1b9b      	subs	r3, r3, r6
 8005e20:	60a3      	str	r3, [r4, #8]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	4433      	add	r3, r6
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e2e:	462a      	mov	r2, r5
 8005e30:	f000 fad2 	bl	80063d8 <_realloc_r>
 8005e34:	4606      	mov	r6, r0
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d1e0      	bne.n	8005dfc <__ssputs_r+0x5c>
 8005e3a:	6921      	ldr	r1, [r4, #16]
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	f7ff feb7 	bl	8005bb0 <_free_r>
 8005e42:	230c      	movs	r3, #12
 8005e44:	f8ca 3000 	str.w	r3, [sl]
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	f04f 30ff 	mov.w	r0, #4294967295
 8005e54:	e7e9      	b.n	8005e2a <__ssputs_r+0x8a>
	...

08005e58 <_svfiprintf_r>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	4698      	mov	r8, r3
 8005e5e:	898b      	ldrh	r3, [r1, #12]
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	b09d      	sub	sp, #116	@ 0x74
 8005e64:	4607      	mov	r7, r0
 8005e66:	460d      	mov	r5, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	d510      	bpl.n	8005e8e <_svfiprintf_r+0x36>
 8005e6c:	690b      	ldr	r3, [r1, #16]
 8005e6e:	b973      	cbnz	r3, 8005e8e <_svfiprintf_r+0x36>
 8005e70:	2140      	movs	r1, #64	@ 0x40
 8005e72:	f7ff ff09 	bl	8005c88 <_malloc_r>
 8005e76:	6028      	str	r0, [r5, #0]
 8005e78:	6128      	str	r0, [r5, #16]
 8005e7a:	b930      	cbnz	r0, 8005e8a <_svfiprintf_r+0x32>
 8005e7c:	230c      	movs	r3, #12
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b01d      	add	sp, #116	@ 0x74
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8a:	2340      	movs	r3, #64	@ 0x40
 8005e8c:	616b      	str	r3, [r5, #20]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e92:	2320      	movs	r3, #32
 8005e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e9c:	2330      	movs	r3, #48	@ 0x30
 8005e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800603c <_svfiprintf_r+0x1e4>
 8005ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ea6:	f04f 0901 	mov.w	r9, #1
 8005eaa:	4623      	mov	r3, r4
 8005eac:	469a      	mov	sl, r3
 8005eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb2:	b10a      	cbz	r2, 8005eb8 <_svfiprintf_r+0x60>
 8005eb4:	2a25      	cmp	r2, #37	@ 0x25
 8005eb6:	d1f9      	bne.n	8005eac <_svfiprintf_r+0x54>
 8005eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ebc:	d00b      	beq.n	8005ed6 <_svfiprintf_r+0x7e>
 8005ebe:	465b      	mov	r3, fp
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff ff6b 	bl	8005da0 <__ssputs_r>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f000 80a7 	beq.w	800601e <_svfiprintf_r+0x1c6>
 8005ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ed2:	445a      	add	r2, fp
 8005ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 809f 	beq.w	800601e <_svfiprintf_r+0x1c6>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eea:	f10a 0a01 	add.w	sl, sl, #1
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	9307      	str	r3, [sp, #28]
 8005ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ef8:	4654      	mov	r4, sl
 8005efa:	2205      	movs	r2, #5
 8005efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f00:	484e      	ldr	r0, [pc, #312]	@ (800603c <_svfiprintf_r+0x1e4>)
 8005f02:	f7fa f975 	bl	80001f0 <memchr>
 8005f06:	9a04      	ldr	r2, [sp, #16]
 8005f08:	b9d8      	cbnz	r0, 8005f42 <_svfiprintf_r+0xea>
 8005f0a:	06d0      	lsls	r0, r2, #27
 8005f0c:	bf44      	itt	mi
 8005f0e:	2320      	movmi	r3, #32
 8005f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f14:	0711      	lsls	r1, r2, #28
 8005f16:	bf44      	itt	mi
 8005f18:	232b      	movmi	r3, #43	@ 0x2b
 8005f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f24:	d015      	beq.n	8005f52 <_svfiprintf_r+0xfa>
 8005f26:	9a07      	ldr	r2, [sp, #28]
 8005f28:	4654      	mov	r4, sl
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f04f 0c0a 	mov.w	ip, #10
 8005f30:	4621      	mov	r1, r4
 8005f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f36:	3b30      	subs	r3, #48	@ 0x30
 8005f38:	2b09      	cmp	r3, #9
 8005f3a:	d94b      	bls.n	8005fd4 <_svfiprintf_r+0x17c>
 8005f3c:	b1b0      	cbz	r0, 8005f6c <_svfiprintf_r+0x114>
 8005f3e:	9207      	str	r2, [sp, #28]
 8005f40:	e014      	b.n	8005f6c <_svfiprintf_r+0x114>
 8005f42:	eba0 0308 	sub.w	r3, r0, r8
 8005f46:	fa09 f303 	lsl.w	r3, r9, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	46a2      	mov	sl, r4
 8005f50:	e7d2      	b.n	8005ef8 <_svfiprintf_r+0xa0>
 8005f52:	9b03      	ldr	r3, [sp, #12]
 8005f54:	1d19      	adds	r1, r3, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	9103      	str	r1, [sp, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bfbb      	ittet	lt
 8005f5e:	425b      	neglt	r3, r3
 8005f60:	f042 0202 	orrlt.w	r2, r2, #2
 8005f64:	9307      	strge	r3, [sp, #28]
 8005f66:	9307      	strlt	r3, [sp, #28]
 8005f68:	bfb8      	it	lt
 8005f6a:	9204      	strlt	r2, [sp, #16]
 8005f6c:	7823      	ldrb	r3, [r4, #0]
 8005f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f70:	d10a      	bne.n	8005f88 <_svfiprintf_r+0x130>
 8005f72:	7863      	ldrb	r3, [r4, #1]
 8005f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f76:	d132      	bne.n	8005fde <_svfiprintf_r+0x186>
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	1d1a      	adds	r2, r3, #4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	9203      	str	r2, [sp, #12]
 8005f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f84:	3402      	adds	r4, #2
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800604c <_svfiprintf_r+0x1f4>
 8005f8c:	7821      	ldrb	r1, [r4, #0]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	4650      	mov	r0, sl
 8005f92:	f7fa f92d 	bl	80001f0 <memchr>
 8005f96:	b138      	cbz	r0, 8005fa8 <_svfiprintf_r+0x150>
 8005f98:	9b04      	ldr	r3, [sp, #16]
 8005f9a:	eba0 000a 	sub.w	r0, r0, sl
 8005f9e:	2240      	movs	r2, #64	@ 0x40
 8005fa0:	4082      	lsls	r2, r0
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	3401      	adds	r4, #1
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fac:	4824      	ldr	r0, [pc, #144]	@ (8006040 <_svfiprintf_r+0x1e8>)
 8005fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fb2:	2206      	movs	r2, #6
 8005fb4:	f7fa f91c 	bl	80001f0 <memchr>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d036      	beq.n	800602a <_svfiprintf_r+0x1d2>
 8005fbc:	4b21      	ldr	r3, [pc, #132]	@ (8006044 <_svfiprintf_r+0x1ec>)
 8005fbe:	bb1b      	cbnz	r3, 8006008 <_svfiprintf_r+0x1b0>
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	3307      	adds	r3, #7
 8005fc4:	f023 0307 	bic.w	r3, r3, #7
 8005fc8:	3308      	adds	r3, #8
 8005fca:	9303      	str	r3, [sp, #12]
 8005fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fce:	4433      	add	r3, r6
 8005fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fd2:	e76a      	b.n	8005eaa <_svfiprintf_r+0x52>
 8005fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fd8:	460c      	mov	r4, r1
 8005fda:	2001      	movs	r0, #1
 8005fdc:	e7a8      	b.n	8005f30 <_svfiprintf_r+0xd8>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	3401      	adds	r4, #1
 8005fe2:	9305      	str	r3, [sp, #20]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f04f 0c0a 	mov.w	ip, #10
 8005fea:	4620      	mov	r0, r4
 8005fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ff0:	3a30      	subs	r2, #48	@ 0x30
 8005ff2:	2a09      	cmp	r2, #9
 8005ff4:	d903      	bls.n	8005ffe <_svfiprintf_r+0x1a6>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0c6      	beq.n	8005f88 <_svfiprintf_r+0x130>
 8005ffa:	9105      	str	r1, [sp, #20]
 8005ffc:	e7c4      	b.n	8005f88 <_svfiprintf_r+0x130>
 8005ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006002:	4604      	mov	r4, r0
 8006004:	2301      	movs	r3, #1
 8006006:	e7f0      	b.n	8005fea <_svfiprintf_r+0x192>
 8006008:	ab03      	add	r3, sp, #12
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	462a      	mov	r2, r5
 800600e:	4b0e      	ldr	r3, [pc, #56]	@ (8006048 <_svfiprintf_r+0x1f0>)
 8006010:	a904      	add	r1, sp, #16
 8006012:	4638      	mov	r0, r7
 8006014:	f3af 8000 	nop.w
 8006018:	1c42      	adds	r2, r0, #1
 800601a:	4606      	mov	r6, r0
 800601c:	d1d6      	bne.n	8005fcc <_svfiprintf_r+0x174>
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	065b      	lsls	r3, r3, #25
 8006022:	f53f af2d 	bmi.w	8005e80 <_svfiprintf_r+0x28>
 8006026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006028:	e72c      	b.n	8005e84 <_svfiprintf_r+0x2c>
 800602a:	ab03      	add	r3, sp, #12
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	462a      	mov	r2, r5
 8006030:	4b05      	ldr	r3, [pc, #20]	@ (8006048 <_svfiprintf_r+0x1f0>)
 8006032:	a904      	add	r1, sp, #16
 8006034:	4638      	mov	r0, r7
 8006036:	f000 f879 	bl	800612c <_printf_i>
 800603a:	e7ed      	b.n	8006018 <_svfiprintf_r+0x1c0>
 800603c:	08006a38 	.word	0x08006a38
 8006040:	08006a42 	.word	0x08006a42
 8006044:	00000000 	.word	0x00000000
 8006048:	08005da1 	.word	0x08005da1
 800604c:	08006a3e 	.word	0x08006a3e

08006050 <_printf_common>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	4616      	mov	r6, r2
 8006056:	4698      	mov	r8, r3
 8006058:	688a      	ldr	r2, [r1, #8]
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006060:	4293      	cmp	r3, r2
 8006062:	bfb8      	it	lt
 8006064:	4613      	movlt	r3, r2
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800606c:	4607      	mov	r7, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b10a      	cbz	r2, 8006076 <_printf_common+0x26>
 8006072:	3301      	adds	r3, #1
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	0699      	lsls	r1, r3, #26
 800607a:	bf42      	ittt	mi
 800607c:	6833      	ldrmi	r3, [r6, #0]
 800607e:	3302      	addmi	r3, #2
 8006080:	6033      	strmi	r3, [r6, #0]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d106      	bne.n	8006098 <_printf_common+0x48>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	6832      	ldr	r2, [r6, #0]
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc26      	bgt.n	80060e6 <_printf_common+0x96>
 8006098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	3b00      	subs	r3, #0
 80060a0:	bf18      	it	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	0692      	lsls	r2, r2, #26
 80060a6:	d42b      	bmi.n	8006100 <_printf_common+0xb0>
 80060a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060ac:	4641      	mov	r1, r8
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c8      	blx	r9
 80060b2:	3001      	adds	r0, #1
 80060b4:	d01e      	beq.n	80060f4 <_printf_common+0xa4>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	f003 0306 	and.w	r3, r3, #6
 80060be:	2b04      	cmp	r3, #4
 80060c0:	bf02      	ittt	eq
 80060c2:	68e5      	ldreq	r5, [r4, #12]
 80060c4:	6833      	ldreq	r3, [r6, #0]
 80060c6:	1aed      	subeq	r5, r5, r3
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	bf0c      	ite	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	2500      	movne	r5, #0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	bfc4      	itt	gt
 80060d6:	1a9b      	subgt	r3, r3, r2
 80060d8:	18ed      	addgt	r5, r5, r3
 80060da:	2600      	movs	r6, #0
 80060dc:	341a      	adds	r4, #26
 80060de:	42b5      	cmp	r5, r6
 80060e0:	d11a      	bne.n	8006118 <_printf_common+0xc8>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e008      	b.n	80060f8 <_printf_common+0xa8>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4652      	mov	r2, sl
 80060ea:	4641      	mov	r1, r8
 80060ec:	4638      	mov	r0, r7
 80060ee:	47c8      	blx	r9
 80060f0:	3001      	adds	r0, #1
 80060f2:	d103      	bne.n	80060fc <_printf_common+0xac>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	3501      	adds	r5, #1
 80060fe:	e7c6      	b.n	800608e <_printf_common+0x3e>
 8006100:	18e1      	adds	r1, r4, r3
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	2030      	movs	r0, #48	@ 0x30
 8006106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800610a:	4422      	add	r2, r4
 800610c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006114:	3302      	adds	r3, #2
 8006116:	e7c7      	b.n	80060a8 <_printf_common+0x58>
 8006118:	2301      	movs	r3, #1
 800611a:	4622      	mov	r2, r4
 800611c:	4641      	mov	r1, r8
 800611e:	4638      	mov	r0, r7
 8006120:	47c8      	blx	r9
 8006122:	3001      	adds	r0, #1
 8006124:	d0e6      	beq.n	80060f4 <_printf_common+0xa4>
 8006126:	3601      	adds	r6, #1
 8006128:	e7d9      	b.n	80060de <_printf_common+0x8e>
	...

0800612c <_printf_i>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	7e0f      	ldrb	r7, [r1, #24]
 8006132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006134:	2f78      	cmp	r7, #120	@ 0x78
 8006136:	4691      	mov	r9, r2
 8006138:	4680      	mov	r8, r0
 800613a:	460c      	mov	r4, r1
 800613c:	469a      	mov	sl, r3
 800613e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006142:	d807      	bhi.n	8006154 <_printf_i+0x28>
 8006144:	2f62      	cmp	r7, #98	@ 0x62
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x32>
 8006148:	2f00      	cmp	r7, #0
 800614a:	f000 80d1 	beq.w	80062f0 <_printf_i+0x1c4>
 800614e:	2f58      	cmp	r7, #88	@ 0x58
 8006150:	f000 80b8 	beq.w	80062c4 <_printf_i+0x198>
 8006154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800615c:	e03a      	b.n	80061d4 <_printf_i+0xa8>
 800615e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006162:	2b15      	cmp	r3, #21
 8006164:	d8f6      	bhi.n	8006154 <_printf_i+0x28>
 8006166:	a101      	add	r1, pc, #4	@ (adr r1, 800616c <_printf_i+0x40>)
 8006168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061d9 	.word	0x080061d9
 8006174:	08006155 	.word	0x08006155
 8006178:	08006155 	.word	0x08006155
 800617c:	08006155 	.word	0x08006155
 8006180:	08006155 	.word	0x08006155
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006155 	.word	0x08006155
 800618c:	08006155 	.word	0x08006155
 8006190:	08006155 	.word	0x08006155
 8006194:	08006155 	.word	0x08006155
 8006198:	080062d7 	.word	0x080062d7
 800619c:	08006203 	.word	0x08006203
 80061a0:	08006291 	.word	0x08006291
 80061a4:	08006155 	.word	0x08006155
 80061a8:	08006155 	.word	0x08006155
 80061ac:	080062f9 	.word	0x080062f9
 80061b0:	08006155 	.word	0x08006155
 80061b4:	08006203 	.word	0x08006203
 80061b8:	08006155 	.word	0x08006155
 80061bc:	08006155 	.word	0x08006155
 80061c0:	08006299 	.word	0x08006299
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6032      	str	r2, [r6, #0]
 80061cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e09c      	b.n	8006312 <_printf_i+0x1e6>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6031      	str	r1, [r6, #0]
 80061e0:	0606      	lsls	r6, r0, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xbc>
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	e003      	b.n	80061f0 <_printf_i+0xc4>
 80061e8:	0645      	lsls	r5, r0, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xb8>
 80061ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da03      	bge.n	80061fc <_printf_i+0xd0>
 80061f4:	232d      	movs	r3, #45	@ 0x2d
 80061f6:	426d      	negs	r5, r5
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061fc:	4858      	ldr	r0, [pc, #352]	@ (8006360 <_printf_i+0x234>)
 80061fe:	230a      	movs	r3, #10
 8006200:	e011      	b.n	8006226 <_printf_i+0xfa>
 8006202:	6821      	ldr	r1, [r4, #0]
 8006204:	6833      	ldr	r3, [r6, #0]
 8006206:	0608      	lsls	r0, r1, #24
 8006208:	f853 5b04 	ldr.w	r5, [r3], #4
 800620c:	d402      	bmi.n	8006214 <_printf_i+0xe8>
 800620e:	0649      	lsls	r1, r1, #25
 8006210:	bf48      	it	mi
 8006212:	b2ad      	uxthmi	r5, r5
 8006214:	2f6f      	cmp	r7, #111	@ 0x6f
 8006216:	4852      	ldr	r0, [pc, #328]	@ (8006360 <_printf_i+0x234>)
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	bf14      	ite	ne
 800621c:	230a      	movne	r3, #10
 800621e:	2308      	moveq	r3, #8
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006226:	6866      	ldr	r6, [r4, #4]
 8006228:	60a6      	str	r6, [r4, #8]
 800622a:	2e00      	cmp	r6, #0
 800622c:	db05      	blt.n	800623a <_printf_i+0x10e>
 800622e:	6821      	ldr	r1, [r4, #0]
 8006230:	432e      	orrs	r6, r5
 8006232:	f021 0104 	bic.w	r1, r1, #4
 8006236:	6021      	str	r1, [r4, #0]
 8006238:	d04b      	beq.n	80062d2 <_printf_i+0x1a6>
 800623a:	4616      	mov	r6, r2
 800623c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006240:	fb03 5711 	mls	r7, r3, r1, r5
 8006244:	5dc7      	ldrb	r7, [r0, r7]
 8006246:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800624a:	462f      	mov	r7, r5
 800624c:	42bb      	cmp	r3, r7
 800624e:	460d      	mov	r5, r1
 8006250:	d9f4      	bls.n	800623c <_printf_i+0x110>
 8006252:	2b08      	cmp	r3, #8
 8006254:	d10b      	bne.n	800626e <_printf_i+0x142>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	07df      	lsls	r7, r3, #31
 800625a:	d508      	bpl.n	800626e <_printf_i+0x142>
 800625c:	6923      	ldr	r3, [r4, #16]
 800625e:	6861      	ldr	r1, [r4, #4]
 8006260:	4299      	cmp	r1, r3
 8006262:	bfde      	ittt	le
 8006264:	2330      	movle	r3, #48	@ 0x30
 8006266:	f806 3c01 	strble.w	r3, [r6, #-1]
 800626a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800626e:	1b92      	subs	r2, r2, r6
 8006270:	6122      	str	r2, [r4, #16]
 8006272:	f8cd a000 	str.w	sl, [sp]
 8006276:	464b      	mov	r3, r9
 8006278:	aa03      	add	r2, sp, #12
 800627a:	4621      	mov	r1, r4
 800627c:	4640      	mov	r0, r8
 800627e:	f7ff fee7 	bl	8006050 <_printf_common>
 8006282:	3001      	adds	r0, #1
 8006284:	d14a      	bne.n	800631c <_printf_i+0x1f0>
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	b004      	add	sp, #16
 800628c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	f043 0320 	orr.w	r3, r3, #32
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	4832      	ldr	r0, [pc, #200]	@ (8006364 <_printf_i+0x238>)
 800629a:	2778      	movs	r7, #120	@ 0x78
 800629c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	6831      	ldr	r1, [r6, #0]
 80062a4:	061f      	lsls	r7, r3, #24
 80062a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80062aa:	d402      	bmi.n	80062b2 <_printf_i+0x186>
 80062ac:	065f      	lsls	r7, r3, #25
 80062ae:	bf48      	it	mi
 80062b0:	b2ad      	uxthmi	r5, r5
 80062b2:	6031      	str	r1, [r6, #0]
 80062b4:	07d9      	lsls	r1, r3, #31
 80062b6:	bf44      	itt	mi
 80062b8:	f043 0320 	orrmi.w	r3, r3, #32
 80062bc:	6023      	strmi	r3, [r4, #0]
 80062be:	b11d      	cbz	r5, 80062c8 <_printf_i+0x19c>
 80062c0:	2310      	movs	r3, #16
 80062c2:	e7ad      	b.n	8006220 <_printf_i+0xf4>
 80062c4:	4826      	ldr	r0, [pc, #152]	@ (8006360 <_printf_i+0x234>)
 80062c6:	e7e9      	b.n	800629c <_printf_i+0x170>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	f023 0320 	bic.w	r3, r3, #32
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	e7f6      	b.n	80062c0 <_printf_i+0x194>
 80062d2:	4616      	mov	r6, r2
 80062d4:	e7bd      	b.n	8006252 <_printf_i+0x126>
 80062d6:	6833      	ldr	r3, [r6, #0]
 80062d8:	6825      	ldr	r5, [r4, #0]
 80062da:	6961      	ldr	r1, [r4, #20]
 80062dc:	1d18      	adds	r0, r3, #4
 80062de:	6030      	str	r0, [r6, #0]
 80062e0:	062e      	lsls	r6, r5, #24
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	d501      	bpl.n	80062ea <_printf_i+0x1be>
 80062e6:	6019      	str	r1, [r3, #0]
 80062e8:	e002      	b.n	80062f0 <_printf_i+0x1c4>
 80062ea:	0668      	lsls	r0, r5, #25
 80062ec:	d5fb      	bpl.n	80062e6 <_printf_i+0x1ba>
 80062ee:	8019      	strh	r1, [r3, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	4616      	mov	r6, r2
 80062f6:	e7bc      	b.n	8006272 <_printf_i+0x146>
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	6032      	str	r2, [r6, #0]
 80062fe:	681e      	ldr	r6, [r3, #0]
 8006300:	6862      	ldr	r2, [r4, #4]
 8006302:	2100      	movs	r1, #0
 8006304:	4630      	mov	r0, r6
 8006306:	f7f9 ff73 	bl	80001f0 <memchr>
 800630a:	b108      	cbz	r0, 8006310 <_printf_i+0x1e4>
 800630c:	1b80      	subs	r0, r0, r6
 800630e:	6060      	str	r0, [r4, #4]
 8006310:	6863      	ldr	r3, [r4, #4]
 8006312:	6123      	str	r3, [r4, #16]
 8006314:	2300      	movs	r3, #0
 8006316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631a:	e7aa      	b.n	8006272 <_printf_i+0x146>
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	4632      	mov	r2, r6
 8006320:	4649      	mov	r1, r9
 8006322:	4640      	mov	r0, r8
 8006324:	47d0      	blx	sl
 8006326:	3001      	adds	r0, #1
 8006328:	d0ad      	beq.n	8006286 <_printf_i+0x15a>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	079b      	lsls	r3, r3, #30
 800632e:	d413      	bmi.n	8006358 <_printf_i+0x22c>
 8006330:	68e0      	ldr	r0, [r4, #12]
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	4298      	cmp	r0, r3
 8006336:	bfb8      	it	lt
 8006338:	4618      	movlt	r0, r3
 800633a:	e7a6      	b.n	800628a <_printf_i+0x15e>
 800633c:	2301      	movs	r3, #1
 800633e:	4632      	mov	r2, r6
 8006340:	4649      	mov	r1, r9
 8006342:	4640      	mov	r0, r8
 8006344:	47d0      	blx	sl
 8006346:	3001      	adds	r0, #1
 8006348:	d09d      	beq.n	8006286 <_printf_i+0x15a>
 800634a:	3501      	adds	r5, #1
 800634c:	68e3      	ldr	r3, [r4, #12]
 800634e:	9903      	ldr	r1, [sp, #12]
 8006350:	1a5b      	subs	r3, r3, r1
 8006352:	42ab      	cmp	r3, r5
 8006354:	dcf2      	bgt.n	800633c <_printf_i+0x210>
 8006356:	e7eb      	b.n	8006330 <_printf_i+0x204>
 8006358:	2500      	movs	r5, #0
 800635a:	f104 0619 	add.w	r6, r4, #25
 800635e:	e7f5      	b.n	800634c <_printf_i+0x220>
 8006360:	08006a49 	.word	0x08006a49
 8006364:	08006a5a 	.word	0x08006a5a

08006368 <memmove>:
 8006368:	4288      	cmp	r0, r1
 800636a:	b510      	push	{r4, lr}
 800636c:	eb01 0402 	add.w	r4, r1, r2
 8006370:	d902      	bls.n	8006378 <memmove+0x10>
 8006372:	4284      	cmp	r4, r0
 8006374:	4623      	mov	r3, r4
 8006376:	d807      	bhi.n	8006388 <memmove+0x20>
 8006378:	1e43      	subs	r3, r0, #1
 800637a:	42a1      	cmp	r1, r4
 800637c:	d008      	beq.n	8006390 <memmove+0x28>
 800637e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006386:	e7f8      	b.n	800637a <memmove+0x12>
 8006388:	4402      	add	r2, r0
 800638a:	4601      	mov	r1, r0
 800638c:	428a      	cmp	r2, r1
 800638e:	d100      	bne.n	8006392 <memmove+0x2a>
 8006390:	bd10      	pop	{r4, pc}
 8006392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800639a:	e7f7      	b.n	800638c <memmove+0x24>

0800639c <_sbrk_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d06      	ldr	r5, [pc, #24]	@ (80063b8 <_sbrk_r+0x1c>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb fd20 	bl	8001dec <_sbrk>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_sbrk_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_sbrk_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000340 	.word	0x20000340

080063bc <memcpy>:
 80063bc:	440a      	add	r2, r1
 80063be:	4291      	cmp	r1, r2
 80063c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c4:	d100      	bne.n	80063c8 <memcpy+0xc>
 80063c6:	4770      	bx	lr
 80063c8:	b510      	push	{r4, lr}
 80063ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d2:	4291      	cmp	r1, r2
 80063d4:	d1f9      	bne.n	80063ca <memcpy+0xe>
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <_realloc_r>:
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	4607      	mov	r7, r0
 80063de:	4614      	mov	r4, r2
 80063e0:	460d      	mov	r5, r1
 80063e2:	b921      	cbnz	r1, 80063ee <_realloc_r+0x16>
 80063e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e8:	4611      	mov	r1, r2
 80063ea:	f7ff bc4d 	b.w	8005c88 <_malloc_r>
 80063ee:	b92a      	cbnz	r2, 80063fc <_realloc_r+0x24>
 80063f0:	f7ff fbde 	bl	8005bb0 <_free_r>
 80063f4:	4625      	mov	r5, r4
 80063f6:	4628      	mov	r0, r5
 80063f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063fc:	f000 f81a 	bl	8006434 <_malloc_usable_size_r>
 8006400:	4284      	cmp	r4, r0
 8006402:	4606      	mov	r6, r0
 8006404:	d802      	bhi.n	800640c <_realloc_r+0x34>
 8006406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800640a:	d8f4      	bhi.n	80063f6 <_realloc_r+0x1e>
 800640c:	4621      	mov	r1, r4
 800640e:	4638      	mov	r0, r7
 8006410:	f7ff fc3a 	bl	8005c88 <_malloc_r>
 8006414:	4680      	mov	r8, r0
 8006416:	b908      	cbnz	r0, 800641c <_realloc_r+0x44>
 8006418:	4645      	mov	r5, r8
 800641a:	e7ec      	b.n	80063f6 <_realloc_r+0x1e>
 800641c:	42b4      	cmp	r4, r6
 800641e:	4622      	mov	r2, r4
 8006420:	4629      	mov	r1, r5
 8006422:	bf28      	it	cs
 8006424:	4632      	movcs	r2, r6
 8006426:	f7ff ffc9 	bl	80063bc <memcpy>
 800642a:	4629      	mov	r1, r5
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff fbbf 	bl	8005bb0 <_free_r>
 8006432:	e7f1      	b.n	8006418 <_realloc_r+0x40>

08006434 <_malloc_usable_size_r>:
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f18      	subs	r0, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfbc      	itt	lt
 800643e:	580b      	ldrlt	r3, [r1, r0]
 8006440:	18c0      	addlt	r0, r0, r3
 8006442:	4770      	bx	lr

08006444 <_init>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	bf00      	nop
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr

08006450 <_fini>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr
