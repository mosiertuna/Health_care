
health_care.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006464  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08006614  08006614  00007614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc4  08006dc4  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006dc4  08006dc4  00007dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dcc  08006dcc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dcc  08006dcc  00007dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dd0  08006dd0  00007dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006dd4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008060  2**0
                  CONTENTS
 10 .bss          00000318  20000060  20000060  00008060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fef  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002681  00000000  00000000  0001907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  0001b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c89  00000000  00000000  0001c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248b7  00000000  00000000  0001d369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012400  00000000  00000000  00041c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd41b  00000000  00000000  00054020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013143b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c4  00000000  00000000  00131480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00135d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080065fc 	.word	0x080065fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080065fc 	.word	0x080065fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295
 8000628:	f04f 30ff 	movne.w	r0, #4294967295
 800062c:	f000 b988 	b.w	8000940 <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9d08      	ldr	r5, [sp, #32]
 800064e:	468e      	mov	lr, r1
 8000650:	4604      	mov	r4, r0
 8000652:	4688      	mov	r8, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d14a      	bne.n	80006ee <__udivmoddi4+0xa6>
 8000658:	428a      	cmp	r2, r1
 800065a:	4617      	mov	r7, r2
 800065c:	d962      	bls.n	8000724 <__udivmoddi4+0xdc>
 800065e:	fab2 f682 	clz	r6, r2
 8000662:	b14e      	cbz	r6, 8000678 <__udivmoddi4+0x30>
 8000664:	f1c6 0320 	rsb	r3, r6, #32
 8000668:	fa01 f806 	lsl.w	r8, r1, r6
 800066c:	fa20 f303 	lsr.w	r3, r0, r3
 8000670:	40b7      	lsls	r7, r6
 8000672:	ea43 0808 	orr.w	r8, r3, r8
 8000676:	40b4      	lsls	r4, r6
 8000678:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	fbb8 f1fe 	udiv	r1, r8, lr
 8000684:	0c23      	lsrs	r3, r4, #16
 8000686:	fb0e 8811 	mls	r8, lr, r1, r8
 800068a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800068e:	fb01 f20c 	mul.w	r2, r1, ip
 8000692:	429a      	cmp	r2, r3
 8000694:	d909      	bls.n	80006aa <__udivmoddi4+0x62>
 8000696:	18fb      	adds	r3, r7, r3
 8000698:	f101 30ff 	add.w	r0, r1, #4294967295
 800069c:	f080 80ea 	bcs.w	8000874 <__udivmoddi4+0x22c>
 80006a0:	429a      	cmp	r2, r3
 80006a2:	f240 80e7 	bls.w	8000874 <__udivmoddi4+0x22c>
 80006a6:	3902      	subs	r1, #2
 80006a8:	443b      	add	r3, r7
 80006aa:	1a9a      	subs	r2, r3, r2
 80006ac:	b2a3      	uxth	r3, r4
 80006ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80006b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80006be:	459c      	cmp	ip, r3
 80006c0:	d909      	bls.n	80006d6 <__udivmoddi4+0x8e>
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006c8:	f080 80d6 	bcs.w	8000878 <__udivmoddi4+0x230>
 80006cc:	459c      	cmp	ip, r3
 80006ce:	f240 80d3 	bls.w	8000878 <__udivmoddi4+0x230>
 80006d2:	443b      	add	r3, r7
 80006d4:	3802      	subs	r0, #2
 80006d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006da:	eba3 030c 	sub.w	r3, r3, ip
 80006de:	2100      	movs	r1, #0
 80006e0:	b11d      	cbz	r5, 80006ea <__udivmoddi4+0xa2>
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	2200      	movs	r2, #0
 80006e6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d905      	bls.n	80006fe <__udivmoddi4+0xb6>
 80006f2:	b10d      	cbz	r5, 80006f8 <__udivmoddi4+0xb0>
 80006f4:	e9c5 0100 	strd	r0, r1, [r5]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4608      	mov	r0, r1
 80006fc:	e7f5      	b.n	80006ea <__udivmoddi4+0xa2>
 80006fe:	fab3 f183 	clz	r1, r3
 8000702:	2900      	cmp	r1, #0
 8000704:	d146      	bne.n	8000794 <__udivmoddi4+0x14c>
 8000706:	4573      	cmp	r3, lr
 8000708:	d302      	bcc.n	8000710 <__udivmoddi4+0xc8>
 800070a:	4282      	cmp	r2, r0
 800070c:	f200 8105 	bhi.w	800091a <__udivmoddi4+0x2d2>
 8000710:	1a84      	subs	r4, r0, r2
 8000712:	eb6e 0203 	sbc.w	r2, lr, r3
 8000716:	2001      	movs	r0, #1
 8000718:	4690      	mov	r8, r2
 800071a:	2d00      	cmp	r5, #0
 800071c:	d0e5      	beq.n	80006ea <__udivmoddi4+0xa2>
 800071e:	e9c5 4800 	strd	r4, r8, [r5]
 8000722:	e7e2      	b.n	80006ea <__udivmoddi4+0xa2>
 8000724:	2a00      	cmp	r2, #0
 8000726:	f000 8090 	beq.w	800084a <__udivmoddi4+0x202>
 800072a:	fab2 f682 	clz	r6, r2
 800072e:	2e00      	cmp	r6, #0
 8000730:	f040 80a4 	bne.w	800087c <__udivmoddi4+0x234>
 8000734:	1a8a      	subs	r2, r1, r2
 8000736:	0c03      	lsrs	r3, r0, #16
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	b280      	uxth	r0, r0
 800073e:	b2bc      	uxth	r4, r7
 8000740:	2101      	movs	r1, #1
 8000742:	fbb2 fcfe 	udiv	ip, r2, lr
 8000746:	fb0e 221c 	mls	r2, lr, ip, r2
 800074a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800074e:	fb04 f20c 	mul.w	r2, r4, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d907      	bls.n	8000766 <__udivmoddi4+0x11e>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f10c 38ff 	add.w	r8, ip, #4294967295
 800075c:	d202      	bcs.n	8000764 <__udivmoddi4+0x11c>
 800075e:	429a      	cmp	r2, r3
 8000760:	f200 80e0 	bhi.w	8000924 <__udivmoddi4+0x2dc>
 8000764:	46c4      	mov	ip, r8
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	fbb3 f2fe 	udiv	r2, r3, lr
 800076c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000770:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000774:	fb02 f404 	mul.w	r4, r2, r4
 8000778:	429c      	cmp	r4, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x144>
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x142>
 8000784:	429c      	cmp	r4, r3
 8000786:	f200 80ca 	bhi.w	800091e <__udivmoddi4+0x2d6>
 800078a:	4602      	mov	r2, r0
 800078c:	1b1b      	subs	r3, r3, r4
 800078e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000792:	e7a5      	b.n	80006e0 <__udivmoddi4+0x98>
 8000794:	f1c1 0620 	rsb	r6, r1, #32
 8000798:	408b      	lsls	r3, r1
 800079a:	fa22 f706 	lsr.w	r7, r2, r6
 800079e:	431f      	orrs	r7, r3
 80007a0:	fa0e f401 	lsl.w	r4, lr, r1
 80007a4:	fa20 f306 	lsr.w	r3, r0, r6
 80007a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007b0:	4323      	orrs	r3, r4
 80007b2:	fa00 f801 	lsl.w	r8, r0, r1
 80007b6:	fa1f fc87 	uxth.w	ip, r7
 80007ba:	fbbe f0f9 	udiv	r0, lr, r9
 80007be:	0c1c      	lsrs	r4, r3, #16
 80007c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007cc:	45a6      	cmp	lr, r4
 80007ce:	fa02 f201 	lsl.w	r2, r2, r1
 80007d2:	d909      	bls.n	80007e8 <__udivmoddi4+0x1a0>
 80007d4:	193c      	adds	r4, r7, r4
 80007d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007da:	f080 809c 	bcs.w	8000916 <__udivmoddi4+0x2ce>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f240 8099 	bls.w	8000916 <__udivmoddi4+0x2ce>
 80007e4:	3802      	subs	r0, #2
 80007e6:	443c      	add	r4, r7
 80007e8:	eba4 040e 	sub.w	r4, r4, lr
 80007ec:	fa1f fe83 	uxth.w	lr, r3
 80007f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007f4:	fb09 4413 	mls	r4, r9, r3, r4
 80007f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000800:	45a4      	cmp	ip, r4
 8000802:	d908      	bls.n	8000816 <__udivmoddi4+0x1ce>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f103 3eff 	add.w	lr, r3, #4294967295
 800080a:	f080 8082 	bcs.w	8000912 <__udivmoddi4+0x2ca>
 800080e:	45a4      	cmp	ip, r4
 8000810:	d97f      	bls.n	8000912 <__udivmoddi4+0x2ca>
 8000812:	3b02      	subs	r3, #2
 8000814:	443c      	add	r4, r7
 8000816:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800081a:	eba4 040c 	sub.w	r4, r4, ip
 800081e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000822:	4564      	cmp	r4, ip
 8000824:	4673      	mov	r3, lr
 8000826:	46e1      	mov	r9, ip
 8000828:	d362      	bcc.n	80008f0 <__udivmoddi4+0x2a8>
 800082a:	d05f      	beq.n	80008ec <__udivmoddi4+0x2a4>
 800082c:	b15d      	cbz	r5, 8000846 <__udivmoddi4+0x1fe>
 800082e:	ebb8 0203 	subs.w	r2, r8, r3
 8000832:	eb64 0409 	sbc.w	r4, r4, r9
 8000836:	fa04 f606 	lsl.w	r6, r4, r6
 800083a:	fa22 f301 	lsr.w	r3, r2, r1
 800083e:	431e      	orrs	r6, r3
 8000840:	40cc      	lsrs	r4, r1
 8000842:	e9c5 6400 	strd	r6, r4, [r5]
 8000846:	2100      	movs	r1, #0
 8000848:	e74f      	b.n	80006ea <__udivmoddi4+0xa2>
 800084a:	fbb1 fcf2 	udiv	ip, r1, r2
 800084e:	0c01      	lsrs	r1, r0, #16
 8000850:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000854:	b280      	uxth	r0, r0
 8000856:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800085a:	463b      	mov	r3, r7
 800085c:	4638      	mov	r0, r7
 800085e:	463c      	mov	r4, r7
 8000860:	46b8      	mov	r8, r7
 8000862:	46be      	mov	lr, r7
 8000864:	2620      	movs	r6, #32
 8000866:	fbb1 f1f7 	udiv	r1, r1, r7
 800086a:	eba2 0208 	sub.w	r2, r2, r8
 800086e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000872:	e766      	b.n	8000742 <__udivmoddi4+0xfa>
 8000874:	4601      	mov	r1, r0
 8000876:	e718      	b.n	80006aa <__udivmoddi4+0x62>
 8000878:	4610      	mov	r0, r2
 800087a:	e72c      	b.n	80006d6 <__udivmoddi4+0x8e>
 800087c:	f1c6 0220 	rsb	r2, r6, #32
 8000880:	fa2e f302 	lsr.w	r3, lr, r2
 8000884:	40b7      	lsls	r7, r6
 8000886:	40b1      	lsls	r1, r6
 8000888:	fa20 f202 	lsr.w	r2, r0, r2
 800088c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000890:	430a      	orrs	r2, r1
 8000892:	fbb3 f8fe 	udiv	r8, r3, lr
 8000896:	b2bc      	uxth	r4, r7
 8000898:	fb0e 3318 	mls	r3, lr, r8, r3
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb08 f904 	mul.w	r9, r8, r4
 80008a6:	40b0      	lsls	r0, r6
 80008a8:	4589      	cmp	r9, r1
 80008aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008ae:	b280      	uxth	r0, r0
 80008b0:	d93e      	bls.n	8000930 <__udivmoddi4+0x2e8>
 80008b2:	1879      	adds	r1, r7, r1
 80008b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008b8:	d201      	bcs.n	80008be <__udivmoddi4+0x276>
 80008ba:	4589      	cmp	r9, r1
 80008bc:	d81f      	bhi.n	80008fe <__udivmoddi4+0x2b6>
 80008be:	eba1 0109 	sub.w	r1, r1, r9
 80008c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008c6:	fb09 f804 	mul.w	r8, r9, r4
 80008ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ce:	b292      	uxth	r2, r2
 80008d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d4:	4542      	cmp	r2, r8
 80008d6:	d229      	bcs.n	800092c <__udivmoddi4+0x2e4>
 80008d8:	18ba      	adds	r2, r7, r2
 80008da:	f109 31ff 	add.w	r1, r9, #4294967295
 80008de:	d2c4      	bcs.n	800086a <__udivmoddi4+0x222>
 80008e0:	4542      	cmp	r2, r8
 80008e2:	d2c2      	bcs.n	800086a <__udivmoddi4+0x222>
 80008e4:	f1a9 0102 	sub.w	r1, r9, #2
 80008e8:	443a      	add	r2, r7
 80008ea:	e7be      	b.n	800086a <__udivmoddi4+0x222>
 80008ec:	45f0      	cmp	r8, lr
 80008ee:	d29d      	bcs.n	800082c <__udivmoddi4+0x1e4>
 80008f0:	ebbe 0302 	subs.w	r3, lr, r2
 80008f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008f8:	3801      	subs	r0, #1
 80008fa:	46e1      	mov	r9, ip
 80008fc:	e796      	b.n	800082c <__udivmoddi4+0x1e4>
 80008fe:	eba7 0909 	sub.w	r9, r7, r9
 8000902:	4449      	add	r1, r9
 8000904:	f1a8 0c02 	sub.w	ip, r8, #2
 8000908:	fbb1 f9fe 	udiv	r9, r1, lr
 800090c:	fb09 f804 	mul.w	r8, r9, r4
 8000910:	e7db      	b.n	80008ca <__udivmoddi4+0x282>
 8000912:	4673      	mov	r3, lr
 8000914:	e77f      	b.n	8000816 <__udivmoddi4+0x1ce>
 8000916:	4650      	mov	r0, sl
 8000918:	e766      	b.n	80007e8 <__udivmoddi4+0x1a0>
 800091a:	4608      	mov	r0, r1
 800091c:	e6fd      	b.n	800071a <__udivmoddi4+0xd2>
 800091e:	443b      	add	r3, r7
 8000920:	3a02      	subs	r2, #2
 8000922:	e733      	b.n	800078c <__udivmoddi4+0x144>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	443b      	add	r3, r7
 800092a:	e71c      	b.n	8000766 <__udivmoddi4+0x11e>
 800092c:	4649      	mov	r1, r9
 800092e:	e79c      	b.n	800086a <__udivmoddi4+0x222>
 8000930:	eba1 0109 	sub.w	r1, r1, r9
 8000934:	46c4      	mov	ip, r8
 8000936:	fbb1 f9fe 	udiv	r9, r1, lr
 800093a:	fb09 f804 	mul.w	r8, r9, r4
 800093e:	e7c4      	b.n	80008ca <__udivmoddi4+0x282>

08000940 <__aeabi_idiv0>:
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <HX711_Init>:
int32_t hx711_offset = 0;

/**
 * @brief Initialize HX711
 */
void HX711_Init(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    // Set SCK low
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <HX711_Init+0x1c>)
 8000950:	f002 f8d8 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000954:	2064      	movs	r0, #100	@ 0x64
 8000956:	f001 fd49 	bl	80023ec <HAL_Delay>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020400 	.word	0x40020400

08000964 <HX711_IsReady>:

/**
 * @brief Check if HX711 is ready for reading
 */
uint8_t HX711_IsReady(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    return (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_RESET);
 8000968:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <HX711_IsReady+0x20>)
 800096e:	f002 f8b1 	bl	8002ad4 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf0c      	ite	eq
 8000978:	2301      	moveq	r3, #1
 800097a:	2300      	movne	r3, #0
 800097c:	b2db      	uxtb	r3, r3
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020400 	.word	0x40020400

08000988 <HX711_ReadRaw>:

/**
 * @brief Read raw data from HX711
 */
uint32_t HX711_ReadRaw(uint8_t channel) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
    uint32_t data = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
    uint8_t i;
    uint8_t pulses;
    
    // Wait for HX711 to be ready
    while (!HX711_IsReady()) {
 8000996:	e002      	b.n	800099e <HX711_ReadRaw+0x16>
        HAL_Delay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fd27 	bl	80023ec <HAL_Delay>
    while (!HX711_IsReady()) {
 800099e:	f7ff ffe1 	bl	8000964 <HX711_IsReady>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f7      	beq.n	8000998 <HX711_ReadRaw+0x10>
    }
    
    // Read 24 bits
    for (i = 0; i < 24; i++) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	72fb      	strb	r3, [r7, #11]
 80009ac:	e023      	b.n	80009f6 <HX711_ReadRaw+0x6e>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b4:	4831      	ldr	r0, [pc, #196]	@ (8000a7c <HX711_ReadRaw+0xf4>)
 80009b6:	f002 f8a5 	bl	8002b04 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 f8c6 	bl	8000b4c <HAL_Delay_us>
        data <<= 1;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
        if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET) {
 80009c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ca:	482c      	ldr	r0, [pc, #176]	@ (8000a7c <HX711_ReadRaw+0xf4>)
 80009cc:	f002 f882 	bl	8002ad4 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d103      	bne.n	80009de <HX711_ReadRaw+0x56>
            data |= 1;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
        }
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e4:	4825      	ldr	r0, [pc, #148]	@ (8000a7c <HX711_ReadRaw+0xf4>)
 80009e6:	f002 f88d 	bl	8002b04 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 f8ae 	bl	8000b4c <HAL_Delay_us>
    for (i = 0; i < 24; i++) {
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	3301      	adds	r3, #1
 80009f4:	72fb      	strb	r3, [r7, #11]
 80009f6:	7afb      	ldrb	r3, [r7, #11]
 80009f8:	2b17      	cmp	r3, #23
 80009fa:	d9d8      	bls.n	80009ae <HX711_ReadRaw+0x26>
    }
    
    // Set channel and gain for next reading
    switch (channel) {
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d00c      	beq.n	8000a1c <HX711_ReadRaw+0x94>
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	dc0d      	bgt.n	8000a22 <HX711_ReadRaw+0x9a>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d002      	beq.n	8000a10 <HX711_ReadRaw+0x88>
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d003      	beq.n	8000a16 <HX711_ReadRaw+0x8e>
 8000a0e:	e008      	b.n	8000a22 <HX711_ReadRaw+0x9a>
        case HX711_CHANNEL_A_GAIN_128:
            pulses = 1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	72bb      	strb	r3, [r7, #10]
            break;
 8000a14:	e008      	b.n	8000a28 <HX711_ReadRaw+0xa0>
        case HX711_CHANNEL_B_GAIN_32:
            pulses = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	72bb      	strb	r3, [r7, #10]
            break;
 8000a1a:	e005      	b.n	8000a28 <HX711_ReadRaw+0xa0>
        case HX711_CHANNEL_A_GAIN_64:
            pulses = 3;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	72bb      	strb	r3, [r7, #10]
            break;
 8000a20:	e002      	b.n	8000a28 <HX711_ReadRaw+0xa0>
        default:
            pulses = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	72bb      	strb	r3, [r7, #10]
            break;
 8000a26:	bf00      	nop
    }
    
    for (i = 0; i < pulses; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	72fb      	strb	r3, [r7, #11]
 8000a2c:	e014      	b.n	8000a58 <HX711_ReadRaw+0xd0>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <HX711_ReadRaw+0xf4>)
 8000a36:	f002 f865 	bl	8002b04 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 f886 	bl	8000b4c <HAL_Delay_us>
        HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <HX711_ReadRaw+0xf4>)
 8000a48:	f002 f85c 	bl	8002b04 <HAL_GPIO_WritePin>
        HAL_Delay_us(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 f87d 	bl	8000b4c <HAL_Delay_us>
    for (i = 0; i < pulses; i++) {
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	3301      	adds	r3, #1
 8000a56:	72fb      	strb	r3, [r7, #11]
 8000a58:	7afa      	ldrb	r2, [r7, #11]
 8000a5a:	7abb      	ldrb	r3, [r7, #10]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3e6      	bcc.n	8000a2e <HX711_ReadRaw+0xa6>
    }
    
    // Convert to signed 24-bit value
    if (data & 0x800000) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HX711_ReadRaw+0xea>
        data |= 0xFF000000;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000a70:	60fb      	str	r3, [r7, #12]
    }
    
    return data;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40020400 	.word	0x40020400

08000a80 <HX711_ReadValue>:

/**
 * @brief Read value with offset compensation
 */
int32_t HX711_ReadValue(uint8_t channel) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
    return (int32_t)HX711_ReadRaw(channel) - hx711_offset;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff7b 	bl	8000988 <HX711_ReadRaw>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b03      	ldr	r3, [pc, #12]	@ (8000aa4 <HX711_ReadValue+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1ad3      	subs	r3, r2, r3
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000007c 	.word	0x2000007c

08000aa8 <HX711_ReadWeight>:

/**
 * @brief Read weight in grams
 */
float HX711_ReadWeight(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
    int32_t value = HX711_ReadValue(HX711_CHANNEL_A_GAIN_128);
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ffe6 	bl	8000a80 <HX711_ReadValue>
 8000ab4:	6078      	str	r0, [r7, #4]
    return (float)value / hx711_scale;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HX711_ReadWeight+0x30>)
 8000ac2:	edd3 7a00 	vldr	s15, [r3]
 8000ac6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000aca:	eef0 7a66 	vmov.f32	s15, s13
}
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000

08000adc <HX711_SetScale>:

/**
 * @brief Set scale factor
 */
void HX711_SetScale(float scale) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	ed87 0a01 	vstr	s0, [r7, #4]
    hx711_scale = scale;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HX711_SetScale+0x1c>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	20000000 	.word	0x20000000

08000afc <HX711_Tare>:

/**
 * @brief Tare the scale (set current reading as zero)
 */
void HX711_Tare(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
    uint8_t i;
    
    // Take average of multiple readings
    for (i = 0; i < HX711_TARE_SAMPLES; i++) {
 8000b06:	2300      	movs	r3, #0
 8000b08:	70fb      	strb	r3, [r7, #3]
 8000b0a:	e00c      	b.n	8000b26 <HX711_Tare+0x2a>
        sum += HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f7ff ff3b 	bl	8000988 <HX711_ReadRaw>
 8000b12:	4602      	mov	r2, r0
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	607b      	str	r3, [r7, #4]
        HAL_Delay(HX711_STABLE_DELAY_MS);
 8000b1a:	2032      	movs	r0, #50	@ 0x32
 8000b1c:	f001 fc66 	bl	80023ec <HAL_Delay>
    for (i = 0; i < HX711_TARE_SAMPLES; i++) {
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	3301      	adds	r3, #1
 8000b24:	70fb      	strb	r3, [r7, #3]
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	d9ef      	bls.n	8000b0c <HX711_Tare+0x10>
    }
    
    hx711_offset = sum / HX711_TARE_SAMPLES;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <HX711_Tare+0x48>)
 8000b30:	fba2 2303 	umull	r2, r3, r2, r3
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HX711_Tare+0x4c>)
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	cccccccd 	.word	0xcccccccd
 8000b48:	2000007c 	.word	0x2000007c

08000b4c <HAL_Delay_us>:

/**
 * @brief Microsecond delay function
 * @note This is a simple implementation, for more precise timing use DWT or TIM
 */
void HAL_Delay_us(uint32_t us) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000b54:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_Delay_us+0x40>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = us * (SystemCoreClock / 1000000);
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_Delay_us+0x44>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_Delay_us+0x48>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	0c9a      	lsrs	r2, r3, #18
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	60bb      	str	r3, [r7, #8]
    
    while ((DWT->CYCCNT - start) < cycles) {
 8000b6e:	bf00      	nop
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_Delay_us+0x40>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d8f8      	bhi.n	8000b70 <HAL_Delay_us+0x24>
        // Wait
    }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e0001000 	.word	0xe0001000
 8000b90:	20000004 	.word	0x20000004
 8000b94:	431bde83 	.word	0x431bde83

08000b98 <HX711_Enhanced_IsReady>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t HX711_Enhanced_IsReady(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
    for (int retry = 0; retry < 3; retry++) {
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	e00c      	b.n	8000bbe <HX711_Enhanced_IsReady+0x26>
        if (HX711_IsReady()) {
 8000ba4:	f7ff fede 	bl	8000964 <HX711_IsReady>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HX711_Enhanced_IsReady+0x1a>
            return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e009      	b.n	8000bc6 <HX711_Enhanced_IsReady+0x2e>
        }
        HAL_Delay(10);
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f001 fc1a 	bl	80023ec <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	ddef      	ble.n	8000ba4 <HX711_Enhanced_IsReady+0xc>
    }
    return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <Debug_Printf>:
}
#else
/**
 * @brief Empty debug function when debug is disabled
 */
void Debug_Printf(const char* format, ...) {
 8000bce:	b40f      	push	{r0, r1, r2, r3}
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    (void)format;  // Suppress unused parameter warning
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <System_Init>:
#endif

/**
 * @brief Initialize all modules
 */
void System_Init(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0f0      	sub	sp, #448	@ 0x1c0
 8000be4:	af02      	add	r7, sp, #8
    Debug_Printf("Healthcare RFID System Starting...\r\n");
 8000be6:	4868      	ldr	r0, [pc, #416]	@ (8000d88 <System_Init+0x1a8>)
 8000be8:	f7ff fff1 	bl	8000bce <Debug_Printf>
    
    // Initialize RC522 RFID module
    RC522_Init();
 8000bec:	f000 fe96 	bl	800191c <RC522_Init>
    Debug_Printf("RC522 RFID initialized\r\n");
 8000bf0:	4866      	ldr	r0, [pc, #408]	@ (8000d8c <System_Init+0x1ac>)
 8000bf2:	f7ff ffec 	bl	8000bce <Debug_Printf>
    
    // Initialize HX711 weight sensor
    HX711_Init();
 8000bf6:	f7ff fea5 	bl	8000944 <HX711_Init>
    Debug_Printf("HX711 weight sensor initialized\r\n");
 8000bfa:	4865      	ldr	r0, [pc, #404]	@ (8000d90 <System_Init+0x1b0>)
 8000bfc:	f7ff ffe7 	bl	8000bce <Debug_Printf>
    
    // Initialize Simple Protocol
    SimpleProtocol_Init();
 8000c00:	f001 f988 	bl	8001f14 <SimpleProtocol_Init>
    Debug_Printf("Simple Protocol initialized\r\n");
 8000c04:	4863      	ldr	r0, [pc, #396]	@ (8000d94 <System_Init+0x1b4>)
 8000c06:	f7ff ffe2 	bl	8000bce <Debug_Printf>
    
    // Enable DWT for microsecond delays (used by HX711)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c0a:	4b63      	ldr	r3, [pc, #396]	@ (8000d98 <System_Init+0x1b8>)
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	4a62      	ldr	r2, [pc, #392]	@ (8000d98 <System_Init+0x1b8>)
 8000c10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c14:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c16:	4b61      	ldr	r3, [pc, #388]	@ (8000d9c <System_Init+0x1bc>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a60      	ldr	r2, [pc, #384]	@ (8000d9c <System_Init+0x1bc>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6013      	str	r3, [r2, #0]
    
    // Wait for system stabilization
    Debug_Printf("System stabilizing...\r\n");
 8000c22:	485f      	ldr	r0, [pc, #380]	@ (8000da0 <System_Init+0x1c0>)
 8000c24:	f7ff ffd3 	bl	8000bce <Debug_Printf>
    HAL_Delay(SYSTEM_INIT_DELAY_MS);
 8000c28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c2c:	f001 fbde 	bl	80023ec <HAL_Delay>
    
    // Tare the scale
    Debug_Printf("Taring scale...\r\n");
 8000c30:	485c      	ldr	r0, [pc, #368]	@ (8000da4 <System_Init+0x1c4>)
 8000c32:	f7ff ffcc 	bl	8000bce <Debug_Printf>
    HX711_Tare();
 8000c36:	f7ff ff61 	bl	8000afc <HX711_Tare>
    
    // Debug: Check tare result
    char tare_result[100];
    snprintf(tare_result, sizeof(tare_result), "Tare completed. Offset: %ld\r\n", hx711_offset);
 8000c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8000da8 <System_Init+0x1c8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8000c42:	4a5a      	ldr	r2, [pc, #360]	@ (8000dac <System_Init+0x1cc>)
 8000c44:	2164      	movs	r1, #100	@ 0x64
 8000c46:	f005 f815 	bl	8005c74 <sniprintf>
    Debug_Printf(tare_result);
 8000c4a:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffbd 	bl	8000bce <Debug_Printf>
    
    // Set scale factor (this should be calibrated for your specific load cell)
    HX711_SetScale(HX711_DEFAULT_SCALE);
 8000c54:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8000db0 <System_Init+0x1d0>
 8000c58:	f7ff ff40 	bl	8000adc <HX711_SetScale>
    Debug_Printf("Scale factor set to %.1f\r\n", HX711_DEFAULT_SCALE);
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <System_Init+0x1d4>)
 8000c62:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <System_Init+0x1d8>)
 8000c64:	f7ff ffb3 	bl	8000bce <Debug_Printf>
    
    // CRITICAL: Test float printing capability
    float test_value = 123.45f;
 8000c68:	4b54      	ldr	r3, [pc, #336]	@ (8000dbc <System_Init+0x1dc>)
 8000c6a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    char float_test[80];
    snprintf(float_test, sizeof(float_test), "Float test 123.45: %.2f\r\n", test_value);
 8000c6e:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8000c72:	f7ff fc79 	bl	8000568 <__aeabi_f2d>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8000c7e:	e9cd 2300 	strd	r2, r3, [sp]
 8000c82:	4a4f      	ldr	r2, [pc, #316]	@ (8000dc0 <System_Init+0x1e0>)
 8000c84:	2150      	movs	r1, #80	@ 0x50
 8000c86:	f004 fff5 	bl	8005c74 <sniprintf>
    Debug_Printf(float_test);
 8000c8a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff9d 	bl	8000bce <Debug_Printf>
    
    // Debug: Verify scale was set correctly
    char scale_verify[100];
    snprintf(scale_verify, sizeof(scale_verify), "Verified scale: %.3f\r\n", hx711_scale);
 8000c94:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc4 <System_Init+0x1e4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc65 	bl	8000568 <__aeabi_f2d>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8000ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8000caa:	4a47      	ldr	r2, [pc, #284]	@ (8000dc8 <System_Init+0x1e8>)
 8000cac:	2164      	movs	r1, #100	@ 0x64
 8000cae:	f004 ffe1 	bl	8005c74 <sniprintf>
    Debug_Printf(scale_verify);
 8000cb2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff89 	bl	8000bce <Debug_Printf>
    
    // Force fix if scale is still invalid
    if (hx711_scale == 0.0f || hx711_scale != hx711_scale) {
 8000cbc:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <System_Init+0x1e4>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d00a      	beq.n	8000ce2 <System_Init+0x102>
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc4 <System_Init+0x1e4>)
 8000cce:	ed93 7a00 	vldr	s14, [r3]
 8000cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc4 <System_Init+0x1e4>)
 8000cd4:	edd3 7a00 	vldr	s15, [r3]
 8000cd8:	eeb4 7a67 	vcmp.f32	s14, s15
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	d018      	beq.n	8000d14 <System_Init+0x134>
        Debug_Printf("ERROR: Scale still invalid after set! Force fixing...\r\n");
 8000ce2:	483a      	ldr	r0, [pc, #232]	@ (8000dcc <System_Init+0x1ec>)
 8000ce4:	f7ff ff73 	bl	8000bce <Debug_Printf>
        hx711_scale = 420.0f; // Force assignment with known value
 8000ce8:	4b36      	ldr	r3, [pc, #216]	@ (8000dc4 <System_Init+0x1e4>)
 8000cea:	4a39      	ldr	r2, [pc, #228]	@ (8000dd0 <System_Init+0x1f0>)
 8000cec:	601a      	str	r2, [r3, #0]
        char force_fix[100];
        snprintf(force_fix, sizeof(force_fix), "Force fixed scale to: %.3f\r\n", hx711_scale);
 8000cee:	4b35      	ldr	r3, [pc, #212]	@ (8000dc4 <System_Init+0x1e4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc38 	bl	8000568 <__aeabi_f2d>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4638      	mov	r0, r7
 8000cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8000d02:	4a34      	ldr	r2, [pc, #208]	@ (8000dd4 <System_Init+0x1f4>)
 8000d04:	2164      	movs	r1, #100	@ 0x64
 8000d06:	f004 ffb5 	bl	8005c74 <sniprintf>
        Debug_Printf(force_fix);
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5e 	bl	8000bce <Debug_Printf>
    if (hx711_scale == 0.0f || hx711_scale != hx711_scale) {
 8000d12:	e002      	b.n	8000d1a <System_Init+0x13a>
    } else {
        Debug_Printf("Scale appears to be set correctly.\r\n");
 8000d14:	4830      	ldr	r0, [pc, #192]	@ (8000dd8 <System_Init+0x1f8>)
 8000d16:	f7ff ff5a 	bl	8000bce <Debug_Printf>
    }
    
    // Test HX711 immediately after init
    if (HX711_IsReady()) {
 8000d1a:	f7ff fe23 	bl	8000964 <HX711_IsReady>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d023      	beq.n	8000d6c <System_Init+0x18c>
        uint32_t test_raw = HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fe2f 	bl	8000988 <HX711_ReadRaw>
 8000d2a:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0
        char test_result[150];
        snprintf(test_result, sizeof(test_result), "HX711 Test - Raw: %lu (0x%08lX)\r\n", test_raw, test_raw);
 8000d2e:	4638      	mov	r0, r7
 8000d30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d3a:	4a28      	ldr	r2, [pc, #160]	@ (8000ddc <System_Init+0x1fc>)
 8000d3c:	2196      	movs	r1, #150	@ 0x96
 8000d3e:	f004 ff99 	bl	8005c74 <sniprintf>
        Debug_Printf(test_result);
 8000d42:	463b      	mov	r3, r7
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff42 	bl	8000bce <Debug_Printf>
        
        if (test_raw == 0xFFFFFFFF || test_raw == 0x00000000) {
 8000d4a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d52:	d003      	beq.n	8000d5c <System_Init+0x17c>
 8000d54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <System_Init+0x184>
            Debug_Printf("WARNING: HX711 returning invalid data!\r\n");
 8000d5c:	4820      	ldr	r0, [pc, #128]	@ (8000de0 <System_Init+0x200>)
 8000d5e:	f7ff ff36 	bl	8000bce <Debug_Printf>
 8000d62:	e006      	b.n	8000d72 <System_Init+0x192>
        } else {
            Debug_Printf("HX711 seems to be working.\r\n");
 8000d64:	481f      	ldr	r0, [pc, #124]	@ (8000de4 <System_Init+0x204>)
 8000d66:	f7ff ff32 	bl	8000bce <Debug_Printf>
 8000d6a:	e002      	b.n	8000d72 <System_Init+0x192>
        }
    } else {
        Debug_Printf("WARNING: HX711 not ready after init!\r\n");
 8000d6c:	481e      	ldr	r0, [pc, #120]	@ (8000de8 <System_Init+0x208>)
 8000d6e:	f7ff ff2e 	bl	8000bce <Debug_Printf>
    // Initialize status LEDs
    Status_LED_Control(2, 1); // System ready LED ON
    Debug_Printf("Status LEDs initialized\r\n");
#endif
    
    system_ready = 1;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <System_Init+0x20c>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
    Debug_Printf("System ready!\r\n");
 8000d78:	481d      	ldr	r0, [pc, #116]	@ (8000df0 <System_Init+0x210>)
 8000d7a:	f7ff ff28 	bl	8000bce <Debug_Printf>
}
 8000d7e:	bf00      	nop
 8000d80:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	08006614 	.word	0x08006614
 8000d8c:	0800663c 	.word	0x0800663c
 8000d90:	08006658 	.word	0x08006658
 8000d94:	0800667c 	.word	0x0800667c
 8000d98:	e000edf0 	.word	0xe000edf0
 8000d9c:	e0001000 	.word	0xe0001000
 8000da0:	0800669c 	.word	0x0800669c
 8000da4:	080066b4 	.word	0x080066b4
 8000da8:	2000007c 	.word	0x2000007c
 8000dac:	080066c8 	.word	0x080066c8
 8000db0:	43d20000 	.word	0x43d20000
 8000db4:	407a4000 	.word	0x407a4000
 8000db8:	080066e8 	.word	0x080066e8
 8000dbc:	42f6e666 	.word	0x42f6e666
 8000dc0:	08006704 	.word	0x08006704
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	08006720 	.word	0x08006720
 8000dcc:	08006738 	.word	0x08006738
 8000dd0:	43d20000 	.word	0x43d20000
 8000dd4:	08006770 	.word	0x08006770
 8000dd8:	08006790 	.word	0x08006790
 8000ddc:	080067b8 	.word	0x080067b8
 8000de0:	080067dc 	.word	0x080067dc
 8000de4:	08006808 	.word	0x08006808
 8000de8:	08006828 	.word	0x08006828
 8000dec:	20000180 	.word	0x20000180
 8000df0:	08006850 	.word	0x08006850

08000df4 <Process_RFID>:

/**
 * @brief Process RFID card reading - Simple protocol version
 */
void Process_RFID(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
    RC522_Status status;
    uint32_t current_time = HAL_GetTick();
 8000dfa:	f001 faeb 	bl	80023d4 <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]
    static uint8_t card_sent = 0;  // Flag to prevent multiple sends
    
    status = RC522_ReadUID(card_uid);
 8000e00:	483a      	ldr	r0, [pc, #232]	@ (8000eec <Process_RFID+0xf8>)
 8000e02:	f000 feee 	bl	8001be2 <RC522_ReadUID>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
    
    if (status == RC522_OK) {
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d15e      	bne.n	8000ece <Process_RFID+0xda>
        // Check if this is the same card as before
        uint8_t same_card = (memcmp(card_uid, last_card_uid, UID_SIZE) == 0);
 8000e10:	2204      	movs	r2, #4
 8000e12:	4937      	ldr	r1, [pc, #220]	@ (8000ef0 <Process_RFID+0xfc>)
 8000e14:	4835      	ldr	r0, [pc, #212]	@ (8000eec <Process_RFID+0xf8>)
 8000e16:	f004 ff63 	bl	8005ce0 <memcmp>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf0c      	ite	eq
 8000e20:	2301      	moveq	r3, #1
 8000e22:	2300      	movne	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	73bb      	strb	r3, [r7, #14]
        
        // Only process if it's a new card or enough time has passed
        if (!same_card || (current_time - last_card_read_time > RC522_CARD_DETECTION_DELAY_MS)) {
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <Process_RFID+0x48>
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <Process_RFID+0x100>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e3a:	d952      	bls.n	8000ee2 <Process_RFID+0xee>
            
            // Reset card sent flag for new card
            if (!same_card) {
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <Process_RFID+0x54>
                card_sent = 0;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <Process_RFID+0x104>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
            }
            
            // Only send once per card detection
            if (!card_sent) {
 8000e48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef8 <Process_RFID+0x104>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d148      	bne.n	8000ee2 <Process_RFID+0xee>
                // Get current weight if HX711 is ready
                float weight = 0.0f;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
                if (HX711_Enhanced_IsReady()) {
 8000e56:	f7ff fe9f 	bl	8000b98 <HX711_Enhanced_IsReady>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d023      	beq.n	8000ea8 <Process_RFID+0xb4>
                    uint32_t raw_data = HX711_ReadRaw(HX711_CHANNEL_A_GAIN_128);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fd91 	bl	8000988 <HX711_ReadRaw>
 8000e66:	60b8      	str	r0, [r7, #8]
                    if (raw_data != 0xFFFFFFFF && raw_data != 0x00000000) {
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6e:	d01b      	beq.n	8000ea8 <Process_RFID+0xb4>
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d018      	beq.n	8000ea8 <Process_RFID+0xb4>
                        // Simple weight calculation
                        int32_t value_with_offset = (int32_t)raw_data - hx711_offset;
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <Process_RFID+0x108>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	607b      	str	r3, [r7, #4]
                        weight = (float)value_with_offset / hx711_scale;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <Process_RFID+0x10c>)
 8000e8c:	ed93 7a00 	vldr	s14, [r3]
 8000e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e94:	edc7 7a05 	vstr	s15, [r7, #20]
                        weight *= 1000.0f; // Convert to grams
 8000e98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e9c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000f04 <Process_RFID+0x110>
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	edc7 7a05 	vstr	s15, [r7, #20]
                    }
                }
                
                // Send data using simple protocol
                SimpleProtocol_ProcessCardDetection(card_uid, weight);
 8000ea8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000eac:	480f      	ldr	r0, [pc, #60]	@ (8000eec <Process_RFID+0xf8>)
 8000eae:	f000 ff4d 	bl	8001d4c <SimpleProtocol_ProcessCardDetection>
                
                // Update status
                memcpy(last_card_uid, card_uid, UID_SIZE);
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <Process_RFID+0xf8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef0 <Process_RFID+0xfc>)
 8000eb8:	6013      	str	r3, [r2, #0]
                last_card_read_time = current_time;
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <Process_RFID+0x100>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6013      	str	r3, [r2, #0]
                card_present = 1;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <Process_RFID+0x114>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
                card_sent = 1;  // Mark as sent
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <Process_RFID+0x104>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
            // Card was removed - reset flag
            card_present = 0;
            card_sent = 0;
        }
    }
}
 8000ecc:	e009      	b.n	8000ee2 <Process_RFID+0xee>
        if (card_present) {
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <Process_RFID+0x114>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <Process_RFID+0xee>
            card_present = 0;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <Process_RFID+0x114>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
            card_sent = 0;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <Process_RFID+0x104>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000168 	.word	0x20000168
 8000ef0:	20000184 	.word	0x20000184
 8000ef4:	2000017c 	.word	0x2000017c
 8000ef8:	20000189 	.word	0x20000189
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	20000000 	.word	0x20000000
 8000f04:	447a0000 	.word	0x447a0000
 8000f08:	20000188 	.word	0x20000188

08000f0c <Process_Weight>:

/**
 * @brief Process weight measurement with filtering
 */
void Process_Weight(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
    static float weight_buffer[WEIGHT_FILTER_SAMPLES] = {0};
    static uint8_t weight_index = 0;
    static uint8_t buffer_filled = 0;
    static float last_stable_weight = 0.0f;
    
    if (HX711_IsReady()) {
 8000f12:	f7ff fd27 	bl	8000964 <HX711_IsReady>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d07f      	beq.n	800101c <Process_Weight+0x110>
        float raw_weight = HX711_ReadWeight();
 8000f1c:	f7ff fdc4 	bl	8000aa8 <HX711_ReadWeight>
 8000f20:	ed87 0a02 	vstr	s0, [r7, #8]
        // Apply correct formula: weight_in_grams = (raw_value / 10000) - 600
        float new_weight = (raw_weight / 10000.0f) - 600.0f;
 8000f24:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f28:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001024 <Process_Weight+0x118>
 8000f2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f30:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001028 <Process_Weight+0x11c>
 8000f34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f38:	edc7 7a01 	vstr	s15, [r7, #4]
        
#if WEIGHT_FILTER_ENABLED
        // Add to circular buffer
        weight_buffer[weight_index] = new_weight;
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <Process_Weight+0x120>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4a3b      	ldr	r2, [pc, #236]	@ (8001030 <Process_Weight+0x124>)
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
        weight_index = (weight_index + 1) % WEIGHT_FILTER_SAMPLES;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <Process_Weight+0x120>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <Process_Weight+0x128>)
 8000f52:	fb83 1302 	smull	r1, r3, r3, r2
 8000f56:	1059      	asrs	r1, r3, #1
 8000f58:	17d3      	asrs	r3, r2, #31
 8000f5a:	1ac9      	subs	r1, r1, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	1ad1      	subs	r1, r2, r3
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	4b31      	ldr	r3, [pc, #196]	@ (800102c <Process_Weight+0x120>)
 8000f68:	701a      	strb	r2, [r3, #0]
        
        if (!buffer_filled && weight_index == 0) {
 8000f6a:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <Process_Weight+0x12c>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <Process_Weight+0x74>
 8000f72:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <Process_Weight+0x120>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d102      	bne.n	8000f80 <Process_Weight+0x74>
            buffer_filled = 1;
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001038 <Process_Weight+0x12c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
        }
        
        // Calculate average if buffer is filled
        if (buffer_filled) {
 8000f80:	4b2d      	ldr	r3, [pc, #180]	@ (8001038 <Process_Weight+0x12c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d021      	beq.n	8000fcc <Process_Weight+0xc0>
            float sum = 0;
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < WEIGHT_FILTER_SAMPLES; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e00e      	b.n	8000fb2 <Process_Weight+0xa6>
                sum += weight_buffer[i];
 8000f94:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <Process_Weight+0x124>)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa8:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int i = 0; i < WEIGHT_FILTER_SAMPLES; i++) {
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	dded      	ble.n	8000f94 <Process_Weight+0x88>
            }
            current_weight = sum / WEIGHT_FILTER_SAMPLES;
 8000fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fbc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <Process_Weight+0x130>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
 8000fca:	e002      	b.n	8000fd2 <Process_Weight+0xc6>
        } else {
            current_weight = new_weight;
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <Process_Weight+0x130>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
#else
        current_weight = new_weight;
#endif
        
        // Check for significant weight change
        float weight_diff = current_weight - last_stable_weight;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <Process_Weight+0x130>)
 8000fd4:	ed93 7a00 	vldr	s14, [r3]
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <Process_Weight+0x134>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe2:	edc7 7a03 	vstr	s15, [r7, #12]
        if (weight_diff < 0) weight_diff = -weight_diff; // Absolute value
 8000fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d505      	bpl.n	8001000 <Process_Weight+0xf4>
 8000ff4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff8:	eef1 7a67 	vneg.f32	s15, s15
 8000ffc:	edc7 7a03 	vstr	s15, [r7, #12]
        
        if (weight_diff > WEIGHT_THRESHOLD_GRAMS) {
 8001000:	edd7 7a03 	vldr	s15, [r7, #12]
 8001004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	dc00      	bgt.n	8001014 <Process_Weight+0x108>
            
            // Optional: Send weight-only data to ESP32 for monitoring
            // ESP32_SendCardData(NULL, 0, current_weight);
        }
    }
}
 8001012:	e003      	b.n	800101c <Process_Weight+0x110>
            last_stable_weight = current_weight;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <Process_Weight+0x130>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <Process_Weight+0x134>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	461c4000 	.word	0x461c4000
 8001028:	44160000 	.word	0x44160000
 800102c:	2000018a 	.word	0x2000018a
 8001030:	2000018c 	.word	0x2000018c
 8001034:	66666667 	.word	0x66666667
 8001038:	200001a0 	.word	0x200001a0
 800103c:	20000170 	.word	0x20000170
 8001040:	200001a4 	.word	0x200001a4

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b0bb      	sub	sp, #236	@ 0xec
 8001048:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f001 f95d 	bl	8002308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f995 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  // Initialize all configured peripherals
  MX_GPIO_Init();
 8001052:	f000 facd 	bl	80015f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001056:	f000 f9fb 	bl	8001450 <MX_SPI1_Init>
  MX_TIM2_Init();
 800105a:	f000 fa2f 	bl	80014bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800105e:	f000 fa9d 	bl	800159c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // Initialize all system modules
  System_Init();
 8001062:	f7ff fdbd 	bl	8000be0 <System_Init>
  
  // Initialize simple protocol
  SimpleProtocol_Init();
 8001066:	f000 ff55 	bl	8001f14 <SimpleProtocol_Init>
  
  // Hold CS high for a moment
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2101      	movs	r1, #1
 800106e:	48b1      	ldr	r0, [pc, #708]	@ (8001334 <main+0x2f0>)
 8001070:	f001 fd48 	bl	8002b04 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001074:	2032      	movs	r0, #50	@ 0x32
 8001076:	f001 f9b9 	bl	80023ec <HAL_Delay>
  
  // Perform soft reset
  RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_SOFT_RESET);
 800107a:	210f      	movs	r1, #15
 800107c:	2001      	movs	r0, #1
 800107e:	f000 fb67 	bl	8001750 <RC522_WriteRegister>
  HAL_Delay(100);  // Wait for reset to complete
 8001082:	2064      	movs	r0, #100	@ 0x64
 8001084:	f001 f9b2 	bl	80023ec <HAL_Delay>
  
  // Wait for oscillator to stabilize
  HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	@ 0x64
 800108a:	f001 f9af 	bl	80023ec <HAL_Delay>
  
  const char* reset_done = "RC522 reset completed\r\n";
 800108e:	4baa      	ldr	r3, [pc, #680]	@ (8001338 <main+0x2f4>)
 8001090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  HAL_UART_Transmit(&huart1, (uint8_t*)reset_done, strlen(reset_done), 1000);
 8001094:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001098:	f7ff f8aa 	bl	80001f0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80010a8:	48a4      	ldr	r0, [pc, #656]	@ (800133c <main+0x2f8>)
 80010aa:	f003 fd85 	bl	8004bb8 <HAL_UART_Transmit>
  
  // Test SPI communication first
  const char* test_spi = "Testing SPI communication...\r\n";
 80010ae:	4ba4      	ldr	r3, [pc, #656]	@ (8001340 <main+0x2fc>)
 80010b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  HAL_UART_Transmit(&huart1, (uint8_t*)test_spi, strlen(test_spi), 1000);
 80010b4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 80010b8:	f7ff f89a 	bl	80001f0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80010c8:	489c      	ldr	r0, [pc, #624]	@ (800133c <main+0x2f8>)
 80010ca:	f003 fd75 	bl	8004bb8 <HAL_UART_Transmit>
  
  // Manual SPI test - toggle CS and send dummy data
  const char* test_cs = "Testing CS pin control...\r\n";
 80010ce:	4b9d      	ldr	r3, [pc, #628]	@ (8001344 <main+0x300>)
 80010d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  HAL_UART_Transmit(&huart1, (uint8_t*)test_cs, strlen(test_cs), 1000);
 80010d4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80010d8:	f7ff f88a 	bl	80001f0 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80010e8:	4894      	ldr	r0, [pc, #592]	@ (800133c <main+0x2f8>)
 80010ea:	f003 fd65 	bl	8004bb8 <HAL_UART_Transmit>
  
  for (int i = 0; i < 3; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80010f4:	e048      	b.n	8001188 <main+0x144>
    // Pull CS low
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2101      	movs	r1, #1
 80010fa:	488e      	ldr	r0, [pc, #568]	@ (8001334 <main+0x2f0>)
 80010fc:	f001 fd02 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Longer CS setup time
 8001100:	200a      	movs	r0, #10
 8001102:	f001 f973 	bl	80023ec <HAL_Delay>
    
    // Send test data
    uint8_t test_data = 0x55; // Pattern 01010101
 8001106:	2355      	movs	r3, #85	@ 0x55
 8001108:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t received = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    HAL_StatusTypeDef spi_result = HAL_SPI_TransmitReceive(&hspi1, &test_data, &received, 1, 1000);
 8001112:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8001116:	f107 0153 	add.w	r1, r7, #83	@ 0x53
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	4889      	ldr	r0, [pc, #548]	@ (8001348 <main+0x304>)
 8001124:	f002 fb2d 	bl	8003782 <HAL_SPI_TransmitReceive>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
    // Pull CS high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2101      	movs	r1, #1
 8001132:	4880      	ldr	r0, [pc, #512]	@ (8001334 <main+0x2f0>)
 8001134:	f001 fce6 	bl	8002b04 <HAL_GPIO_WritePin>
    
    char spi_test[80];
    snprintf(spi_test, sizeof(spi_test), "SPI Test %d: Sent=0x%02X, Received=0x%02X, Result=%d\r\n", 
 8001138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001142:	4619      	mov	r1, r3
 8001144:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001148:	461c      	mov	r4, r3
 800114a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800114e:	4638      	mov	r0, r7
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	9401      	str	r4, [sp, #4]
 8001154:	9100      	str	r1, [sp, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	4a7c      	ldr	r2, [pc, #496]	@ (800134c <main+0x308>)
 800115a:	2150      	movs	r1, #80	@ 0x50
 800115c:	f004 fd8a 	bl	8005c74 <sniprintf>
             i+1, test_data, received, spi_result);
    HAL_UART_Transmit(&huart1, (uint8_t*)spi_test, strlen(spi_test), 1000);
 8001160:	463b      	mov	r3, r7
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f844 	bl	80001f0 <strlen>
 8001168:	4603      	mov	r3, r0
 800116a:	b29a      	uxth	r2, r3
 800116c:	4639      	mov	r1, r7
 800116e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001172:	4872      	ldr	r0, [pc, #456]	@ (800133c <main+0x2f8>)
 8001174:	f003 fd20 	bl	8004bb8 <HAL_UART_Transmit>
    HAL_Delay(200);  // Longer delay between tests
 8001178:	20c8      	movs	r0, #200	@ 0xc8
 800117a:	f001 f937 	bl	80023ec <HAL_Delay>
  for (int i = 0; i < 3; i++) {
 800117e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001182:	3301      	adds	r3, #1
 8001184:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001188:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800118c:	2b02      	cmp	r3, #2
 800118e:	ddb2      	ble.n	80010f6 <main+0xb2>
  }
  
  // Run comprehensive RC522 diagnostics
  RC522_Diagnostics();
 8001190:	f000 fd40 	bl	8001c14 <RC522_Diagnostics>
  
  // If diagnostics show version register is still wrong, test different SPI settings
  uint8_t version_check = RC522_ReadRegister(RC522_REG_VERSION);
 8001194:	2037      	movs	r0, #55	@ 0x37
 8001196:	f000 fb07 	bl	80017a8 <RC522_ReadRegister>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  if (version_check != 0x91 && version_check != 0x92 && version_check != 0xB2) {
 80011a0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80011a4:	2b91      	cmp	r3, #145	@ 0x91
 80011a6:	d019      	beq.n	80011dc <main+0x198>
 80011a8:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80011ac:	2b92      	cmp	r3, #146	@ 0x92
 80011ae:	d015      	beq.n	80011dc <main+0x198>
 80011b0:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80011b4:	2bb2      	cmp	r3, #178	@ 0xb2
 80011b6:	d011      	beq.n	80011dc <main+0x198>
    const char* spi_test_msg = "Version still incorrect, testing SPI settings...\r\n";
 80011b8:	4b65      	ldr	r3, [pc, #404]	@ (8001350 <main+0x30c>)
 80011ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    HAL_UART_Transmit(&huart1, (uint8_t*)spi_test_msg, strlen(spi_test_msg), 1000);
 80011be:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80011c2:	f7ff f815 	bl	80001f0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 80011d2:	485a      	ldr	r0, [pc, #360]	@ (800133c <main+0x2f8>)
 80011d4:	f003 fcf0 	bl	8004bb8 <HAL_UART_Transmit>
    RC522_TestSPISettings();
 80011d8:	f000 fd23 	bl	8001c22 <RC522_TestSPISettings>
  }
  
  // Final version check
  uint8_t final_version = RC522_ReadRegister(RC522_REG_VERSION);
 80011dc:	2037      	movs	r0, #55	@ 0x37
 80011de:	f000 fae3 	bl	80017a8 <RC522_ReadRegister>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  char final_result[80];
  snprintf(final_result, sizeof(final_result), "FINAL RESULT: RC522 Version = 0x%02X\r\n", final_version);
 80011e8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80011ec:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80011f0:	4a58      	ldr	r2, [pc, #352]	@ (8001354 <main+0x310>)
 80011f2:	2150      	movs	r1, #80	@ 0x50
 80011f4:	f004 fd3e 	bl	8005c74 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)final_result, strlen(final_result), 1000);
 80011f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7fe fff7 	bl	80001f0 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	484b      	ldr	r0, [pc, #300]	@ (800133c <main+0x2f8>)
 8001210:	f003 fcd2 	bl	8004bb8 <HAL_UART_Transmit>
  
  if (final_version == 0x91 || final_version == 0x92 || final_version == 0xB2) {
 8001214:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001218:	2b91      	cmp	r3, #145	@ 0x91
 800121a:	d007      	beq.n	800122c <main+0x1e8>
 800121c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001220:	2b92      	cmp	r3, #146	@ 0x92
 8001222:	d003      	beq.n	800122c <main+0x1e8>
 8001224:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001228:	2bb2      	cmp	r3, #178	@ 0xb2
 800122a:	d135      	bne.n	8001298 <main+0x254>
    const char* success_msg = "*** RC522 WORKING! Ready for card scanning ***\r\n";
 800122c:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <main+0x314>)
 800122e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_UART_Transmit(&huart1, (uint8_t*)success_msg, strlen(success_msg), 1000);
 8001232:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8001236:	f7fe ffdb 	bl	80001f0 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001246:	483d      	ldr	r0, [pc, #244]	@ (800133c <main+0x2f8>)
 8001248:	f003 fcb6 	bl	8004bb8 <HAL_UART_Transmit>
    
    // Test card detection immediately
    const char* test_card_msg = "Initializing card detection...\r\n";
 800124c:	4b43      	ldr	r3, [pc, #268]	@ (800135c <main+0x318>)
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    HAL_UART_Transmit(&huart1, (uint8_t*)test_card_msg, strlen(test_card_msg), 1000);
 8001252:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001256:	f7fe ffcb 	bl	80001f0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001266:	4835      	ldr	r0, [pc, #212]	@ (800133c <main+0x2f8>)
 8001268:	f003 fca6 	bl	8004bb8 <HAL_UART_Transmit>
    
    // Try to initialize RC522 properly for card detection
    RC522_Init();
 800126c:	f000 fb56 	bl	800191c <RC522_Init>
    HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	@ 0x64
 8001272:	f001 f8bb 	bl	80023ec <HAL_Delay>
    
    const char* ready_msg = "RC522 ready! Please place an RFID card near the reader.\r\n";
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <main+0x31c>)
 8001278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_UART_Transmit(&huart1, (uint8_t*)ready_msg, strlen(ready_msg), 1000);
 800127c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001280:	f7fe ffb6 	bl	80001f0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001290:	482a      	ldr	r0, [pc, #168]	@ (800133c <main+0x2f8>)
 8001292:	f003 fc91 	bl	8004bb8 <HAL_UART_Transmit>
  if (final_version == 0x91 || final_version == 0x92 || final_version == 0xB2) {
 8001296:	e00f      	b.n	80012b8 <main+0x274>
  } else {
    const char* fail_msg = "*** RC522 FAILED! Check hardware and RST pin ***\r\n";
 8001298:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <main+0x320>)
 800129a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    HAL_UART_Transmit(&huart1, (uint8_t*)fail_msg, strlen(fail_msg), 1000);
 800129e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80012a2:	f7fe ffa5 	bl	80001f0 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80012b2:	4822      	ldr	r0, [pc, #136]	@ (800133c <main+0x2f8>)
 80012b4:	f003 fc80 	bl	8004bb8 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    
    if (system_ready) {
 80012b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <main+0x324>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d035      	beq.n	800132c <main+0x2e8>
      uint32_t current_time = HAL_GetTick();
 80012c0:	f001 f888 	bl	80023d4 <HAL_GetTick>
 80012c4:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
      
      // Debug: Periodic status removed to keep UART1 free for ESP32
      
      // Check for RFID cards periodically
      if (current_time - last_card_check >= CARD_CHECK_INTERVAL_MS) {
 80012c8:	4b28      	ldr	r3, [pc, #160]	@ (800136c <main+0x328>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012d6:	d305      	bcc.n	80012e4 <main+0x2a0>
        // Debug messages disabled to keep UART1 free for ESP32 communication
        // Use Debug_Printf for debug output if needed
        
        Process_RFID();
 80012d8:	f7ff fd8c 	bl	8000df4 <Process_RFID>
        last_card_check = current_time;
 80012dc:	4a23      	ldr	r2, [pc, #140]	@ (800136c <main+0x328>)
 80012de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012e2:	6013      	str	r3, [r2, #0]
      }
      
      // Check weight periodically
      if (current_time - last_weight_check >= WEIGHT_CHECK_INTERVAL_MS) {
 80012e4:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <main+0x32c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012f2:	d305      	bcc.n	8001300 <main+0x2bc>
        Process_Weight();
 80012f4:	f7ff fe0a 	bl	8000f0c <Process_Weight>
        last_weight_check = current_time;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <main+0x32c>)
 80012fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012fe:	6013      	str	r3, [r2, #0]
      }
      
      // Process any incoming ESP32 messages
      SimpleProtocol_ProcessReceivedData();
 8001300:	f000 fd3e 	bl	8001d80 <SimpleProtocol_ProcessReceivedData>
      
      // Debug: Print registered cards every 30 seconds
      static uint32_t last_debug_time = 0;
      if (current_time - last_debug_time >= 30000) {
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <main+0x330>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001312:	4293      	cmp	r3, r2
 8001314:	d906      	bls.n	8001324 <main+0x2e0>
        Debug_Printf("System running... Cards registered\r\n");
 8001316:	4818      	ldr	r0, [pc, #96]	@ (8001378 <main+0x334>)
 8001318:	f7ff fc59 	bl	8000bce <Debug_Printf>
        last_debug_time = current_time;
 800131c:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <main+0x330>)
 800131e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001322:	6013      	str	r3, [r2, #0]
      
      // Watchdog refresh (if enabled)
      // HAL_IWDG_Refresh(&hiwdg);
      
      // Small delay to prevent excessive CPU usage
      HAL_Delay(10);
 8001324:	200a      	movs	r0, #10
 8001326:	f001 f861 	bl	80023ec <HAL_Delay>
 800132a:	e7c5      	b.n	80012b8 <main+0x274>
        Status_LED_Control(2, blink_state);
        blink_state = !blink_state;
        blink_time = HAL_GetTick();
      }
#endif
      HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	@ 0x64
 800132e:	f001 f85d 	bl	80023ec <HAL_Delay>
    if (system_ready) {
 8001332:	e7c1      	b.n	80012b8 <main+0x274>
 8001334:	40020400 	.word	0x40020400
 8001338:	08006b44 	.word	0x08006b44
 800133c:	20000120 	.word	0x20000120
 8001340:	08006b5c 	.word	0x08006b5c
 8001344:	08006b7c 	.word	0x08006b7c
 8001348:	20000080 	.word	0x20000080
 800134c:	08006b98 	.word	0x08006b98
 8001350:	08006bd0 	.word	0x08006bd0
 8001354:	08006c04 	.word	0x08006c04
 8001358:	08006c2c 	.word	0x08006c2c
 800135c:	08006c60 	.word	0x08006c60
 8001360:	08006c84 	.word	0x08006c84
 8001364:	08006cc0 	.word	0x08006cc0
 8001368:	20000180 	.word	0x20000180
 800136c:	20000174 	.word	0x20000174
 8001370:	20000178 	.word	0x20000178
 8001374:	200001a8 	.word	0x200001a8
 8001378:	08006cf4 	.word	0x08006cf4

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	@ 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	2230      	movs	r2, #48	@ 0x30
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fcb8 	bl	8005d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <SystemClock_Config+0xcc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <SystemClock_Config+0xcc>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <SystemClock_Config+0xcc>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b22      	ldr	r3, [pc, #136]	@ (800144c <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013c8:	4a20      	ldr	r2, [pc, #128]	@ (800144c <SystemClock_Config+0xd0>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <SystemClock_Config+0xd0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e4:	2310      	movs	r3, #16
 80013e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80013f4:	2354      	movs	r3, #84	@ 0x54
 80013f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013fc:	2304      	movs	r3, #4
 80013fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fb97 	bl	8002b38 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001410:	f000 f96e 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2102      	movs	r1, #2
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fdf9 	bl	8003028 <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800143c:	f000 f958 	bl	80016f0 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3750      	adds	r7, #80	@ 0x50
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <MX_SPI1_Init+0x68>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_SPI1_Init+0x64>)
 800147c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001484:	2218      	movs	r2, #24
 8001486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_SPI1_Init+0x64>)
 800149c:	220a      	movs	r2, #10
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <MX_SPI1_Init+0x64>)
 80014a2:	f001 ffa1 	bl	80033e8 <HAL_SPI_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ac:	f000 f920 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000080 	.word	0x20000080
 80014b8:	40013000 	.word	0x40013000

080014bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0318 	add.w	r3, r7, #24
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001598 <MX_TIM2_Init+0xdc>)
 80014e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001598 <MX_TIM2_Init+0xdc>)
 80014f0:	2253      	movs	r2, #83	@ 0x53
 80014f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <MX_TIM2_Init+0xdc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <MX_TIM2_Init+0xdc>)
 80014fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001500:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b25      	ldr	r3, [pc, #148]	@ (8001598 <MX_TIM2_Init+0xdc>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <MX_TIM2_Init+0xdc>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150e:	4822      	ldr	r0, [pc, #136]	@ (8001598 <MX_TIM2_Init+0xdc>)
 8001510:	f002 fcda 	bl	8003ec8 <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800151a:	f000 f8e9 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4619      	mov	r1, r3
 800152a:	481b      	ldr	r0, [pc, #108]	@ (8001598 <MX_TIM2_Init+0xdc>)
 800152c:	f002 ff00 	bl	8004330 <HAL_TIM_ConfigClockSource>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001536:	f000 f8db 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800153a:	4817      	ldr	r0, [pc, #92]	@ (8001598 <MX_TIM2_Init+0xdc>)
 800153c:	f002 fd13 	bl	8003f66 <HAL_TIM_IC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001546:	f000 f8d3 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <MX_TIM2_Init+0xdc>)
 800155a:	f003 fa4d 	bl	80049f8 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001564:	f000 f8c4 	bl	80016f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2204      	movs	r2, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <MX_TIM2_Init+0xdc>)
 8001580:	f002 fe3a 	bl	80041f8 <HAL_TIM_IC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800158a:	f000 f8b1 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000d8 	.word	0x200000d8

0800159c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_USART1_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_USART1_UART_Init+0x4c>)
 80015d4:	f003 faa0 	bl	8004b18 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f000 f887 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000120 	.word	0x20000120
 80015ec:	40011000 	.word	0x40011000

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	4b36      	ldr	r3, [pc, #216]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a35      	ldr	r2, [pc, #212]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a2e      	ldr	r2, [pc, #184]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a27      	ldr	r2, [pc, #156]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <MX_GPIO_Init+0xf4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HC_TRIG_Pin|ILI9341_CS_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2103      	movs	r1, #3
 800165e:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <MX_GPIO_Init+0xf8>)
 8001660:	f001 fa50 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RC522_CS_Pin|RC522_RST_Pin|ILI9341_DC_Pin|ILI9341_RESET_Pin|HX711_SCK_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f241 0107 	movw	r1, #4103	@ 0x1007
 800166a:	4820      	ldr	r0, [pc, #128]	@ (80016ec <MX_GPIO_Init+0xfc>)
 800166c:	f001 fa4a 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HC_TRIG_Pin ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = HC_TRIG_Pin|ILI9341_CS_Pin;
 8001670:	2303      	movs	r3, #3
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <MX_GPIO_Init+0xf8>)
 8001688:	f001 f878 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_ECHO_Pin */
  GPIO_InitStruct.Pin = HC_ECHO_Pin;
 800168c:	2310      	movs	r3, #16
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	4812      	ldr	r0, [pc, #72]	@ (80016e8 <MX_GPIO_Init+0xf8>)
 80016a0:	f001 f86c 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : RC522_CS_Pin RC522_RST_Pin ILI9341_DC_Pin ILI9341_RESET_Pin HX711_SCK_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|RC522_RST_Pin|ILI9341_DC_Pin|ILI9341_RESET_Pin|HX711_SCK_Pin;
 80016a4:	f241 0307 	movw	r3, #4103	@ 0x1007
 80016a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	@ (80016ec <MX_GPIO_Init+0xfc>)
 80016be:	f001 f85d 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 80016c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_GPIO_Init+0xfc>)
 80016d8:	f001 f850 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016dc:	bf00      	nop
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020400 	.word	0x40020400

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  System_Error_Handler(__FILE__, __LINE__, __FUNCTION__);
 80016f4:	4a03      	ldr	r2, [pc, #12]	@ (8001704 <Error_Handler+0x14>)
 80016f6:	f240 314b 	movw	r1, #843	@ 0x34b
 80016fa:	4803      	ldr	r0, [pc, #12]	@ (8001708 <Error_Handler+0x18>)
 80016fc:	f000 f806 	bl	800170c <System_Error_Handler>
  /* USER CODE END Error_Handler_Debug */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	08006d68 	.word	0x08006d68
 8001708:	08006d1c 	.word	0x08006d1c

0800170c <System_Error_Handler>:

/**
 * @brief System error handler with detailed reporting
 */
void System_Error_Handler(const char* file, int line, const char* function) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
    Debug_Printf("SYSTEM ERROR!\r\n");
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <System_Error_Handler+0x34>)
 800171a:	f7ff fa58 	bl	8000bce <Debug_Printf>
    Debug_Printf("File: %s\r\n", file);
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	4808      	ldr	r0, [pc, #32]	@ (8001744 <System_Error_Handler+0x38>)
 8001722:	f7ff fa54 	bl	8000bce <Debug_Printf>
    Debug_Printf("Line: %d\r\n", line);
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <System_Error_Handler+0x3c>)
 800172a:	f7ff fa50 	bl	8000bce <Debug_Printf>
    Debug_Printf("Function: %s\r\n", function);
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4806      	ldr	r0, [pc, #24]	@ (800174c <System_Error_Handler+0x40>)
 8001732:	f7ff fa4c 	bl	8000bce <Debug_Printf>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001736:	b672      	cpsid	i
}
 8001738:	bf00      	nop
    }
#endif
    
    // Disable interrupts and enter infinite loop
    __disable_irq();
    while(1) {
 800173a:	bf00      	nop
 800173c:	e7fd      	b.n	800173a <System_Error_Handler+0x2e>
 800173e:	bf00      	nop
 8001740:	08006d30 	.word	0x08006d30
 8001744:	08006d40 	.word	0x08006d40
 8001748:	08006d4c 	.word	0x08006d4c
 800174c:	08006d58 	.word	0x08006d58

08001750 <RC522_WriteRegister>:
extern UART_HandleTypeDef huart1;

/**
 * @brief Write data to RC522 register
 */
void RC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2];
    tx_data[0] = (addr << 1) & 0x7E;  // Address shifted and write bit
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800176a:	b2db      	uxtb	r3, r3
 800176c:	733b      	strb	r3, [r7, #12]
    tx_data[1] = val;
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	737b      	strb	r3, [r7, #13]
    
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2101      	movs	r1, #1
 8001776:	480a      	ldr	r0, [pc, #40]	@ (80017a0 <RC522_WriteRegister+0x50>)
 8001778:	f001 f9c4 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, tx_data, 2, HAL_MAX_DELAY);
 800177c:	f107 010c 	add.w	r1, r7, #12
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	2202      	movs	r2, #2
 8001786:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <RC522_WriteRegister+0x54>)
 8001788:	f001 feb7 	bl	80034fa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2101      	movs	r1, #1
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <RC522_WriteRegister+0x50>)
 8001792:	f001 f9b7 	bl	8002b04 <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40020400 	.word	0x40020400
 80017a4:	20000080 	.word	0x20000080

080017a8 <RC522_ReadRegister>:

/**
 * @brief Read data from RC522 register
 */
uint8_t RC522_ReadRegister(uint8_t addr) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data[2];
    uint8_t rx_data[2];
    
    tx_data[0] = ((addr << 1) & 0x7E) | 0x80;  // Address shifted and read bit
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	733b      	strb	r3, [r7, #12]
    tx_data[1] = 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	737b      	strb	r3, [r7, #13]
    
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	480c      	ldr	r0, [pc, #48]	@ (8001804 <RC522_ReadRegister+0x5c>)
 80017d4:	f001 f996 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	f107 010c 	add.w	r1, r7, #12
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2302      	movs	r3, #2
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <RC522_ReadRegister+0x60>)
 80017ea:	f001 ffca 	bl	8003782 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2101      	movs	r1, #1
 80017f2:	4804      	ldr	r0, [pc, #16]	@ (8001804 <RC522_ReadRegister+0x5c>)
 80017f4:	f001 f986 	bl	8002b04 <HAL_GPIO_WritePin>
    
    return rx_data[1];
 80017f8:	7a7b      	ldrb	r3, [r7, #9]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020400 	.word	0x40020400
 8001808:	20000080 	.word	0x20000080

0800180c <RC522_SetBitMask>:

/**
 * @brief Set bit mask in register
 */
void RC522_SetBitMask(uint8_t addr, uint8_t mask) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
    uint8_t val = RC522_ReadRegister(addr);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffc2 	bl	80017a8 <RC522_ReadRegister>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(addr, val | mask);
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	4313      	orrs	r3, r2
 800182e:	b2da      	uxtb	r2, r3
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff8b 	bl	8001750 <RC522_WriteRegister>
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <RC522_ClearBitMask>:

/**
 * @brief Clear bit mask in register
 */
void RC522_ClearBitMask(uint8_t addr, uint8_t mask) {
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	460a      	mov	r2, r1
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	4613      	mov	r3, r2
 8001850:	71bb      	strb	r3, [r7, #6]
    uint8_t val = RC522_ReadRegister(addr);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ffa7 	bl	80017a8 <RC522_ReadRegister>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
    RC522_WriteRegister(addr, val & (~mask));
 800185e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001862:	43db      	mvns	r3, r3
 8001864:	b25a      	sxtb	r2, r3
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4013      	ands	r3, r2
 800186c:	b25b      	sxtb	r3, r3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff6b 	bl	8001750 <RC522_WriteRegister>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <RC522_Reset>:

/**
 * @brief Reset RC522 with improved sequence
 */
void RC522_Reset(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
    // Hardware reset if RST pin is defined
    #ifdef RC522_RST_Pin
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2104      	movs	r1, #4
 800188e:	4817      	ldr	r0, [pc, #92]	@ (80018ec <RC522_Reset+0x68>)
 8001890:	f001 f938 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Hold reset for 10ms
 8001894:	200a      	movs	r0, #10
 8001896:	f000 fda9 	bl	80023ec <HAL_Delay>
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2104      	movs	r1, #4
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <RC522_Reset+0x68>)
 80018a0:	f001 f930 	bl	8002b04 <HAL_GPIO_WritePin>
    HAL_Delay(50);  // Wait for RC522 to start up
 80018a4:	2032      	movs	r0, #50	@ 0x32
 80018a6:	f000 fda1 	bl	80023ec <HAL_Delay>
    #endif
    
    // Software reset command
    RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_SOFT_RESET);
 80018aa:	210f      	movs	r1, #15
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff ff4f 	bl	8001750 <RC522_WriteRegister>
    HAL_Delay(RC522_RESET_DELAY_MS);
 80018b2:	2032      	movs	r0, #50	@ 0x32
 80018b4:	f000 fd9a 	bl	80023ec <HAL_Delay>
    
    // Wait for reset to complete - check if RC522 is ready
    for (int i = 0; i < 10; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	e00d      	b.n	80018da <RC522_Reset+0x56>
        uint8_t status = RC522_ReadRegister(RC522_REG_COMMAND);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff ff72 	bl	80017a8 <RC522_ReadRegister>
 80018c4:	4603      	mov	r3, r0
 80018c6:	70fb      	strb	r3, [r7, #3]
        if (status == RC522_CMD_IDLE) {
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <RC522_Reset+0x5e>
            break;  // Reset completed
        }
        HAL_Delay(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f000 fd8c 	bl	80023ec <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3301      	adds	r3, #1
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b09      	cmp	r3, #9
 80018de:	ddee      	ble.n	80018be <RC522_Reset+0x3a>
    }
}
 80018e0:	e000      	b.n	80018e4 <RC522_Reset+0x60>
            break;  // Reset completed
 80018e2:	bf00      	nop
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020400 	.word	0x40020400

080018f0 <RC522_AntennaOn>:

/**
 * @brief Turn on antenna
 */
void RC522_AntennaOn(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
    uint8_t val = RC522_ReadRegister(RC522_REG_TX_CONTROL);
 80018f6:	2014      	movs	r0, #20
 80018f8:	f7ff ff56 	bl	80017a8 <RC522_ReadRegister>
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
    if (!(val & 0x03)) {
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d103      	bne.n	8001912 <RC522_AntennaOn+0x22>
        RC522_SetBitMask(RC522_REG_TX_CONTROL, 0x03);
 800190a:	2103      	movs	r1, #3
 800190c:	2014      	movs	r0, #20
 800190e:	f7ff ff7d 	bl	800180c <RC522_SetBitMask>
    }
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <RC522_Init>:
}

/**
 * @brief Initialize RC522 with enhanced sequence
 */
void RC522_Init(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    // Initialize CS pin to high (not selected)
    HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2101      	movs	r1, #1
 8001924:	4815      	ldr	r0, [pc, #84]	@ (800197c <RC522_Init+0x60>)
 8001926:	f001 f8ed 	bl	8002b04 <HAL_GPIO_WritePin>
    
    // Initialize RST pin if defined
    #ifdef RC522_RST_Pin
    HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2104      	movs	r1, #4
 800192e:	4813      	ldr	r0, [pc, #76]	@ (800197c <RC522_Init+0x60>)
 8001930:	f001 f8e8 	bl	8002b04 <HAL_GPIO_WritePin>
    #endif
    
    // Wait for power stabilization
    HAL_Delay(100);
 8001934:	2064      	movs	r0, #100	@ 0x64
 8001936:	f000 fd59 	bl	80023ec <HAL_Delay>
    
    // Reset RC522
    RC522_Reset();
 800193a:	f7ff ffa3 	bl	8001884 <RC522_Reset>
    
    // Additional delay after reset
    HAL_Delay(100);
 800193e:	2064      	movs	r0, #100	@ 0x64
 8001940:	f000 fd54 	bl	80023ec <HAL_Delay>
    
    // Configure timer
    RC522_WriteRegister(RC522_REG_T_MODE, 0x8D);
 8001944:	218d      	movs	r1, #141	@ 0x8d
 8001946:	202a      	movs	r0, #42	@ 0x2a
 8001948:	f7ff ff02 	bl	8001750 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_PRESCALER, 0x3E);
 800194c:	213e      	movs	r1, #62	@ 0x3e
 800194e:	202b      	movs	r0, #43	@ 0x2b
 8001950:	f7ff fefe 	bl	8001750 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_RELOAD_L, 30);
 8001954:	211e      	movs	r1, #30
 8001956:	202d      	movs	r0, #45	@ 0x2d
 8001958:	f7ff fefa 	bl	8001750 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_T_RELOAD_H, 0);
 800195c:	2100      	movs	r1, #0
 800195e:	202c      	movs	r0, #44	@ 0x2c
 8001960:	f7ff fef6 	bl	8001750 <RC522_WriteRegister>
    
    // Configure RF
    RC522_WriteRegister(RC522_REG_TX_AUTO, 0x40);
 8001964:	2140      	movs	r1, #64	@ 0x40
 8001966:	2015      	movs	r0, #21
 8001968:	f7ff fef2 	bl	8001750 <RC522_WriteRegister>
    RC522_WriteRegister(RC522_REG_MODE, 0x3D);
 800196c:	213d      	movs	r1, #61	@ 0x3d
 800196e:	2011      	movs	r0, #17
 8001970:	f7ff feee 	bl	8001750 <RC522_WriteRegister>
    
    RC522_AntennaOn();
 8001974:	f7ff ffbc 	bl	80018f0 <RC522_AntennaOn>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40020400 	.word	0x40020400

08001980 <RC522_ToCard>:

/**
 * @brief Communicate with card
 */
RC522_Status RC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, 
                          uint8_t *backData, uint16_t *backLen) {
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	4613      	mov	r3, r2
 8001990:	73bb      	strb	r3, [r7, #14]
    RC522_Status status = RC522_ERROR;
 8001992:	2302      	movs	r3, #2
 8001994:	75fb      	strb	r3, [r7, #23]
    uint8_t irqEn = 0x77;
 8001996:	2377      	movs	r3, #119	@ 0x77
 8001998:	75bb      	strb	r3, [r7, #22]
    uint8_t waitIRq = 0x30;
 800199a:	2330      	movs	r3, #48	@ 0x30
 800199c:	757b      	strb	r3, [r7, #21]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;
    
    switch (command) {
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d006      	beq.n	80019b2 <RC522_ToCard+0x32>
 80019a4:	2b0e      	cmp	r3, #14
 80019a6:	d109      	bne.n	80019bc <RC522_ToCard+0x3c>
        case RC522_CMD_MF_AUTHENT:
            irqEn = 0x12;
 80019a8:	2312      	movs	r3, #18
 80019aa:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x10;
 80019ac:	2310      	movs	r3, #16
 80019ae:	757b      	strb	r3, [r7, #21]
            break;
 80019b0:	e005      	b.n	80019be <RC522_ToCard+0x3e>
        case RC522_CMD_TRANSCEIVE:
            irqEn = 0x77;
 80019b2:	2377      	movs	r3, #119	@ 0x77
 80019b4:	75bb      	strb	r3, [r7, #22]
            waitIRq = 0x30;
 80019b6:	2330      	movs	r3, #48	@ 0x30
 80019b8:	757b      	strb	r3, [r7, #21]
            break;
 80019ba:	e000      	b.n	80019be <RC522_ToCard+0x3e>
        default:
            break;
 80019bc:	bf00      	nop
    }
    
    RC522_WriteRegister(RC522_REG_COMM_IEN, irqEn | 0x80);
 80019be:	7dbb      	ldrb	r3, [r7, #22]
 80019c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7ff fec1 	bl	8001750 <RC522_WriteRegister>
    RC522_ClearBitMask(RC522_REG_COMM_IRQ, 0x80);
 80019ce:	2180      	movs	r1, #128	@ 0x80
 80019d0:	2004      	movs	r0, #4
 80019d2:	f7ff ff36 	bl	8001842 <RC522_ClearBitMask>
    RC522_SetBitMask(RC522_REG_FIFO_LEVEL, 0x80);
 80019d6:	2180      	movs	r1, #128	@ 0x80
 80019d8:	200a      	movs	r0, #10
 80019da:	f7ff ff17 	bl	800180c <RC522_SetBitMask>
    
    RC522_WriteRegister(RC522_REG_COMMAND, RC522_CMD_IDLE);
 80019de:	2100      	movs	r1, #0
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7ff feb5 	bl	8001750 <RC522_WriteRegister>
    
    // Write data to FIFO
    for (i = 0; i < sendLen; i++) {
 80019e6:	2300      	movs	r3, #0
 80019e8:	827b      	strh	r3, [r7, #18]
 80019ea:	e00a      	b.n	8001a02 <RC522_ToCard+0x82>
        RC522_WriteRegister(RC522_REG_FIFO_DATA, sendData[i]);
 80019ec:	8a7b      	ldrh	r3, [r7, #18]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4619      	mov	r1, r3
 80019f6:	2009      	movs	r0, #9
 80019f8:	f7ff feaa 	bl	8001750 <RC522_WriteRegister>
    for (i = 0; i < sendLen; i++) {
 80019fc:	8a7b      	ldrh	r3, [r7, #18]
 80019fe:	3301      	adds	r3, #1
 8001a00:	827b      	strh	r3, [r7, #18]
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	8a7a      	ldrh	r2, [r7, #18]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3ef      	bcc.n	80019ec <RC522_ToCard+0x6c>
    }
    
    // Execute command
    RC522_WriteRegister(RC522_REG_COMMAND, command);
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff fe9d 	bl	8001750 <RC522_WriteRegister>
    if (command == RC522_CMD_TRANSCEIVE) {
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d103      	bne.n	8001a24 <RC522_ToCard+0xa4>
        RC522_SetBitMask(RC522_REG_BIT_FRAMING, 0x80);
 8001a1c:	2180      	movs	r1, #128	@ 0x80
 8001a1e:	200d      	movs	r0, #13
 8001a20:	f7ff fef4 	bl	800180c <RC522_SetBitMask>
    }
    
    // Wait for completion
    i = 2000;
 8001a24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a28:	827b      	strh	r3, [r7, #18]
    do {
        n = RC522_ReadRegister(RC522_REG_COMM_IRQ);
 8001a2a:	2004      	movs	r0, #4
 8001a2c:	f7ff febc 	bl	80017a8 <RC522_ReadRegister>
 8001a30:	4603      	mov	r3, r0
 8001a32:	753b      	strb	r3, [r7, #20]
        i--;
 8001a34:	8a7b      	ldrh	r3, [r7, #18]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	827b      	strh	r3, [r7, #18]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8001a3a:	8a7b      	ldrh	r3, [r7, #18]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00a      	beq.n	8001a56 <RC522_ToCard+0xd6>
 8001a40:	7d3b      	ldrb	r3, [r7, #20]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <RC522_ToCard+0xd6>
 8001a4a:	7d3a      	ldrb	r2, [r7, #20]
 8001a4c:	7d7b      	ldrb	r3, [r7, #21]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0e9      	beq.n	8001a2a <RC522_ToCard+0xaa>
    
    RC522_ClearBitMask(RC522_REG_BIT_FRAMING, 0x80);
 8001a56:	2180      	movs	r1, #128	@ 0x80
 8001a58:	200d      	movs	r0, #13
 8001a5a:	f7ff fef2 	bl	8001842 <RC522_ClearBitMask>
    
    if (i != 0) {
 8001a5e:	8a7b      	ldrh	r3, [r7, #18]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d057      	beq.n	8001b14 <RC522_ToCard+0x194>
        if (!(RC522_ReadRegister(RC522_REG_ERROR) & 0x1B)) {
 8001a64:	2006      	movs	r0, #6
 8001a66:	f7ff fe9f 	bl	80017a8 <RC522_ReadRegister>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 031b 	and.w	r3, r3, #27
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d14d      	bne.n	8001b10 <RC522_ToCard+0x190>
            status = RC522_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]
            
            if (n & irqEn & 0x01) {
 8001a78:	7d3a      	ldrb	r2, [r7, #20]
 8001a7a:	7dbb      	ldrb	r3, [r7, #22]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <RC522_ToCard+0x10c>
                status = RC522_NOTAG;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	75fb      	strb	r3, [r7, #23]
            }
            
            if (command == RC522_CMD_TRANSCEIVE) {
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d140      	bne.n	8001b14 <RC522_ToCard+0x194>
                n = RC522_ReadRegister(RC522_REG_FIFO_LEVEL);
 8001a92:	200a      	movs	r0, #10
 8001a94:	f7ff fe88 	bl	80017a8 <RC522_ReadRegister>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	753b      	strb	r3, [r7, #20]
                lastBits = RC522_ReadRegister(RC522_REG_CONTROL) & 0x07;
 8001a9c:	200c      	movs	r0, #12
 8001a9e:	f7ff fe83 	bl	80017a8 <RC522_ReadRegister>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	747b      	strb	r3, [r7, #17]
                if (lastBits) {
 8001aaa:	7c7b      	ldrb	r3, [r7, #17]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <RC522_ToCard+0x148>
                    *backLen = (n - 1) * 8 + lastBits;
 8001ab0:	7d3b      	ldrb	r3, [r7, #20]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	7c7b      	ldrb	r3, [r7, #17]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	e005      	b.n	8001ad4 <RC522_ToCard+0x154>
                } else {
                    *backLen = n * 8;
 8001ac8:	7d3b      	ldrb	r3, [r7, #20]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad2:	801a      	strh	r2, [r3, #0]
                }
                
                if (n == 0) {
 8001ad4:	7d3b      	ldrb	r3, [r7, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <RC522_ToCard+0x15e>
                    n = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	753b      	strb	r3, [r7, #20]
                }
                if (n > 16) {
 8001ade:	7d3b      	ldrb	r3, [r7, #20]
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d901      	bls.n	8001ae8 <RC522_ToCard+0x168>
                    n = 16;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	753b      	strb	r3, [r7, #20]
                }
                
                // Read received data from FIFO
                for (i = 0; i < n; i++) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	827b      	strh	r3, [r7, #18]
 8001aec:	e00a      	b.n	8001b04 <RC522_ToCard+0x184>
                    backData[i] = RC522_ReadRegister(RC522_REG_FIFO_DATA);
 8001aee:	8a7b      	ldrh	r3, [r7, #18]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	18d4      	adds	r4, r2, r3
 8001af4:	2009      	movs	r0, #9
 8001af6:	f7ff fe57 	bl	80017a8 <RC522_ReadRegister>
 8001afa:	4603      	mov	r3, r0
 8001afc:	7023      	strb	r3, [r4, #0]
                for (i = 0; i < n; i++) {
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	3301      	adds	r3, #1
 8001b02:	827b      	strh	r3, [r7, #18]
 8001b04:	7d3b      	ldrb	r3, [r7, #20]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	8a7a      	ldrh	r2, [r7, #18]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3ef      	bcc.n	8001aee <RC522_ToCard+0x16e>
 8001b0e:	e001      	b.n	8001b14 <RC522_ToCard+0x194>
                }
            }
        } else {
            status = RC522_ERROR;
 8001b10:	2302      	movs	r3, #2
 8001b12:	75fb      	strb	r3, [r7, #23]
        }
    }
    
    return status;
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}

08001b1e <RC522_Request>:

/**
 * @brief Request card
 */
RC522_Status RC522_Request(uint8_t reqMode, uint8_t *TagType) {
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af02      	add	r7, sp, #8
 8001b24:	4603      	mov	r3, r0
 8001b26:	6039      	str	r1, [r7, #0]
 8001b28:	71fb      	strb	r3, [r7, #7]
    RC522_Status status;
    uint16_t backBits;
    
    RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x07);
 8001b2a:	2107      	movs	r1, #7
 8001b2c:	200d      	movs	r0, #13
 8001b2e:	f7ff fe0f 	bl	8001750 <RC522_WriteRegister>
    
    TagType[0] = reqMode;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	701a      	strb	r2, [r3, #0]
    status = RC522_ToCard(RC522_CMD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	200c      	movs	r0, #12
 8001b46:	f7ff ff1b 	bl	8001980 <RC522_ToCard>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
    
    if ((status != RC522_OK) || (backBits != 0x10)) {
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <RC522_Request+0x3c>
 8001b54:	89bb      	ldrh	r3, [r7, #12]
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d001      	beq.n	8001b5e <RC522_Request+0x40>
        status = RC522_ERROR;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <RC522_Anticoll>:

/**
 * @brief Anticollision
 */
RC522_Status RC522_Anticoll(uint8_t *serNum) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	6078      	str	r0, [r7, #4]
    RC522_Status status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;
    
    RC522_WriteRegister(RC522_REG_BIT_FRAMING, 0x00);
 8001b74:	2100      	movs	r1, #0
 8001b76:	200d      	movs	r0, #13
 8001b78:	f7ff fdea 	bl	8001750 <RC522_WriteRegister>
    
    serNum[0] = PICC_CMD_SEL_CL1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2293      	movs	r2, #147	@ 0x93
 8001b80:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3301      	adds	r3, #1
 8001b86:	2220      	movs	r2, #32
 8001b88:	701a      	strb	r2, [r3, #0]
    
    status = RC522_ToCard(RC522_CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001b8a:	f107 030a 	add.w	r3, r7, #10
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	200c      	movs	r0, #12
 8001b98:	f7ff fef2 	bl	8001980 <RC522_ToCard>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    
    if (status == RC522_OK) {
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <RC522_Anticoll+0x70>
        // Check serial number
        for (i = 0; i < 4; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73bb      	strb	r3, [r7, #14]
 8001baa:	e009      	b.n	8001bc0 <RC522_Anticoll+0x58>
            serNumCheck ^= serNum[i];
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	7b7b      	ldrb	r3, [r7, #13]
 8001bb6:	4053      	eors	r3, r2
 8001bb8:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++) {
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	73bb      	strb	r3, [r7, #14]
 8001bc0:	7bbb      	ldrb	r3, [r7, #14]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d9f2      	bls.n	8001bac <RC522_Anticoll+0x44>
        }
        if (serNumCheck != serNum[i]) {
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	7b7a      	ldrb	r2, [r7, #13]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <RC522_Anticoll+0x70>
            status = RC522_ERROR;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	73fb      	strb	r3, [r7, #15]
        }
    }
    
    return status;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <RC522_ReadUID>:
}

/**
 * @brief Read UID from card
 */
RC522_Status RC522_ReadUID(uint8_t *uid) {
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
    RC522_Status status;
    uint8_t TagType[2];
    
    status = RC522_Request(PICC_CMD_REQA, TagType);
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4619      	mov	r1, r3
 8001bf0:	2026      	movs	r0, #38	@ 0x26
 8001bf2:	f7ff ff94 	bl	8001b1e <RC522_Request>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]
    if (status == RC522_OK) {
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d104      	bne.n	8001c0a <RC522_ReadUID+0x28>
        status = RC522_Anticoll(uid);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffb1 	bl	8001b68 <RC522_Anticoll>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <RC522_Diagnostics>:

/**
 * @brief Comprehensive RC522 diagnostics - DISABLED
 */
void RC522_Diagnostics(void) {
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
    // Diagnostics disabled to keep UART1 free for ESP32 communication
    // Enable RC522_DEBUG_ENABLED to see diagnostics via separate UART
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <RC522_TestSPISettings>:

/**
 * @brief Test different SPI settings - DISABLED  
 */
void RC522_TestSPISettings(void) {
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
    // SPI settings test disabled to keep UART1 free for ESP32 communication
    // Enable RC522_DEBUG_ENABLED to see test results via separate UART
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <IsCardRegistered>:
static uint8_t registered_cards[MAX_REGISTERED_CARDS][4];
static uint8_t registered_count = 0;
static uint8_t rx_buffer[RX_BUFFER_SIZE];
static uint8_t rx_index = 0;

static uint8_t IsCardRegistered(uint8_t* uid) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < registered_count; i++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e010      	b.n	8001c60 <IsCardRegistered+0x30>
        if (memcmp(registered_cards[i], uid, 4) == 0) {
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <IsCardRegistered+0x44>)
 8001c44:	4413      	add	r3, r2
 8001c46:	2204      	movs	r2, #4
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 f848 	bl	8005ce0 <memcmp>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <IsCardRegistered+0x2a>
            return 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e008      	b.n	8001c6c <IsCardRegistered+0x3c>
    for (uint8_t i = 0; i < registered_count; i++) {
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <IsCardRegistered+0x48>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d3e9      	bcc.n	8001c3e <IsCardRegistered+0xe>
        }
    }
    return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200001ac 	.word	0x200001ac
 8001c78:	200001fc 	.word	0x200001fc

08001c7c <RegisterCard>:

static uint8_t RegisterCard(uint8_t* uid) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    if (registered_count >= MAX_REGISTERED_CARDS) return 0;
 8001c84:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <RegisterCard+0x4c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b13      	cmp	r3, #19
 8001c8a:	d901      	bls.n	8001c90 <RegisterCard+0x14>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e016      	b.n	8001cbe <RegisterCard+0x42>
    if (IsCardRegistered(uid)) return 1;
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffcd 	bl	8001c30 <IsCardRegistered>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <RegisterCard+0x24>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e00e      	b.n	8001cbe <RegisterCard+0x42>
    
    memcpy(registered_cards[registered_count], uid, 4);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <RegisterCard+0x4c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <RegisterCard+0x50>)
 8001ca8:	4413      	add	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	601a      	str	r2, [r3, #0]
    registered_count++;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <RegisterCard+0x4c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <RegisterCard+0x4c>)
 8001cba:	701a      	strb	r2, [r3, #0]
    return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001fc 	.word	0x200001fc
 8001ccc:	200001ac 	.word	0x200001ac

08001cd0 <SimpleProtocol_SendRegisteredCard>:

void SimpleProtocol_SendRegisteredCard(uint8_t* uid, float weight) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t buffer[11];
    buffer[0] = PROTOCOL_START_BYTE;
 8001cdc:	23aa      	movs	r3, #170	@ 0xaa
 8001cde:	733b      	strb	r3, [r7, #12]
    buffer[1] = MSG_TYPE_CARD_REGISTERED;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	737b      	strb	r3, [r7, #13]
    memcpy(&buffer[2], uid, 4);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8c7 300e 	str.w	r3, [r7, #14]
    memcpy(&buffer[6], &weight, 4);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f8c7 3012 	str.w	r3, [r7, #18]
    buffer[10] = PROTOCOL_END_BYTE;
 8001cf2:	2355      	movs	r3, #85	@ 0x55
 8001cf4:	75bb      	strb	r3, [r7, #22]
    
    HAL_UART_Transmit(&huart1, buffer, 11, 1000);
 8001cf6:	f107 010c 	add.w	r1, r7, #12
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	220b      	movs	r2, #11
 8001d00:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <SimpleProtocol_SendRegisteredCard+0x40>)
 8001d02:	f002 ff59 	bl	8004bb8 <HAL_UART_Transmit>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000120 	.word	0x20000120

08001d14 <SimpleProtocol_SendUnregisteredCard>:

void SimpleProtocol_SendUnregisteredCard(uint8_t* uid) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[7];
    buffer[0] = PROTOCOL_START_BYTE;
 8001d1c:	23aa      	movs	r3, #170	@ 0xaa
 8001d1e:	723b      	strb	r3, [r7, #8]
    buffer[1] = MSG_TYPE_CARD_UNREGISTERED;
 8001d20:	2302      	movs	r3, #2
 8001d22:	727b      	strb	r3, [r7, #9]
    memcpy(&buffer[2], uid, 4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8c7 300a 	str.w	r3, [r7, #10]
    buffer[6] = PROTOCOL_END_BYTE;
 8001d2c:	2355      	movs	r3, #85	@ 0x55
 8001d2e:	73bb      	strb	r3, [r7, #14]
    
    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
 8001d30:	f107 0108 	add.w	r1, r7, #8
 8001d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d38:	2207      	movs	r2, #7
 8001d3a:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <SimpleProtocol_SendUnregisteredCard+0x34>)
 8001d3c:	f002 ff3c 	bl	8004bb8 <HAL_UART_Transmit>
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000120 	.word	0x20000120

08001d4c <SimpleProtocol_ProcessCardDetection>:

void SimpleProtocol_ProcessCardDetection(uint8_t* uid, float weight) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	ed87 0a00 	vstr	s0, [r7]
    if (IsCardRegistered(uid)) {
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff69 	bl	8001c30 <IsCardRegistered>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <SimpleProtocol_ProcessCardDetection+0x24>
        SimpleProtocol_SendRegisteredCard(uid, weight);
 8001d64:	ed97 0a00 	vldr	s0, [r7]
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ffb1 	bl	8001cd0 <SimpleProtocol_SendRegisteredCard>
    } else {
        SimpleProtocol_SendUnregisteredCard(uid);
    }
}
 8001d6e:	e002      	b.n	8001d76 <SimpleProtocol_ProcessCardDetection+0x2a>
        SimpleProtocol_SendUnregisteredCard(uid);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ffcf 	bl	8001d14 <SimpleProtocol_SendUnregisteredCard>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <SimpleProtocol_ProcessReceivedData>:

/**
 * @brief Process received data from ESP32
 */
void SimpleProtocol_ProcessReceivedData(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
    static uint32_t last_timeout_check = 0;
    uint32_t current_time = HAL_GetTick();
 8001d86:	f000 fb25 	bl	80023d4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]
    
    // Process all available bytes using UART1 (debug disabled)
    uint8_t received_byte;
    while (HAL_UART_Receive(&huart1, &received_byte, 1, 0) == HAL_OK) {
 8001d8c:	e093      	b.n	8001eb6 <SimpleProtocol_ProcessReceivedData+0x136>
        rx_buffer[rx_index] = received_byte;
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	78f9      	ldrb	r1, [r7, #3]
 8001d96:	4b59      	ldr	r3, [pc, #356]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001d98:	5499      	strb	r1, [r3, r2]
        rx_index++;
 8001d9a:	4b57      	ldr	r3, [pc, #348]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b55      	ldr	r3, [pc, #340]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001da4:	701a      	strb	r2, [r3, #0]
        last_timeout_check = current_time;
 8001da6:	4a56      	ldr	r2, [pc, #344]	@ (8001f00 <SimpleProtocol_ProcessReceivedData+0x180>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	6013      	str	r3, [r2, #0]
        // if (rx_index == 7) {
        //     Debug_Printf("\r\n");
        // }
        
        // Check for start byte
        if (rx_index == 1 && received_byte != PROTOCOL_START_BYTE) {
 8001dac:	4b52      	ldr	r3, [pc, #328]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <SimpleProtocol_ProcessReceivedData+0x42>
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	2baa      	cmp	r3, #170	@ 0xaa
 8001db8:	d003      	beq.n	8001dc2 <SimpleProtocol_ProcessReceivedData+0x42>
            rx_index = 0;
 8001dba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
            continue;
 8001dc0:	e079      	b.n	8001eb6 <SimpleProtocol_ProcessReceivedData+0x136>
        }
        
        // We need at least 2 bytes to determine message type
        if (rx_index >= 2) {
 8001dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d969      	bls.n	8001e9e <SimpleProtocol_ProcessReceivedData+0x11e>
            uint8_t msg_type = rx_buffer[1];
 8001dca:	4b4c      	ldr	r3, [pc, #304]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	73fb      	strb	r3, [r7, #15]
            uint8_t expected_length = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
            
            switch (msg_type) {
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d002      	beq.n	8001de0 <SimpleProtocol_ProcessReceivedData+0x60>
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d003      	beq.n	8001de6 <SimpleProtocol_ProcessReceivedData+0x66>
 8001dde:	e00d      	b.n	8001dfc <SimpleProtocol_ProcessReceivedData+0x7c>
                case MSG_TYPE_REGISTER_CARD:
                    expected_length = 7; // AA 03 UID[4] 55
 8001de0:	2307      	movs	r3, #7
 8001de2:	75fb      	strb	r3, [r7, #23]
                    break;
 8001de4:	e00f      	b.n	8001e06 <SimpleProtocol_ProcessReceivedData+0x86>
                case MSG_TYPE_VALID_CARDS:
                    // Variable length message: AA 04 LENGTH DATA... CHECKSUM 55
                    if (rx_index >= 3) {
 8001de6:	4b44      	ldr	r3, [pc, #272]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d90a      	bls.n	8001e04 <SimpleProtocol_ProcessReceivedData+0x84>
                        uint8_t data_length = rx_buffer[2];
 8001dee:	4b43      	ldr	r3, [pc, #268]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001df0:	789b      	ldrb	r3, [r3, #2]
 8001df2:	73bb      	strb	r3, [r7, #14]
                        expected_length = 6 + data_length; // AA 04 LENGTH DATA[data_length] CHECKSUM 55
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	3306      	adds	r3, #6
 8001df8:	75fb      	strb	r3, [r7, #23]
                    }
                    break;
 8001dfa:	e003      	b.n	8001e04 <SimpleProtocol_ProcessReceivedData+0x84>
                default:
                    // Unknown message type, reset and try again
                    rx_index = 0;
 8001dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
                    continue;
 8001e02:	e058      	b.n	8001eb6 <SimpleProtocol_ProcessReceivedData+0x136>
                    break;
 8001e04:	bf00      	nop
            }
            
            // Check if we have complete message
            if (expected_length > 0 && rx_index >= expected_length) {
 8001e06:	7dfb      	ldrb	r3, [r7, #23]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d048      	beq.n	8001e9e <SimpleProtocol_ProcessReceivedData+0x11e>
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d843      	bhi.n	8001e9e <SimpleProtocol_ProcessReceivedData+0x11e>
                // Verify end byte
                if (rx_buffer[expected_length - 1] == PROTOCOL_END_BYTE) {
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4a38      	ldr	r2, [pc, #224]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	2b55      	cmp	r3, #85	@ 0x55
 8001e20:	d135      	bne.n	8001e8e <SimpleProtocol_ProcessReceivedData+0x10e>
                    // Process the message
                    if (msg_type == MSG_TYPE_REGISTER_CARD) {
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d105      	bne.n	8001e34 <SimpleProtocol_ProcessReceivedData+0xb4>
                        // Extract UID from message: AA 03 UID[4] 55
                        uint8_t* uid = &rx_buffer[2];
 8001e28:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <SimpleProtocol_ProcessReceivedData+0x184>)
 8001e2a:	607b      	str	r3, [r7, #4]
                        
                        // Register the new card
                        if (RegisterCard(uid)) {
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff25 	bl	8001c7c <RegisterCard>
 8001e32:	e02c      	b.n	8001e8e <SimpleProtocol_ProcessReceivedData+0x10e>
                            // Debug disabled to free UART1 
                            // Debug_Printf("STM32: Card registered: %02X:%02X:%02X:%02X (Total: %d)\r\n", 
                            //            uid[0], uid[1], uid[2], uid[3], registered_count);
                        }
                    } else if (msg_type == MSG_TYPE_VALID_CARDS) {
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d129      	bne.n	8001e8e <SimpleProtocol_ProcessReceivedData+0x10e>
                        // Process valid cards list from ESP32
                        uint8_t data_length = rx_buffer[2];
 8001e3a:	4b30      	ldr	r3, [pc, #192]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	737b      	strb	r3, [r7, #13]
                        uint8_t num_cards = data_length / 4; // Each card is 4 bytes
 8001e40:	7b7b      	ldrb	r3, [r7, #13]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	733b      	strb	r3, [r7, #12]
                        
                        // Clear existing registered cards and load new ones
                        registered_count = 0;
 8001e46:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <SimpleProtocol_ProcessReceivedData+0x188>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
                        
                        for (uint8_t i = 0; i < num_cards && i < MAX_REGISTERED_CARDS; i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	75bb      	strb	r3, [r7, #22]
 8001e50:	e016      	b.n	8001e80 <SimpleProtocol_ProcessReceivedData+0x100>
                            uint8_t* uid = &rx_buffer[3 + (i * 4)];
 8001e52:	7dbb      	ldrb	r3, [r7, #22]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	3303      	adds	r3, #3
 8001e58:	4a28      	ldr	r2, [pc, #160]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60bb      	str	r3, [r7, #8]
                            memcpy(registered_cards[registered_count], uid, 4);
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <SimpleProtocol_ProcessReceivedData+0x188>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <SimpleProtocol_ProcessReceivedData+0x18c>)
 8001e66:	4413      	add	r3, r2
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	601a      	str	r2, [r3, #0]
                            registered_count++;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <SimpleProtocol_ProcessReceivedData+0x188>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <SimpleProtocol_ProcessReceivedData+0x188>)
 8001e78:	701a      	strb	r2, [r3, #0]
                        for (uint8_t i = 0; i < num_cards && i < MAX_REGISTERED_CARDS; i++) {
 8001e7a:	7dbb      	ldrb	r3, [r7, #22]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	75bb      	strb	r3, [r7, #22]
 8001e80:	7dba      	ldrb	r2, [r7, #22]
 8001e82:	7b3b      	ldrb	r3, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d202      	bcs.n	8001e8e <SimpleProtocol_ProcessReceivedData+0x10e>
 8001e88:	7dbb      	ldrb	r3, [r7, #22]
 8001e8a:	2b13      	cmp	r3, #19
 8001e8c:	d9e1      	bls.n	8001e52 <SimpleProtocol_ProcessReceivedData+0xd2>
                        // Debug_Printf("STM32: Loaded %d cards from ESP32\r\n", registered_count);
                    }
                }
                
                // Reset buffer after processing (successful or not)
                rx_index = 0;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
                memset(rx_buffer, 0, sizeof(rx_buffer));
 8001e94:	2220      	movs	r2, #32
 8001e96:	2100      	movs	r1, #0
 8001e98:	4818      	ldr	r0, [pc, #96]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001e9a:	f003 ff31 	bl	8005d00 <memset>
            }
        }
        
        // Prevent buffer overflow
        if (rx_index >= sizeof(rx_buffer)) {
 8001e9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b1f      	cmp	r3, #31
 8001ea4:	d907      	bls.n	8001eb6 <SimpleProtocol_ProcessReceivedData+0x136>
            rx_index = 0;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8001eac:	2220      	movs	r2, #32
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4812      	ldr	r0, [pc, #72]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001eb2:	f003 ff25 	bl	8005d00 <memset>
    while (HAL_UART_Receive(&huart1, &received_byte, 1, 0) == HAL_OK) {
 8001eb6:	1cf9      	adds	r1, r7, #3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	2201      	movs	r2, #1
 8001ebc:	4814      	ldr	r0, [pc, #80]	@ (8001f10 <SimpleProtocol_ProcessReceivedData+0x190>)
 8001ebe:	f002 ff06 	bl	8004cce <HAL_UART_Receive>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f43f af62 	beq.w	8001d8e <SimpleProtocol_ProcessReceivedData+0xe>
        }
    }
    
    // Timeout check: if we have partial data but no new bytes for too long, reset
    if (rx_index > 0 && (current_time - last_timeout_check) > 200) {
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <SimpleProtocol_ProcessReceivedData+0x16e>
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <SimpleProtocol_ProcessReceivedData+0x180>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2bc8      	cmp	r3, #200	@ 0xc8
 8001edc:	d907      	bls.n	8001eee <SimpleProtocol_ProcessReceivedData+0x16e>
        rx_index = 0;
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SimpleProtocol_ProcessReceivedData+0x178>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <SimpleProtocol_ProcessReceivedData+0x17c>)
 8001eea:	f003 ff09 	bl	8005d00 <memset>
    }
}
 8001eee:	bf00      	nop
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000220 	.word	0x20000220
 8001efc:	20000200 	.word	0x20000200
 8001f00:	20000224 	.word	0x20000224
 8001f04:	20000202 	.word	0x20000202
 8001f08:	200001fc 	.word	0x200001fc
 8001f0c:	200001ac 	.word	0x200001ac
 8001f10:	20000120 	.word	0x20000120

08001f14 <SimpleProtocol_Init>:

/**
 * @brief Initialize protocol with some default registered cards
 */
void SimpleProtocol_Init(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
    // Add some default registered cards for testing
    uint8_t default_card1[4] = {0x12, 0x34, 0x56, 0x78};
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <SimpleProtocol_Init+0x40>)
 8001f1c:	60fb      	str	r3, [r7, #12]
    uint8_t default_card2[4] = {0xAB, 0xCD, 0xEF, 0x01};
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <SimpleProtocol_Init+0x44>)
 8001f20:	60bb      	str	r3, [r7, #8]
    
    RegisterCard(default_card1);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fea8 	bl	8001c7c <RegisterCard>
    RegisterCard(default_card2);
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fea3 	bl	8001c7c <RegisterCard>
    
    // Send test message to ESP32 to verify connection
    HAL_Delay(2000); // Wait for ESP32 to initialize
 8001f36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f3a:	f000 fa57 	bl	80023ec <HAL_Delay>
    
    // Send a test unregistered card message to verify UART works
    uint8_t test_uid[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	607b      	str	r3, [r7, #4]
    SimpleProtocol_SendUnregisteredCard(test_uid);
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fee4 	bl	8001d14 <SimpleProtocol_SendUnregisteredCard>
    
    // Debug disabled to free UART1
    // Debug_Printf("STM32: Protocol initialized with %d default cards\r\n", registered_count);
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	78563412 	.word	0x78563412
 8001f58:	01efcdab 	.word	0x01efcdab

08001f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <HAL_MspInit+0x4c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa8 <HAL_MspInit+0x4c>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f72:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_MspInit+0x4c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_MspInit+0x4c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <HAL_MspInit+0x4c>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_MspInit+0x4c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_SPI_MspInit+0x94>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d133      	bne.n	8002036 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <HAL_SPI_MspInit+0x98>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_SPI_MspInit+0x98>)
 8001fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fde:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <HAL_SPI_MspInit+0x98>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_SPI_MspInit+0x98>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <HAL_SPI_MspInit+0x98>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_SPI_MspInit+0x98>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002006:	23e0      	movs	r3, #224	@ 0xe0
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002016:	2305      	movs	r3, #5
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4809      	ldr	r0, [pc, #36]	@ (8002048 <HAL_SPI_MspInit+0x9c>)
 8002022:	f000 fbab 	bl	800277c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2023      	movs	r0, #35	@ 0x23
 800202c:	f000 fadd 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002030:	2023      	movs	r0, #35	@ 0x23
 8002032:	f000 faf6 	bl	8002622 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	@ 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40013000 	.word	0x40013000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000

0800204c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	@ 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800206c:	d133      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_TIM_Base_MspInit+0x94>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	4a1a      	ldr	r2, [pc, #104]	@ (80020e0 <HAL_TIM_Base_MspInit+0x94>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6413      	str	r3, [r2, #64]	@ 0x40
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_TIM_Base_MspInit+0x94>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_TIM_Base_MspInit+0x94>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_TIM_Base_MspInit+0x94>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	@ 0x30
 800209a:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <HAL_TIM_Base_MspInit+0x94>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020a6:	2302      	movs	r3, #2
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020b6:	2301      	movs	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <HAL_TIM_Base_MspInit+0x98>)
 80020c2:	f000 fb5b 	bl	800277c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	201c      	movs	r0, #28
 80020cc:	f000 fa8d 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020d0:	201c      	movs	r0, #28
 80020d2:	f000 faa6 	bl	8002622 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	@ 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000

080020e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	@ (800217c <HAL_UART_MspInit+0x94>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d134      	bne.n	8002174 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b1c      	ldr	r3, [pc, #112]	@ (8002180 <HAL_UART_MspInit+0x98>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <HAL_UART_MspInit+0x98>)
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <HAL_UART_MspInit+0x98>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <HAL_UART_MspInit+0x98>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <HAL_UART_MspInit+0x98>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_UART_MspInit+0x98>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002142:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002154:	2307      	movs	r3, #7
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4809      	ldr	r0, [pc, #36]	@ (8002184 <HAL_UART_MspInit+0x9c>)
 8002160:	f000 fb0c 	bl	800277c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2025      	movs	r0, #37	@ 0x25
 800216a:	f000 fa3e 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800216e:	2025      	movs	r0, #37	@ 0x25
 8002170:	f000 fa57 	bl	8002622 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	@ 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40011000 	.word	0x40011000
 8002180:	40023800 	.word	0x40023800
 8002184:	40020000 	.word	0x40020000

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <NMI_Handler+0x4>

08002190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <MemManage_Handler+0x4>

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <UsageFault_Handler+0x4>

080021b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021de:	f000 f8e5 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <TIM2_IRQHandler+0x10>)
 80021ee:	f001 ff13 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200000d8 	.word	0x200000d8

080021fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <SPI1_IRQHandler+0x10>)
 8002202:	f001 fc67 	bl	8003ad4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000080 	.word	0x20000080

08002210 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002214:	4802      	ldr	r0, [pc, #8]	@ (8002220 <USART1_IRQHandler+0x10>)
 8002216:	f002 fdf1 	bl	8004dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000120 	.word	0x20000120

08002224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800222c:	4a14      	ldr	r2, [pc, #80]	@ (8002280 <_sbrk+0x5c>)
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <_sbrk+0x60>)
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002240:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <_sbrk+0x64>)
 8002242:	4a12      	ldr	r2, [pc, #72]	@ (800228c <_sbrk+0x68>)
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <_sbrk+0x64>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	d207      	bcs.n	8002264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002254:	f003 fd5c 	bl	8005d10 <__errno>
 8002258:	4603      	mov	r3, r0
 800225a:	220c      	movs	r2, #12
 800225c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	e009      	b.n	8002278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002264:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <_sbrk+0x64>)
 8002274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002276:	68fb      	ldr	r3, [r7, #12]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20030000 	.word	0x20030000
 8002284:	00000400 	.word	0x00000400
 8002288:	20000228 	.word	0x20000228
 800228c:	20000378 	.word	0x20000378

08002290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <SystemInit+0x20>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	4a05      	ldr	r2, [pc, #20]	@ (80022b0 <SystemInit+0x20>)
 800229c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022b8:	f7ff ffea 	bl	8002290 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022be:	490d      	ldr	r1, [pc, #52]	@ (80022f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022c0:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002300 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022e2:	f003 fd1b 	bl	8005d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e6:	f7fe fead 	bl	8001044 <main>
  bx  lr    
 80022ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80022f8:	08006dd4 	.word	0x08006dd4
  ldr r2, =_sbss
 80022fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002300:	20000378 	.word	0x20000378

08002304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002304:	e7fe      	b.n	8002304 <ADC_IRQHandler>
	...

08002308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800230c:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <HAL_Init+0x40>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002316:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_Init+0x40>)
 800231e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002322:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_Init+0x40>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_Init+0x40>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f000 f94f 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	200f      	movs	r0, #15
 8002338:	f000 f808 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fe0e 	bl	8001f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023c00 	.word	0x40023c00

0800234c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_InitTick+0x54>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_InitTick+0x58>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	fbb2 f3f3 	udiv	r3, r2, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f967 	bl	800263e <HAL_SYSTICK_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e00e      	b.n	8002398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0f      	cmp	r3, #15
 800237e:	d80a      	bhi.n	8002396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002380:	2200      	movs	r2, #0
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f000 f92f 	bl	80025ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800238c:	4a06      	ldr	r2, [pc, #24]	@ (80023a8 <HAL_InitTick+0x5c>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000004 	.word	0x20000004
 80023a4:	2000000c 	.word	0x2000000c
 80023a8:	20000008 	.word	0x20000008

080023ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	2000000c 	.word	0x2000000c
 80023d0:	2000022c 	.word	0x2000022c

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	@ (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000022c 	.word	0x2000022c

080023ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff ffee 	bl	80023d4 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d005      	beq.n	8002412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_Delay+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002412:	bf00      	nop
 8002414:	f7ff ffde 	bl	80023d4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d8f7      	bhi.n	8002414 <HAL_Delay+0x28>
  {
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000000c 	.word	0x2000000c

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	@ (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff3e 	bl	800247c <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff8e 	bl	8002528 <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5d 	bl	80024d4 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff31 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff feb6 	bl	80023d4 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d008      	beq.n	8002688 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e052      	b.n	800272e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0216 	bic.w	r2, r2, #22
 8002696:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_DMA_Abort+0x62>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0208 	bic.w	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d8:	e013      	b.n	8002702 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026da:	f7ff fe7b 	bl	80023d4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d90c      	bls.n	8002702 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e015      	b.n	800272e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e4      	bne.n	80026da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	223f      	movs	r2, #63	@ 0x3f
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	@ 0x80
 800274e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e00c      	b.n	800276e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2205      	movs	r2, #5
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e177      	b.n	8002a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8166 	bne.w	8002a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80c0 	beq.w	8002a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <HAL_GPIO_Init+0x324>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a65      	ldr	r2, [pc, #404]	@ (8002aa0 <HAL_GPIO_Init+0x324>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b63      	ldr	r3, [pc, #396]	@ (8002aa0 <HAL_GPIO_Init+0x324>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a61      	ldr	r2, [pc, #388]	@ (8002aa4 <HAL_GPIO_Init+0x328>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	@ (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d037      	beq.n	80029ba <HAL_GPIO_Init+0x23e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a57      	ldr	r2, [pc, #348]	@ (8002aac <HAL_GPIO_Init+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_GPIO_Init+0x23a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a56      	ldr	r2, [pc, #344]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x236>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a55      	ldr	r2, [pc, #340]	@ (8002ab4 <HAL_GPIO_Init+0x338>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x232>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a54      	ldr	r2, [pc, #336]	@ (8002ab8 <HAL_GPIO_Init+0x33c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a53      	ldr	r2, [pc, #332]	@ (8002abc <HAL_GPIO_Init+0x340>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x22a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	@ (8002ac0 <HAL_GPIO_Init+0x344>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	@ (8002ac4 <HAL_GPIO_Init+0x348>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	@ (8002ac8 <HAL_GPIO_Init+0x34c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	@ (8002acc <HAL_GPIO_Init+0x350>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x21a>
 8002992:	2309      	movs	r3, #9
 8002994:	e012      	b.n	80029bc <HAL_GPIO_Init+0x240>
 8002996:	230a      	movs	r3, #10
 8002998:	e010      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299a:	2308      	movs	r3, #8
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	@ (8002aa4 <HAL_GPIO_Init+0x328>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a34      	ldr	r2, [pc, #208]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae84 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022400 	.word	0x40022400
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e001      	b.n	8002af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e267      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d075      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b56:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d00c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b85      	ldr	r3, [pc, #532]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d112      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6e:	4b82      	ldr	r3, [pc, #520]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b7a:	d10b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05b      	beq.n	8002c40 <HAL_RCC_OscConfig+0x108>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d157      	bne.n	8002c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e242      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b9c:	d106      	bne.n	8002bac <HAL_RCC_OscConfig+0x74>
 8002b9e:	4b76      	ldr	r3, [pc, #472]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a75      	ldr	r2, [pc, #468]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b70      	ldr	r3, [pc, #448]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6f      	ldr	r2, [pc, #444]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xb0>
 8002bd0:	4b69      	ldr	r3, [pc, #420]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a68      	ldr	r2, [pc, #416]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b66      	ldr	r3, [pc, #408]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a65      	ldr	r2, [pc, #404]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fbf0 	bl	80023d4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff fbec 	bl	80023d4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e207      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff fbdc 	bl	80023d4 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff fbd8 	bl	80023d4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1f3      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b51      	ldr	r3, [pc, #324]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0xe8>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d063      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b47      	ldr	r3, [pc, #284]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1c7      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4937      	ldr	r1, [pc, #220]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e03a      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b34      	ldr	r3, [pc, #208]	@ (8002d7c <HAL_RCC_OscConfig+0x244>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cae:	f7ff fb91 	bl	80023d4 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb6:	f7ff fb8d 	bl	80023d4 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1a8      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4925      	ldr	r1, [pc, #148]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]
 8002ce8:	e015      	b.n	8002d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <HAL_RCC_OscConfig+0x244>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fb70 	bl	80023d4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7ff fb6c 	bl	80023d4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e187      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d036      	beq.n	8002d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <HAL_RCC_OscConfig+0x248>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7ff fb50 	bl	80023d4 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d38:	f7ff fb4c 	bl	80023d4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e167      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x200>
 8002d56:	e01b      	b.n	8002d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d58:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <HAL_RCC_OscConfig+0x248>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7ff fb39 	bl	80023d4 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	e00e      	b.n	8002d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7ff fb35 	bl	80023d4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d907      	bls.n	8002d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e150      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470000 	.word	0x42470000
 8002d80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d84:	4b88      	ldr	r3, [pc, #544]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ea      	bne.n	8002d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8097 	beq.w	8002ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002da2:	4b81      	ldr	r3, [pc, #516]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	4b7d      	ldr	r3, [pc, #500]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a7c      	ldr	r2, [pc, #496]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b77      	ldr	r3, [pc, #476]	@ (8002fac <HAL_RCC_OscConfig+0x474>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dda:	4b74      	ldr	r3, [pc, #464]	@ (8002fac <HAL_RCC_OscConfig+0x474>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a73      	ldr	r2, [pc, #460]	@ (8002fac <HAL_RCC_OscConfig+0x474>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff faf5 	bl	80023d4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7ff faf1 	bl	80023d4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e10c      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	4b6a      	ldr	r3, [pc, #424]	@ (8002fac <HAL_RCC_OscConfig+0x474>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x2ea>
 8002e14:	4b64      	ldr	r3, [pc, #400]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e18:	4a63      	ldr	r2, [pc, #396]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e20:	e01c      	b.n	8002e5c <HAL_RCC_OscConfig+0x324>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x30c>
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e36:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0x324>
 8002e44:	4b58      	ldr	r3, [pc, #352]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	4a57      	ldr	r2, [pc, #348]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e50:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e54:	4a54      	ldr	r2, [pc, #336]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7ff fab6 	bl	80023d4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7ff fab2 	bl	80023d4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0cb      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e82:	4b49      	ldr	r3, [pc, #292]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0ee      	beq.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7ff faa0 	bl	80023d4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7ff fa9c 	bl	80023d4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e0b5      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eae:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec0:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	4a38      	ldr	r2, [pc, #224]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a1 	beq.w	8003018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed6:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d05c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d141      	bne.n	8002f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eea:	4b31      	ldr	r3, [pc, #196]	@ (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fa70 	bl	80023d4 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7ff fa6c 	bl	80023d4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e087      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69da      	ldr	r2, [r3, #28]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	491b      	ldr	r1, [pc, #108]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7ff fa45 	bl	80023d4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7ff fa41 	bl	80023d4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e05c      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x416>
 8002f6c:	e054      	b.n	8003018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_RCC_OscConfig+0x478>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7ff fa2e 	bl	80023d4 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7ff fa2a 	bl	80023d4 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e045      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_RCC_OscConfig+0x470>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
 8002f9a:	e03d      	b.n	8003018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e038      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <HAL_RCC_OscConfig+0x4ec>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d028      	beq.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d121      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d111      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d107      	bne.n	8003014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0cc      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800303c:	4b68      	ldr	r3, [pc, #416]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d90c      	bls.n	8003064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b65      	ldr	r3, [pc, #404]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b63      	ldr	r3, [pc, #396]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b8      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b59      	ldr	r3, [pc, #356]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a58      	ldr	r2, [pc, #352]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b53      	ldr	r3, [pc, #332]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a52      	ldr	r2, [pc, #328]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800309e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b50      	ldr	r3, [pc, #320]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494d      	ldr	r1, [pc, #308]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d044      	beq.n	8003148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d119      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e067      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003106:	4b37      	ldr	r3, [pc, #220]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 0203 	bic.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4934      	ldr	r1, [pc, #208]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003118:	f7ff f95c 	bl	80023d4 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	e00a      	b.n	8003136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7ff f958 	bl	80023d4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e04f      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 020c 	and.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	429a      	cmp	r2, r3
 8003146:	d1eb      	bne.n	8003120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003148:	4b25      	ldr	r3, [pc, #148]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d20c      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b20      	ldr	r3, [pc, #128]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e032      	b.n	80031d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4916      	ldr	r1, [pc, #88]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319a:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490e      	ldr	r1, [pc, #56]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f821 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	490a      	ldr	r1, [pc, #40]	@ (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a09      	ldr	r2, [pc, #36]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f8bc 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	08006d78 	.word	0x08006d78
 80031ec:	20000004 	.word	0x20000004
 80031f0:	20000008 	.word	0x20000008

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b090      	sub	sp, #64	@ 0x40
 80031fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320c:	4b59      	ldr	r3, [pc, #356]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x180>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d00d      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x40>
 8003218:	2b08      	cmp	r3, #8
 800321a:	f200 80a1 	bhi.w	8003360 <HAL_RCC_GetSysClockFreq+0x16c>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0x34>
 8003222:	2b04      	cmp	r3, #4
 8003224:	d003      	beq.n	800322e <HAL_RCC_GetSysClockFreq+0x3a>
 8003226:	e09b      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003228:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x184>)
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800322c:	e09b      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322e:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_RCC_GetSysClockFreq+0x188>)
 8003230:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003232:	e098      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003234:	4b4f      	ldr	r3, [pc, #316]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x180>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800323c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323e:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x180>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d028      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x180>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	2200      	movs	r2, #0
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	627a      	str	r2, [r7, #36]	@ 0x24
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800325c:	2100      	movs	r1, #0
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_RCC_GetSysClockFreq+0x188>)
 8003260:	fb03 f201 	mul.w	r2, r3, r1
 8003264:	2300      	movs	r3, #0
 8003266:	fb00 f303 	mul.w	r3, r0, r3
 800326a:	4413      	add	r3, r2
 800326c:	4a43      	ldr	r2, [pc, #268]	@ (800337c <HAL_RCC_GetSysClockFreq+0x188>)
 800326e:	fba0 1202 	umull	r1, r2, r0, r2
 8003272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003274:	460a      	mov	r2, r1
 8003276:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800327a:	4413      	add	r3, r2
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800327e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003280:	2200      	movs	r2, #0
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	61fa      	str	r2, [r7, #28]
 8003286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800328e:	f7fd f9c3 	bl	8000618 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4613      	mov	r3, r2
 8003298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800329a:	e053      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329c:	4b35      	ldr	r3, [pc, #212]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x180>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	2200      	movs	r2, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	617a      	str	r2, [r7, #20]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032ae:	f04f 0b00 	mov.w	fp, #0
 80032b2:	4652      	mov	r2, sl
 80032b4:	465b      	mov	r3, fp
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	0159      	lsls	r1, r3, #5
 80032c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c4:	0150      	lsls	r0, r2, #5
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	ebb2 080a 	subs.w	r8, r2, sl
 80032ce:	eb63 090b 	sbc.w	r9, r3, fp
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032e6:	ebb2 0408 	subs.w	r4, r2, r8
 80032ea:	eb63 0509 	sbc.w	r5, r3, r9
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	00eb      	lsls	r3, r5, #3
 80032f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fc:	00e2      	lsls	r2, r4, #3
 80032fe:	4614      	mov	r4, r2
 8003300:	461d      	mov	r5, r3
 8003302:	eb14 030a 	adds.w	r3, r4, sl
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	eb45 030b 	adc.w	r3, r5, fp
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800331a:	4629      	mov	r1, r5
 800331c:	028b      	lsls	r3, r1, #10
 800331e:	4621      	mov	r1, r4
 8003320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003324:	4621      	mov	r1, r4
 8003326:	028a      	lsls	r2, r1, #10
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	2200      	movs	r2, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	60fa      	str	r2, [r7, #12]
 8003334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003338:	f7fd f96e 	bl	8000618 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4613      	mov	r3, r2
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003344:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	3301      	adds	r3, #1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003354:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800335e:	e002      	b.n	8003366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_RCC_GetSysClockFreq+0x184>)
 8003362:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003368:	4618      	mov	r0, r3
 800336a:	3740      	adds	r7, #64	@ 0x40
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	00f42400 	.word	0x00f42400
 800337c:	017d7840 	.word	0x017d7840

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800339c:	f7ff fff0 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0a9b      	lsrs	r3, r3, #10
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	08006d88 	.word	0x08006d88

080033c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c4:	f7ff ffdc 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0b5b      	lsrs	r3, r3, #13
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	@ (80033e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08006d88 	.word	0x08006d88

080033e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07b      	b.n	80034f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800340a:	d009      	beq.n	8003420 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
 8003412:	e005      	b.n	8003420 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe fdb6 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003456:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a4:	ea42 0103 	orr.w	r1, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	f003 0104 	and.w	r1, r3, #4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	f003 0210 	and.w	r2, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b088      	sub	sp, #32
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800350a:	f7fe ff63 	bl	80023d4 <HAL_GetTick>
 800350e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003520:	2302      	movs	r3, #2
 8003522:	e12a      	b.n	800377a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_SPI_Transmit+0x36>
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e122      	b.n	800377a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Transmit+0x48>
 800353e:	2302      	movs	r3, #2
 8003540:	e11b      	b.n	800377a <HAL_SPI_Transmit+0x280>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2203      	movs	r2, #3
 800354e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003590:	d10f      	bne.n	80035b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b40      	cmp	r3, #64	@ 0x40
 80035be:	d007      	beq.n	80035d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d8:	d152      	bne.n	8003680 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0xee>
 80035e2:	8b7b      	ldrh	r3, [r7, #26]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d145      	bne.n	8003674 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800360c:	e032      	b.n	8003674 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d112      	bne.n	8003642 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	881a      	ldrh	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003640:	e018      	b.n	8003674 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003642:	f7fe fec7 	bl	80023d4 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d803      	bhi.n	800365a <HAL_SPI_Transmit+0x160>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Transmit+0x166>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e082      	b.n	800377a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1c7      	bne.n	800360e <HAL_SPI_Transmit+0x114>
 800367e:	e053      	b.n	8003728 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_Transmit+0x194>
 8003688:	8b7b      	ldrh	r3, [r7, #26]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d147      	bne.n	800371e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036b4:	e033      	b.n	800371e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d113      	bne.n	80036ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	7812      	ldrb	r2, [r2, #0]
 80036d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036ea:	e018      	b.n	800371e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ec:	f7fe fe72 	bl	80023d4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d803      	bhi.n	8003704 <HAL_SPI_Transmit+0x20a>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d102      	bne.n	800370a <HAL_SPI_Transmit+0x210>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e02d      	b.n	800377a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1c6      	bne.n	80036b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	6839      	ldr	r1, [r7, #0]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fb77 	bl	8003e20 <SPI_EndRxTxTransaction>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003778:	2300      	movs	r3, #0
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b08a      	sub	sp, #40	@ 0x28
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003790:	2301      	movs	r3, #1
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003794:	f7fe fe1e 	bl	80023d4 <HAL_GetTick>
 8003798:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d00c      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x4a>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037b8:	d106      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x46>
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d001      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	e17f      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_SPI_TransmitReceive+0x5c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_SPI_TransmitReceive+0x5c>
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e174      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x6e>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e16d      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b04      	cmp	r3, #4
 8003802:	d003      	beq.n	800380c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2205      	movs	r2, #5
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	887a      	ldrh	r2, [r7, #2]
 8003822:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	887a      	ldrh	r2, [r7, #2]
 800382e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b40      	cmp	r3, #64	@ 0x40
 800384e:	d007      	beq.n	8003860 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003868:	d17e      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_SPI_TransmitReceive+0xf6>
 8003872:	8afb      	ldrh	r3, [r7, #22]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d16c      	bne.n	8003952 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800389c:	e059      	b.n	8003952 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d11b      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x162>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0x162>
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d113      	bne.n	80038e4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	881a      	ldrh	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	1c9a      	adds	r2, r3, #2
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d119      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x1a4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d014      	beq.n	8003926 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003922:	2301      	movs	r3, #1
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003926:	f7fe fd55 	bl	80023d4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003932:	429a      	cmp	r2, r3
 8003934:	d80d      	bhi.n	8003952 <HAL_SPI_TransmitReceive+0x1d0>
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d009      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e0bc      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1a0      	bne.n	800389e <HAL_SPI_TransmitReceive+0x11c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d19b      	bne.n	800389e <HAL_SPI_TransmitReceive+0x11c>
 8003966:	e082      	b.n	8003a6e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x1f4>
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d171      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800399c:	e05d      	b.n	8003a5a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d11c      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x264>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d017      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0x264>
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d114      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d119      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x2a6>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d014      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a28:	f7fe fcd4 	bl	80023d4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d803      	bhi.n	8003a40 <HAL_SPI_TransmitReceive+0x2be>
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_TransmitReceive+0x2c4>
 8003a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e038      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d19c      	bne.n	800399e <HAL_SPI_TransmitReceive+0x21c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d197      	bne.n	800399e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f9d4 	bl	8003e20 <SPI_EndRxTxTransaction>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e01d      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003aca:	2300      	movs	r3, #0
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	@ 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
    return;
 8003b16:	e0d7      	b.n	8003cc8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_SPI_IRQHandler+0x66>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	09db      	lsrs	r3, r3, #7
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    return;
 8003b38:	e0c6      	b.n	8003cc8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10c      	bne.n	8003b60 <HAL_SPI_IRQHandler+0x8c>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80b4 	beq.w	8003cc8 <HAL_SPI_IRQHandler+0x1f4>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 80ad 	beq.w	8003cc8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d023      	beq.n	8003bc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d011      	beq.n	8003baa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	e00b      	b.n	8003bc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	693b      	ldr	r3, [r7, #16]
        return;
 8003bc0:	e082      	b.n	8003cc8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d014      	beq.n	8003bf8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	f043 0208 	orr.w	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d04f      	beq.n	8003cc6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_SPI_IRQHandler+0x17e>
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d034      	beq.n	8003cbc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0203 	bic.w	r2, r2, #3
 8003c60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d011      	beq.n	8003c8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <HAL_SPI_IRQHandler+0x1fc>)
 8003c70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fd5d 	bl	8002736 <HAL_DMA_Abort_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <HAL_SPI_IRQHandler+0x1fc>)
 8003c9c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fd47 	bl	8002736 <HAL_DMA_Abort_IT>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003cba:	e003      	b.n	8003cc4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f809 	bl	8003cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003cc2:	e000      	b.n	8003cc6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003cc4:	bf00      	nop
    return;
 8003cc6:	bf00      	nop
  }
}
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003ce9 	.word	0x08003ce9

08003cd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff ffe6 	bl	8003cd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d20:	f7fe fb58 	bl	80023d4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d30:	f7fe fb50 	bl	80023d4 <HAL_GetTick>
 8003d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d36:	4b39      	ldr	r3, [pc, #228]	@ (8003e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	015b      	lsls	r3, r3, #5
 8003d3c:	0d1b      	lsrs	r3, r3, #20
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d46:	e055      	b.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d051      	beq.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d50:	f7fe fb40 	bl	80023d4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d902      	bls.n	8003d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d13d      	bne.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d7e:	d111      	bne.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d88:	d004      	beq.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d92:	d107      	bne.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dac:	d10f      	bne.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e018      	b.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e002      	b.n	8003df4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d19a      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3720      	adds	r7, #32
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000004 	.word	0x20000004

08003e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2201      	movs	r2, #1
 8003e34:	2102      	movs	r1, #2
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff ff6a 	bl	8003d10 <SPI_WaitFlagStateUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e032      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <SPI_EndRxTxTransaction+0xa0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <SPI_EndRxTxTransaction+0xa4>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	0d5b      	lsrs	r3, r3, #21
 8003e5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e70:	d112      	bne.n	8003e98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2180      	movs	r1, #128	@ 0x80
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ff47 	bl	8003d10 <SPI_WaitFlagStateUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d016      	beq.n	8003eb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e00f      	b.n	8003eb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b80      	cmp	r3, #128	@ 0x80
 8003eb0:	d0f2      	beq.n	8003e98 <SPI_EndRxTxTransaction+0x78>
 8003eb2:	e000      	b.n	8003eb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003eb4:	bf00      	nop
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000004 	.word	0x20000004
 8003ec4:	165e9f81 	.word	0x165e9f81

08003ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e041      	b.n	8003f5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe f8ac 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3304      	adds	r3, #4
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f000 fb0c 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e041      	b.n	8003ffc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f839 	bl	8004004 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 fabd 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0202 	mvn.w	r2, #2
 800404c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa3f 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa31 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fa42 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa19 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa0b 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa1c 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f9f3 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9e5 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f9f6 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d020      	beq.n	8004160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0210 	mvn.w	r2, #16
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2208      	movs	r2, #8
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9cd 	bl	80044e6 <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9bf 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f9d0 	bl	80044fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0201 	mvn.w	r2, #1
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f99d 	bl	80044be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fcae 	bl	8004b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00c      	beq.n	80041cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9a1 	bl	800450e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0220 	mvn.w	r2, #32
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fc80 	bl	8004af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004212:	2302      	movs	r3, #2
 8004214:	e088      	b.n	8004328 <HAL_TIM_IC_ConfigChannel+0x130>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004234:	f000 fa1c 	bl	8004670 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 020c 	bic.w	r2, r2, #12
 8004246:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6999      	ldr	r1, [r3, #24]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	619a      	str	r2, [r3, #24]
 800425a:	e060      	b.n	800431e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d11c      	bne.n	800429c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004272:	f000 faa0 	bl	80047b6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004284:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6999      	ldr	r1, [r3, #24]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	619a      	str	r2, [r3, #24]
 800429a:	e040      	b.n	800431e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11b      	bne.n	80042da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80042b2:	f000 faed 	bl	8004890 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 020c 	bic.w	r2, r2, #12
 80042c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	61da      	str	r2, [r3, #28]
 80042d8:	e021      	b.n	800431e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d11c      	bne.n	800431a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042f0:	f000 fb0a 	bl	8004908 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004302:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69d9      	ldr	r1, [r3, #28]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	021a      	lsls	r2, r3, #8
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
 8004318:	e001      	b.n	800431e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIM_ConfigClockSource+0x1c>
 8004348:	2302      	movs	r3, #2
 800434a:	e0b4      	b.n	80044b6 <HAL_TIM_ConfigClockSource+0x186>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800436a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004384:	d03e      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0xd4>
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438a:	f200 8087 	bhi.w	800449c <HAL_TIM_ConfigClockSource+0x16c>
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	f000 8086 	beq.w	80044a2 <HAL_TIM_ConfigClockSource+0x172>
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439a:	d87f      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b70      	cmp	r3, #112	@ 0x70
 800439e:	d01a      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0xa6>
 80043a0:	2b70      	cmp	r3, #112	@ 0x70
 80043a2:	d87b      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b60      	cmp	r3, #96	@ 0x60
 80043a6:	d050      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x11a>
 80043a8:	2b60      	cmp	r3, #96	@ 0x60
 80043aa:	d877      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 80043ac:	2b50      	cmp	r3, #80	@ 0x50
 80043ae:	d03c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xfa>
 80043b0:	2b50      	cmp	r3, #80	@ 0x50
 80043b2:	d873      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 80043b4:	2b40      	cmp	r3, #64	@ 0x40
 80043b6:	d058      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x13a>
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d86f      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 80043bc:	2b30      	cmp	r3, #48	@ 0x30
 80043be:	d064      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15a>
 80043c0:	2b30      	cmp	r3, #48	@ 0x30
 80043c2:	d86b      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d060      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15a>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d867      	bhi.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d05c      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15a>
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d05a      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	e062      	b.n	800449c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043e6:	f000 fae7 	bl	80049b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	609a      	str	r2, [r3, #8]
      break;
 8004402:	e04f      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004414:	f000 fad0 	bl	80049b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004426:	609a      	str	r2, [r3, #8]
      break;
 8004428:	e03c      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	461a      	mov	r2, r3
 8004438:	f000 f98e 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2150      	movs	r1, #80	@ 0x50
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa9d 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 8004448:	e02c      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004456:	461a      	mov	r2, r3
 8004458:	f000 f9ea 	bl	8004830 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2160      	movs	r1, #96	@ 0x60
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa8d 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 8004468:	e01c      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	461a      	mov	r2, r3
 8004478:	f000 f96e 	bl	8004758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2140      	movs	r1, #64	@ 0x40
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa7d 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 8004488:	e00c      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f000 fa74 	bl	8004982 <TIM_ITRx_SetConfig>
      break;
 800449a:	e003      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      break;
 80044a0:	e000      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a43      	ldr	r2, [pc, #268]	@ (8004644 <TIM_Base_SetConfig+0x120>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d00f      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a40      	ldr	r2, [pc, #256]	@ (8004648 <TIM_Base_SetConfig+0x124>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00b      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3f      	ldr	r2, [pc, #252]	@ (800464c <TIM_Base_SetConfig+0x128>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3e      	ldr	r2, [pc, #248]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3d      	ldr	r2, [pc, #244]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a32      	ldr	r2, [pc, #200]	@ (8004644 <TIM_Base_SetConfig+0x120>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004584:	d027      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2f      	ldr	r2, [pc, #188]	@ (8004648 <TIM_Base_SetConfig+0x124>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d023      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2e      	ldr	r2, [pc, #184]	@ (800464c <TIM_Base_SetConfig+0x128>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01f      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2d      	ldr	r2, [pc, #180]	@ (8004650 <TIM_Base_SetConfig+0x12c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d017      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004658 <TIM_Base_SetConfig+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d013      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	@ (800465c <TIM_Base_SetConfig+0x138>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00f      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a29      	ldr	r2, [pc, #164]	@ (8004660 <TIM_Base_SetConfig+0x13c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a28      	ldr	r2, [pc, #160]	@ (8004664 <TIM_Base_SetConfig+0x140>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d007      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a27      	ldr	r2, [pc, #156]	@ (8004668 <TIM_Base_SetConfig+0x144>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a26      	ldr	r2, [pc, #152]	@ (800466c <TIM_Base_SetConfig+0x148>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d108      	bne.n	80045e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a0e      	ldr	r2, [pc, #56]	@ (8004644 <TIM_Base_SetConfig+0x120>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d003      	beq.n	8004616 <TIM_Base_SetConfig+0xf2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a10      	ldr	r2, [pc, #64]	@ (8004654 <TIM_Base_SetConfig+0x130>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d103      	bne.n	800461e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f043 0204 	orr.w	r2, r3, #4
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40001800 	.word	0x40001800
 8004668:	40001c00 	.word	0x40001c00
 800466c:	40002000 	.word	0x40002000

08004670 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 0201 	bic.w	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a28      	ldr	r2, [pc, #160]	@ (800473c <TIM_TI1_SetConfig+0xcc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01b      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a4:	d017      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a25      	ldr	r2, [pc, #148]	@ (8004740 <TIM_TI1_SetConfig+0xd0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a24      	ldr	r2, [pc, #144]	@ (8004744 <TIM_TI1_SetConfig+0xd4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00f      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <TIM_TI1_SetConfig+0xd8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00b      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a22      	ldr	r2, [pc, #136]	@ (800474c <TIM_TI1_SetConfig+0xdc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a21      	ldr	r2, [pc, #132]	@ (8004750 <TIM_TI1_SetConfig+0xe0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_TI1_SetConfig+0x66>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a20      	ldr	r2, [pc, #128]	@ (8004754 <TIM_TI1_SetConfig+0xe4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <TIM_TI1_SetConfig+0x6a>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <TIM_TI1_SetConfig+0x6c>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e003      	b.n	80046fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	b2db      	uxtb	r3, r3
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f023 030a 	bic.w	r3, r3, #10
 8004714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f003 030a 	and.w	r3, r3, #10
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40010400 	.word	0x40010400
 8004750:	40014000 	.word	0x40014000
 8004754:	40001800 	.word	0x40001800

08004758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 030a 	bic.w	r3, r3, #10
 8004794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b087      	sub	sp, #28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0210 	bic.w	r2, r3, #16
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	031b      	lsls	r3, r3, #12
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	621a      	str	r2, [r3, #32]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0210 	bic.w	r2, r3, #16
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800485a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	031b      	lsls	r3, r3, #12
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800486c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	621a      	str	r2, [r3, #32]
}
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f023 0303 	bic.w	r3, r3, #3
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	621a      	str	r2, [r3, #32]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004934:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	031b      	lsls	r3, r3, #12
 800494c:	b29b      	uxth	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800495a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	031b      	lsls	r3, r3, #12
 8004960:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	f043 0307 	orr.w	r3, r3, #7
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	021a      	lsls	r2, r3, #8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	431a      	orrs	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4313      	orrs	r3, r2
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e05a      	b.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5c:	d01d      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a18      	ldr	r2, [pc, #96]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a15      	ldr	r2, [pc, #84]	@ (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10c      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40010400 	.word	0x40010400
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40001800 	.word	0x40001800

08004af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e042      	b.n	8004bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd fad2 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	@ 0x24
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fe15 	bl	800578c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	@ 0x28
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d175      	bne.n	8004cc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_UART_Transmit+0x2c>
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e06e      	b.n	8004cc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2221      	movs	r2, #33	@ 0x21
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf6:	f7fd fbed 	bl	80023d4 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	88fa      	ldrh	r2, [r7, #6]
 8004c00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c10:	d108      	bne.n	8004c24 <HAL_UART_Transmit+0x6c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d104      	bne.n	8004c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e003      	b.n	8004c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c2c:	e02e      	b.n	8004c8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fbb3 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e03a      	b.n	8004cc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]
 8004c6c:	e007      	b.n	8004c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	781a      	ldrb	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cb      	bne.n	8004c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2140      	movs	r1, #64	@ 0x40
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fb7f 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e006      	b.n	8004cc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e000      	b.n	8004cc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b08a      	sub	sp, #40	@ 0x28
 8004cd2:	af02      	add	r7, sp, #8
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	f040 8081 	bne.w	8004df2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_UART_Receive+0x2e>
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e079      	b.n	8004df4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2222      	movs	r2, #34	@ 0x22
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d14:	f7fd fb5e 	bl	80023d4 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	88fa      	ldrh	r2, [r7, #6]
 8004d1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2e:	d108      	bne.n	8004d42 <HAL_UART_Receive+0x74>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e003      	b.n	8004d4a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d4a:	e047      	b.n	8004ddc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	2120      	movs	r1, #32
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fb24 	bl	80053a4 <UART_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e042      	b.n	8004df4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	e01f      	b.n	8004dce <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d96:	d007      	beq.n	8004da8 <HAL_UART_Receive+0xda>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <HAL_UART_Receive+0xe8>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e008      	b.n	8004dc8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1b2      	bne.n	8004d4c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e000      	b.n	8004df4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3720      	adds	r7, #32
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b0ba      	sub	sp, #232	@ 0xe8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10f      	bne.n	8004e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x66>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fbd7 	bl	800560e <UART_Receive_IT>
      return;
 8004e60:	e273      	b.n	800534a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80de 	beq.w	8005028 <HAL_UART_IRQHandler+0x22c>
 8004e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80d1 	beq.w	8005028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_UART_IRQHandler+0xae>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_UART_IRQHandler+0xd2>
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	f043 0202 	orr.w	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xf6>
 8004eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <HAL_UART_IRQHandler+0x126>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 820a 	beq.w	8005340 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_UART_IRQHandler+0x14e>
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb62 	bl	800560e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <HAL_UART_IRQHandler+0x17a>
 8004f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d04f      	beq.n	8005016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 fa6d 	bl	8005456 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f86:	2b40      	cmp	r3, #64	@ 0x40
 8004f88:	d141      	bne.n	800500e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1d9      	bne.n	8004f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d013      	beq.n	8005006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe2:	4a8a      	ldr	r2, [pc, #552]	@ (800520c <HAL_UART_IRQHandler+0x410>)
 8004fe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd fba3 	bl	8002736 <HAL_DMA_Abort_IT>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005000:	4610      	mov	r0, r2
 8005002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005004:	e00e      	b.n	8005024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f9b6 	bl	8005378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	e00a      	b.n	8005024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9b2 	bl	8005378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e006      	b.n	8005024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9ae 	bl	8005378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005022:	e18d      	b.n	8005340 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	bf00      	nop
    return;
 8005026:	e18b      	b.n	8005340 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	2b01      	cmp	r3, #1
 800502e:	f040 8167 	bne.w	8005300 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8160 	beq.w	8005300 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8159 	beq.w	8005300 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506e:	2b40      	cmp	r3, #64	@ 0x40
 8005070:	f040 80ce 	bne.w	8005210 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80a9 	beq.w	80051dc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800508e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005092:	429a      	cmp	r2, r3
 8005094:	f080 80a2 	bcs.w	80051dc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800509e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050aa:	f000 8088 	beq.w	80051be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1d9      	bne.n	80050ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800510a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3314      	adds	r3, #20
 800511a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800511e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e1      	bne.n	80050fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3314      	adds	r3, #20
 800513c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3314      	adds	r3, #20
 8005156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800515a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800515c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e3      	bne.n	8005136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800518c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800518e:	f023 0310 	bic.w	r3, r3, #16
 8005192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e3      	bne.n	800517c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fd fa4c 	bl	8002656 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8d9 	bl	800538c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051da:	e0b3      	b.n	8005344 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051e4:	429a      	cmp	r2, r3
 80051e6:	f040 80ad 	bne.w	8005344 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f4:	f040 80a6 	bne.w	8005344 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8c1 	bl	800538c <HAL_UARTEx_RxEventCallback>
      return;
 800520a:	e09b      	b.n	8005344 <HAL_UART_IRQHandler+0x548>
 800520c:	0800551d 	.word	0x0800551d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005218:	b29b      	uxth	r3, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 808e 	beq.w	8005348 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800522c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8089 	beq.w	8005348 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800524c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800525a:	647a      	str	r2, [r7, #68]	@ 0x44
 800525c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e3      	bne.n	8005236 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3314      	adds	r3, #20
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	623b      	str	r3, [r7, #32]
   return(result);
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005292:	633a      	str	r2, [r7, #48]	@ 0x30
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052d8:	61fa      	str	r2, [r7, #28]
 80052da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	69b9      	ldr	r1, [r7, #24]
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	617b      	str	r3, [r7, #20]
   return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e3      	bne.n	80052b4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f847 	bl	800538c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052fe:	e023      	b.n	8005348 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <HAL_UART_IRQHandler+0x524>
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f910 	bl	800553e <UART_Transmit_IT>
    return;
 800531e:	e014      	b.n	800534a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <HAL_UART_IRQHandler+0x54e>
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f950 	bl	80055de <UART_EndTransmit_IT>
    return;
 800533e:	e004      	b.n	800534a <HAL_UART_IRQHandler+0x54e>
    return;
 8005340:	bf00      	nop
 8005342:	e002      	b.n	800534a <HAL_UART_IRQHandler+0x54e>
      return;
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <HAL_UART_IRQHandler+0x54e>
      return;
 8005348:	bf00      	nop
  }
}
 800534a:	37e8      	adds	r7, #232	@ 0xe8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b4:	e03b      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d037      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fd f809 	bl	80023d4 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e03a      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d023      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b80      	cmp	r3, #128	@ 0x80
 80053ea:	d020      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b40      	cmp	r3, #64	@ 0x40
 80053f0:	d01d      	beq.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d116      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f81d 	bl	8005456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2208      	movs	r2, #8
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e00f      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	429a      	cmp	r2, r3
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	429a      	cmp	r2, r3
 800544a:	d0b4      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005456:	b480      	push	{r7}
 8005458:	b095      	sub	sp, #84	@ 0x54
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800546e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005474:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800547e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005484:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3314      	adds	r3, #20
 80054b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d119      	bne.n	8005502 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ee:	61ba      	str	r2, [r7, #24]
 80054f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005510:	bf00      	nop
 8005512:	3754      	adds	r7, #84	@ 0x54
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff21 	bl	8005378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b21      	cmp	r3, #33	@ 0x21
 8005550:	d13e      	bne.n	80055d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800555a:	d114      	bne.n	8005586 <UART_Transmit_IT+0x48>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d110      	bne.n	8005586 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]
 8005584:	e008      	b.n	8005598 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6211      	str	r1, [r2, #32]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4619      	mov	r1, r3
 80055a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fea6 	bl	8005350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b08c      	sub	sp, #48	@ 0x30
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	@ 0x22
 8005628:	f040 80aa 	bne.w	8005780 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005634:	d115      	bne.n	8005662 <UART_Receive_IT+0x54>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d111      	bne.n	8005662 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	b29a      	uxth	r2, r3
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	1c9a      	adds	r2, r3, #2
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005660:	e024      	b.n	80056ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005670:	d007      	beq.n	8005682 <UART_Receive_IT+0x74>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <UART_Receive_IT+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e008      	b.n	80056a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800569c:	b2da      	uxtb	r2, r3
 800569e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4619      	mov	r1, r3
 80056ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d15d      	bne.n	800577c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0220 	bic.w	r2, r2, #32
 80056ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	2b01      	cmp	r3, #1
 8005704:	d135      	bne.n	8005772 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	613b      	str	r3, [r7, #16]
   return(result);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 0310 	bic.w	r3, r3, #16
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800572c:	623a      	str	r2, [r7, #32]
 800572e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	61bb      	str	r3, [r7, #24]
   return(result);
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e5      	bne.n	800570c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b10      	cmp	r3, #16
 800574c:	d10a      	bne.n	8005764 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fe0e 	bl	800538c <HAL_UARTEx_RxEventCallback>
 8005770:	e002      	b.n	8005778 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fdf6 	bl	8005364 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	e002      	b.n	8005782 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3730      	adds	r7, #48	@ 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b0c0      	sub	sp, #256	@ 0x100
 8005792:	af00      	add	r7, sp, #0
 8005794:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	68d9      	ldr	r1, [r3, #12]
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	ea40 0301 	orr.w	r3, r0, r1
 80057b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057e4:	f021 010c 	bic.w	r1, r1, #12
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057f2:	430b      	orrs	r3, r1
 80057f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005806:	6999      	ldr	r1, [r3, #24]
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	ea40 0301 	orr.w	r3, r0, r1
 8005812:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b8f      	ldr	r3, [pc, #572]	@ (8005a58 <UART_SetConfig+0x2cc>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d005      	beq.n	800582c <UART_SetConfig+0xa0>
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8d      	ldr	r3, [pc, #564]	@ (8005a5c <UART_SetConfig+0x2d0>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d104      	bne.n	8005836 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fd fdc8 	bl	80033c0 <HAL_RCC_GetPCLK2Freq>
 8005830:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005834:	e003      	b.n	800583e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005836:	f7fd fdaf 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 800583a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005848:	f040 810c 	bne.w	8005a64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005850:	2200      	movs	r2, #0
 8005852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005856:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800585a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800585e:	4622      	mov	r2, r4
 8005860:	462b      	mov	r3, r5
 8005862:	1891      	adds	r1, r2, r2
 8005864:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005866:	415b      	adcs	r3, r3
 8005868:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800586a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800586e:	4621      	mov	r1, r4
 8005870:	eb12 0801 	adds.w	r8, r2, r1
 8005874:	4629      	mov	r1, r5
 8005876:	eb43 0901 	adc.w	r9, r3, r1
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800588a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800588e:	4690      	mov	r8, r2
 8005890:	4699      	mov	r9, r3
 8005892:	4623      	mov	r3, r4
 8005894:	eb18 0303 	adds.w	r3, r8, r3
 8005898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800589c:	462b      	mov	r3, r5
 800589e:	eb49 0303 	adc.w	r3, r9, r3
 80058a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ba:	460b      	mov	r3, r1
 80058bc:	18db      	adds	r3, r3, r3
 80058be:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c0:	4613      	mov	r3, r2
 80058c2:	eb42 0303 	adc.w	r3, r2, r3
 80058c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058d0:	f7fa fea2 	bl	8000618 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4b61      	ldr	r3, [pc, #388]	@ (8005a60 <UART_SetConfig+0x2d4>)
 80058da:	fba3 2302 	umull	r2, r3, r3, r2
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	011c      	lsls	r4, r3, #4
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058fc:	415b      	adcs	r3, r3
 80058fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005900:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005904:	4641      	mov	r1, r8
 8005906:	eb12 0a01 	adds.w	sl, r2, r1
 800590a:	4649      	mov	r1, r9
 800590c:	eb43 0b01 	adc.w	fp, r3, r1
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800591c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005920:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005924:	4692      	mov	sl, r2
 8005926:	469b      	mov	fp, r3
 8005928:	4643      	mov	r3, r8
 800592a:	eb1a 0303 	adds.w	r3, sl, r3
 800592e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005932:	464b      	mov	r3, r9
 8005934:	eb4b 0303 	adc.w	r3, fp, r3
 8005938:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005948:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800594c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005950:	460b      	mov	r3, r1
 8005952:	18db      	adds	r3, r3, r3
 8005954:	643b      	str	r3, [r7, #64]	@ 0x40
 8005956:	4613      	mov	r3, r2
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	647b      	str	r3, [r7, #68]	@ 0x44
 800595e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005962:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005966:	f7fa fe57 	bl	8000618 <__aeabi_uldivmod>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4611      	mov	r1, r2
 8005970:	4b3b      	ldr	r3, [pc, #236]	@ (8005a60 <UART_SetConfig+0x2d4>)
 8005972:	fba3 2301 	umull	r2, r3, r3, r1
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2264      	movs	r2, #100	@ 0x64
 800597a:	fb02 f303 	mul.w	r3, r2, r3
 800597e:	1acb      	subs	r3, r1, r3
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005986:	4b36      	ldr	r3, [pc, #216]	@ (8005a60 <UART_SetConfig+0x2d4>)
 8005988:	fba3 2302 	umull	r2, r3, r3, r2
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005994:	441c      	add	r4, r3
 8005996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800599a:	2200      	movs	r2, #0
 800599c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80059a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80059a8:	4642      	mov	r2, r8
 80059aa:	464b      	mov	r3, r9
 80059ac:	1891      	adds	r1, r2, r2
 80059ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059b0:	415b      	adcs	r3, r3
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059b8:	4641      	mov	r1, r8
 80059ba:	1851      	adds	r1, r2, r1
 80059bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80059be:	4649      	mov	r1, r9
 80059c0:	414b      	adcs	r3, r1
 80059c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059d0:	4659      	mov	r1, fp
 80059d2:	00cb      	lsls	r3, r1, #3
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059da:	4651      	mov	r1, sl
 80059dc:	00ca      	lsls	r2, r1, #3
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	4642      	mov	r2, r8
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059ec:	464b      	mov	r3, r9
 80059ee:	460a      	mov	r2, r1
 80059f0:	eb42 0303 	adc.w	r3, r2, r3
 80059f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	18db      	adds	r3, r3, r3
 8005a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a12:	4613      	mov	r3, r2
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a22:	f7fa fdf9 	bl	8000618 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <UART_SetConfig+0x2d4>)
 8005a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	2164      	movs	r1, #100	@ 0x64
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	3332      	adds	r3, #50	@ 0x32
 8005a3e:	4a08      	ldr	r2, [pc, #32]	@ (8005a60 <UART_SetConfig+0x2d4>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f003 0207 	and.w	r2, r3, #7
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4422      	add	r2, r4
 8005a52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a54:	e106      	b.n	8005c64 <UART_SetConfig+0x4d8>
 8005a56:	bf00      	nop
 8005a58:	40011000 	.word	0x40011000
 8005a5c:	40011400 	.word	0x40011400
 8005a60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a76:	4642      	mov	r2, r8
 8005a78:	464b      	mov	r3, r9
 8005a7a:	1891      	adds	r1, r2, r2
 8005a7c:	6239      	str	r1, [r7, #32]
 8005a7e:	415b      	adcs	r3, r3
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a86:	4641      	mov	r1, r8
 8005a88:	1854      	adds	r4, r2, r1
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	eb43 0501 	adc.w	r5, r3, r1
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	00eb      	lsls	r3, r5, #3
 8005a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9e:	00e2      	lsls	r2, r4, #3
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aac:	464b      	mov	r3, r9
 8005aae:	eb45 0303 	adc.w	r3, r5, r3
 8005ab2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	008b      	lsls	r3, r1, #2
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005adc:	4621      	mov	r1, r4
 8005ade:	008a      	lsls	r2, r1, #2
 8005ae0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ae4:	f7fa fd98 	bl	8000618 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4b60      	ldr	r3, [pc, #384]	@ (8005c70 <UART_SetConfig+0x4e4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	011c      	lsls	r4, r3, #4
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	61b9      	str	r1, [r7, #24]
 8005b10:	415b      	adcs	r3, r3
 8005b12:	61fb      	str	r3, [r7, #28]
 8005b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b18:	4641      	mov	r1, r8
 8005b1a:	1851      	adds	r1, r2, r1
 8005b1c:	6139      	str	r1, [r7, #16]
 8005b1e:	4649      	mov	r1, r9
 8005b20:	414b      	adcs	r3, r1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b30:	4659      	mov	r1, fp
 8005b32:	00cb      	lsls	r3, r1, #3
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	00ca      	lsls	r2, r1, #3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	4642      	mov	r2, r8
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	460a      	mov	r2, r1
 8005b50:	eb42 0303 	adc.w	r3, r2, r3
 8005b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b70:	4649      	mov	r1, r9
 8005b72:	008b      	lsls	r3, r1, #2
 8005b74:	4641      	mov	r1, r8
 8005b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	008a      	lsls	r2, r1, #2
 8005b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b82:	f7fa fd49 	bl	8000618 <__aeabi_uldivmod>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	4b38      	ldr	r3, [pc, #224]	@ (8005c70 <UART_SetConfig+0x4e4>)
 8005b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	2264      	movs	r2, #100	@ 0x64
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	1acb      	subs	r3, r1, r3
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	3332      	adds	r3, #50	@ 0x32
 8005ba0:	4a33      	ldr	r2, [pc, #204]	@ (8005c70 <UART_SetConfig+0x4e4>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bac:	441c      	add	r4, r3
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	1891      	adds	r1, r2, r2
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	415b      	adcs	r3, r3
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bcc:	4641      	mov	r1, r8
 8005bce:	1851      	adds	r1, r2, r1
 8005bd0:	6039      	str	r1, [r7, #0]
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	414b      	adcs	r3, r1
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005be4:	4659      	mov	r1, fp
 8005be6:	00cb      	lsls	r3, r1, #3
 8005be8:	4651      	mov	r1, sl
 8005bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bee:	4651      	mov	r1, sl
 8005bf0:	00ca      	lsls	r2, r1, #3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bfe:	464b      	mov	r3, r9
 8005c00:	460a      	mov	r2, r1
 8005c02:	eb42 0303 	adc.w	r3, r2, r3
 8005c06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c12:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c20:	4649      	mov	r1, r9
 8005c22:	008b      	lsls	r3, r1, #2
 8005c24:	4641      	mov	r1, r8
 8005c26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	008a      	lsls	r2, r1, #2
 8005c2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c32:	f7fa fcf1 	bl	8000618 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <UART_SetConfig+0x4e4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	2164      	movs	r1, #100	@ 0x64
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	3332      	adds	r3, #50	@ 0x32
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <UART_SetConfig+0x4e4>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f003 020f 	and.w	r2, r3, #15
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4422      	add	r2, r4
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c70:	51eb851f 	.word	0x51eb851f

08005c74 <sniprintf>:
 8005c74:	b40c      	push	{r2, r3}
 8005c76:	b530      	push	{r4, r5, lr}
 8005c78:	4b18      	ldr	r3, [pc, #96]	@ (8005cdc <sniprintf+0x68>)
 8005c7a:	1e0c      	subs	r4, r1, #0
 8005c7c:	681d      	ldr	r5, [r3, #0]
 8005c7e:	b09d      	sub	sp, #116	@ 0x74
 8005c80:	da08      	bge.n	8005c94 <sniprintf+0x20>
 8005c82:	238b      	movs	r3, #139	@ 0x8b
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8a:	b01d      	add	sp, #116	@ 0x74
 8005c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c90:	b002      	add	sp, #8
 8005c92:	4770      	bx	lr
 8005c94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005c98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005ca2:	bf14      	ite	ne
 8005ca4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ca8:	4623      	moveq	r3, r4
 8005caa:	9304      	str	r3, [sp, #16]
 8005cac:	9307      	str	r3, [sp, #28]
 8005cae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cb2:	9002      	str	r0, [sp, #8]
 8005cb4:	9006      	str	r0, [sp, #24]
 8005cb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cbc:	ab21      	add	r3, sp, #132	@ 0x84
 8005cbe:	a902      	add	r1, sp, #8
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	f000 f9a4 	bl	8006010 <_svfiprintf_r>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	bfbc      	itt	lt
 8005ccc:	238b      	movlt	r3, #139	@ 0x8b
 8005cce:	602b      	strlt	r3, [r5, #0]
 8005cd0:	2c00      	cmp	r4, #0
 8005cd2:	d0da      	beq.n	8005c8a <sniprintf+0x16>
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e7d6      	b.n	8005c8a <sniprintf+0x16>
 8005cdc:	20000010 	.word	0x20000010

08005ce0 <memcmp>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	3901      	subs	r1, #1
 8005ce4:	4402      	add	r2, r0
 8005ce6:	4290      	cmp	r0, r2
 8005ce8:	d101      	bne.n	8005cee <memcmp+0xe>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e005      	b.n	8005cfa <memcmp+0x1a>
 8005cee:	7803      	ldrb	r3, [r0, #0]
 8005cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d001      	beq.n	8005cfc <memcmp+0x1c>
 8005cf8:	1b18      	subs	r0, r3, r4
 8005cfa:	bd10      	pop	{r4, pc}
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	e7f2      	b.n	8005ce6 <memcmp+0x6>

08005d00 <memset>:
 8005d00:	4402      	add	r2, r0
 8005d02:	4603      	mov	r3, r0
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d100      	bne.n	8005d0a <memset+0xa>
 8005d08:	4770      	bx	lr
 8005d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0e:	e7f9      	b.n	8005d04 <memset+0x4>

08005d10 <__errno>:
 8005d10:	4b01      	ldr	r3, [pc, #4]	@ (8005d18 <__errno+0x8>)
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	20000010 	.word	0x20000010

08005d1c <__libc_init_array>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d54 <__libc_init_array+0x38>)
 8005d20:	4c0d      	ldr	r4, [pc, #52]	@ (8005d58 <__libc_init_array+0x3c>)
 8005d22:	1b64      	subs	r4, r4, r5
 8005d24:	10a4      	asrs	r4, r4, #2
 8005d26:	2600      	movs	r6, #0
 8005d28:	42a6      	cmp	r6, r4
 8005d2a:	d109      	bne.n	8005d40 <__libc_init_array+0x24>
 8005d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d5c <__libc_init_array+0x40>)
 8005d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d60 <__libc_init_array+0x44>)
 8005d30:	f000 fc64 	bl	80065fc <_init>
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	2600      	movs	r6, #0
 8005d3a:	42a6      	cmp	r6, r4
 8005d3c:	d105      	bne.n	8005d4a <__libc_init_array+0x2e>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d44:	4798      	blx	r3
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7ee      	b.n	8005d28 <__libc_init_array+0xc>
 8005d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4e:	4798      	blx	r3
 8005d50:	3601      	adds	r6, #1
 8005d52:	e7f2      	b.n	8005d3a <__libc_init_array+0x1e>
 8005d54:	08006dcc 	.word	0x08006dcc
 8005d58:	08006dcc 	.word	0x08006dcc
 8005d5c:	08006dcc 	.word	0x08006dcc
 8005d60:	08006dd0 	.word	0x08006dd0

08005d64 <__retarget_lock_acquire_recursive>:
 8005d64:	4770      	bx	lr

08005d66 <__retarget_lock_release_recursive>:
 8005d66:	4770      	bx	lr

08005d68 <_free_r>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	d041      	beq.n	8005df4 <_free_r+0x8c>
 8005d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d74:	1f0c      	subs	r4, r1, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfb8      	it	lt
 8005d7a:	18e4      	addlt	r4, r4, r3
 8005d7c:	f000 f8e0 	bl	8005f40 <__malloc_lock>
 8005d80:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <_free_r+0x90>)
 8005d82:	6813      	ldr	r3, [r2, #0]
 8005d84:	b933      	cbnz	r3, 8005d94 <_free_r+0x2c>
 8005d86:	6063      	str	r3, [r4, #4]
 8005d88:	6014      	str	r4, [r2, #0]
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d90:	f000 b8dc 	b.w	8005f4c <__malloc_unlock>
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d908      	bls.n	8005daa <_free_r+0x42>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	1821      	adds	r1, r4, r0
 8005d9c:	428b      	cmp	r3, r1
 8005d9e:	bf01      	itttt	eq
 8005da0:	6819      	ldreq	r1, [r3, #0]
 8005da2:	685b      	ldreq	r3, [r3, #4]
 8005da4:	1809      	addeq	r1, r1, r0
 8005da6:	6021      	streq	r1, [r4, #0]
 8005da8:	e7ed      	b.n	8005d86 <_free_r+0x1e>
 8005daa:	461a      	mov	r2, r3
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b10b      	cbz	r3, 8005db4 <_free_r+0x4c>
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d9fa      	bls.n	8005daa <_free_r+0x42>
 8005db4:	6811      	ldr	r1, [r2, #0]
 8005db6:	1850      	adds	r0, r2, r1
 8005db8:	42a0      	cmp	r0, r4
 8005dba:	d10b      	bne.n	8005dd4 <_free_r+0x6c>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	4401      	add	r1, r0
 8005dc0:	1850      	adds	r0, r2, r1
 8005dc2:	4283      	cmp	r3, r0
 8005dc4:	6011      	str	r1, [r2, #0]
 8005dc6:	d1e0      	bne.n	8005d8a <_free_r+0x22>
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	6053      	str	r3, [r2, #4]
 8005dce:	4408      	add	r0, r1
 8005dd0:	6010      	str	r0, [r2, #0]
 8005dd2:	e7da      	b.n	8005d8a <_free_r+0x22>
 8005dd4:	d902      	bls.n	8005ddc <_free_r+0x74>
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	602b      	str	r3, [r5, #0]
 8005dda:	e7d6      	b.n	8005d8a <_free_r+0x22>
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	1821      	adds	r1, r4, r0
 8005de0:	428b      	cmp	r3, r1
 8005de2:	bf04      	itt	eq
 8005de4:	6819      	ldreq	r1, [r3, #0]
 8005de6:	685b      	ldreq	r3, [r3, #4]
 8005de8:	6063      	str	r3, [r4, #4]
 8005dea:	bf04      	itt	eq
 8005dec:	1809      	addeq	r1, r1, r0
 8005dee:	6021      	streq	r1, [r4, #0]
 8005df0:	6054      	str	r4, [r2, #4]
 8005df2:	e7ca      	b.n	8005d8a <_free_r+0x22>
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	20000374 	.word	0x20000374

08005dfc <sbrk_aligned>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8005e3c <sbrk_aligned+0x40>)
 8005e00:	460c      	mov	r4, r1
 8005e02:	6831      	ldr	r1, [r6, #0]
 8005e04:	4605      	mov	r5, r0
 8005e06:	b911      	cbnz	r1, 8005e0e <sbrk_aligned+0x12>
 8005e08:	f000 fba4 	bl	8006554 <_sbrk_r>
 8005e0c:	6030      	str	r0, [r6, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 fb9f 	bl	8006554 <_sbrk_r>
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d103      	bne.n	8005e22 <sbrk_aligned+0x26>
 8005e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e1e:	4620      	mov	r0, r4
 8005e20:	bd70      	pop	{r4, r5, r6, pc}
 8005e22:	1cc4      	adds	r4, r0, #3
 8005e24:	f024 0403 	bic.w	r4, r4, #3
 8005e28:	42a0      	cmp	r0, r4
 8005e2a:	d0f8      	beq.n	8005e1e <sbrk_aligned+0x22>
 8005e2c:	1a21      	subs	r1, r4, r0
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 fb90 	bl	8006554 <_sbrk_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	d1f2      	bne.n	8005e1e <sbrk_aligned+0x22>
 8005e38:	e7ef      	b.n	8005e1a <sbrk_aligned+0x1e>
 8005e3a:	bf00      	nop
 8005e3c:	20000370 	.word	0x20000370

08005e40 <_malloc_r>:
 8005e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e44:	1ccd      	adds	r5, r1, #3
 8005e46:	f025 0503 	bic.w	r5, r5, #3
 8005e4a:	3508      	adds	r5, #8
 8005e4c:	2d0c      	cmp	r5, #12
 8005e4e:	bf38      	it	cc
 8005e50:	250c      	movcc	r5, #12
 8005e52:	2d00      	cmp	r5, #0
 8005e54:	4606      	mov	r6, r0
 8005e56:	db01      	blt.n	8005e5c <_malloc_r+0x1c>
 8005e58:	42a9      	cmp	r1, r5
 8005e5a:	d904      	bls.n	8005e66 <_malloc_r+0x26>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	6033      	str	r3, [r6, #0]
 8005e60:	2000      	movs	r0, #0
 8005e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f3c <_malloc_r+0xfc>
 8005e6a:	f000 f869 	bl	8005f40 <__malloc_lock>
 8005e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e72:	461c      	mov	r4, r3
 8005e74:	bb44      	cbnz	r4, 8005ec8 <_malloc_r+0x88>
 8005e76:	4629      	mov	r1, r5
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ffbf 	bl	8005dfc <sbrk_aligned>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	4604      	mov	r4, r0
 8005e82:	d158      	bne.n	8005f36 <_malloc_r+0xf6>
 8005e84:	f8d8 4000 	ldr.w	r4, [r8]
 8005e88:	4627      	mov	r7, r4
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	d143      	bne.n	8005f16 <_malloc_r+0xd6>
 8005e8e:	2c00      	cmp	r4, #0
 8005e90:	d04b      	beq.n	8005f2a <_malloc_r+0xea>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	4639      	mov	r1, r7
 8005e96:	4630      	mov	r0, r6
 8005e98:	eb04 0903 	add.w	r9, r4, r3
 8005e9c:	f000 fb5a 	bl	8006554 <_sbrk_r>
 8005ea0:	4581      	cmp	r9, r0
 8005ea2:	d142      	bne.n	8005f2a <_malloc_r+0xea>
 8005ea4:	6821      	ldr	r1, [r4, #0]
 8005ea6:	1a6d      	subs	r5, r5, r1
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7ff ffa6 	bl	8005dfc <sbrk_aligned>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d03a      	beq.n	8005f2a <_malloc_r+0xea>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	442b      	add	r3, r5
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	f8d8 3000 	ldr.w	r3, [r8]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	bb62      	cbnz	r2, 8005f1c <_malloc_r+0xdc>
 8005ec2:	f8c8 7000 	str.w	r7, [r8]
 8005ec6:	e00f      	b.n	8005ee8 <_malloc_r+0xa8>
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	1b52      	subs	r2, r2, r5
 8005ecc:	d420      	bmi.n	8005f10 <_malloc_r+0xd0>
 8005ece:	2a0b      	cmp	r2, #11
 8005ed0:	d917      	bls.n	8005f02 <_malloc_r+0xc2>
 8005ed2:	1961      	adds	r1, r4, r5
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	6025      	str	r5, [r4, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	6059      	strne	r1, [r3, #4]
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	bf08      	it	eq
 8005ee0:	f8c8 1000 	streq.w	r1, [r8]
 8005ee4:	5162      	str	r2, [r4, r5]
 8005ee6:	604b      	str	r3, [r1, #4]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f82f 	bl	8005f4c <__malloc_unlock>
 8005eee:	f104 000b 	add.w	r0, r4, #11
 8005ef2:	1d23      	adds	r3, r4, #4
 8005ef4:	f020 0007 	bic.w	r0, r0, #7
 8005ef8:	1ac2      	subs	r2, r0, r3
 8005efa:	bf1c      	itt	ne
 8005efc:	1a1b      	subne	r3, r3, r0
 8005efe:	50a3      	strne	r3, [r4, r2]
 8005f00:	e7af      	b.n	8005e62 <_malloc_r+0x22>
 8005f02:	6862      	ldr	r2, [r4, #4]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	bf0c      	ite	eq
 8005f08:	f8c8 2000 	streq.w	r2, [r8]
 8005f0c:	605a      	strne	r2, [r3, #4]
 8005f0e:	e7eb      	b.n	8005ee8 <_malloc_r+0xa8>
 8005f10:	4623      	mov	r3, r4
 8005f12:	6864      	ldr	r4, [r4, #4]
 8005f14:	e7ae      	b.n	8005e74 <_malloc_r+0x34>
 8005f16:	463c      	mov	r4, r7
 8005f18:	687f      	ldr	r7, [r7, #4]
 8005f1a:	e7b6      	b.n	8005e8a <_malloc_r+0x4a>
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d1fb      	bne.n	8005f1c <_malloc_r+0xdc>
 8005f24:	2300      	movs	r3, #0
 8005f26:	6053      	str	r3, [r2, #4]
 8005f28:	e7de      	b.n	8005ee8 <_malloc_r+0xa8>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	6033      	str	r3, [r6, #0]
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 f80c 	bl	8005f4c <__malloc_unlock>
 8005f34:	e794      	b.n	8005e60 <_malloc_r+0x20>
 8005f36:	6005      	str	r5, [r0, #0]
 8005f38:	e7d6      	b.n	8005ee8 <_malloc_r+0xa8>
 8005f3a:	bf00      	nop
 8005f3c:	20000374 	.word	0x20000374

08005f40 <__malloc_lock>:
 8005f40:	4801      	ldr	r0, [pc, #4]	@ (8005f48 <__malloc_lock+0x8>)
 8005f42:	f7ff bf0f 	b.w	8005d64 <__retarget_lock_acquire_recursive>
 8005f46:	bf00      	nop
 8005f48:	2000036c 	.word	0x2000036c

08005f4c <__malloc_unlock>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	@ (8005f54 <__malloc_unlock+0x8>)
 8005f4e:	f7ff bf0a 	b.w	8005d66 <__retarget_lock_release_recursive>
 8005f52:	bf00      	nop
 8005f54:	2000036c 	.word	0x2000036c

08005f58 <__ssputs_r>:
 8005f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	688e      	ldr	r6, [r1, #8]
 8005f5e:	461f      	mov	r7, r3
 8005f60:	42be      	cmp	r6, r7
 8005f62:	680b      	ldr	r3, [r1, #0]
 8005f64:	4682      	mov	sl, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	4690      	mov	r8, r2
 8005f6a:	d82d      	bhi.n	8005fc8 <__ssputs_r+0x70>
 8005f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f74:	d026      	beq.n	8005fc4 <__ssputs_r+0x6c>
 8005f76:	6965      	ldr	r5, [r4, #20]
 8005f78:	6909      	ldr	r1, [r1, #16]
 8005f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f7e:	eba3 0901 	sub.w	r9, r3, r1
 8005f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f86:	1c7b      	adds	r3, r7, #1
 8005f88:	444b      	add	r3, r9
 8005f8a:	106d      	asrs	r5, r5, #1
 8005f8c:	429d      	cmp	r5, r3
 8005f8e:	bf38      	it	cc
 8005f90:	461d      	movcc	r5, r3
 8005f92:	0553      	lsls	r3, r2, #21
 8005f94:	d527      	bpl.n	8005fe6 <__ssputs_r+0x8e>
 8005f96:	4629      	mov	r1, r5
 8005f98:	f7ff ff52 	bl	8005e40 <_malloc_r>
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	b360      	cbz	r0, 8005ffa <__ssputs_r+0xa2>
 8005fa0:	6921      	ldr	r1, [r4, #16]
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	f000 fae6 	bl	8006574 <memcpy>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	6126      	str	r6, [r4, #16]
 8005fb6:	6165      	str	r5, [r4, #20]
 8005fb8:	444e      	add	r6, r9
 8005fba:	eba5 0509 	sub.w	r5, r5, r9
 8005fbe:	6026      	str	r6, [r4, #0]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	463e      	mov	r6, r7
 8005fc4:	42be      	cmp	r6, r7
 8005fc6:	d900      	bls.n	8005fca <__ssputs_r+0x72>
 8005fc8:	463e      	mov	r6, r7
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4641      	mov	r1, r8
 8005fd0:	f000 faa6 	bl	8006520 <memmove>
 8005fd4:	68a3      	ldr	r3, [r4, #8]
 8005fd6:	1b9b      	subs	r3, r3, r6
 8005fd8:	60a3      	str	r3, [r4, #8]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	4433      	add	r3, r6
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	f000 fad2 	bl	8006590 <_realloc_r>
 8005fec:	4606      	mov	r6, r0
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1e0      	bne.n	8005fb4 <__ssputs_r+0x5c>
 8005ff2:	6921      	ldr	r1, [r4, #16]
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	f7ff feb7 	bl	8005d68 <_free_r>
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	f8ca 3000 	str.w	r3, [sl]
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006006:	81a3      	strh	r3, [r4, #12]
 8006008:	f04f 30ff 	mov.w	r0, #4294967295
 800600c:	e7e9      	b.n	8005fe2 <__ssputs_r+0x8a>
	...

08006010 <_svfiprintf_r>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	4698      	mov	r8, r3
 8006016:	898b      	ldrh	r3, [r1, #12]
 8006018:	061b      	lsls	r3, r3, #24
 800601a:	b09d      	sub	sp, #116	@ 0x74
 800601c:	4607      	mov	r7, r0
 800601e:	460d      	mov	r5, r1
 8006020:	4614      	mov	r4, r2
 8006022:	d510      	bpl.n	8006046 <_svfiprintf_r+0x36>
 8006024:	690b      	ldr	r3, [r1, #16]
 8006026:	b973      	cbnz	r3, 8006046 <_svfiprintf_r+0x36>
 8006028:	2140      	movs	r1, #64	@ 0x40
 800602a:	f7ff ff09 	bl	8005e40 <_malloc_r>
 800602e:	6028      	str	r0, [r5, #0]
 8006030:	6128      	str	r0, [r5, #16]
 8006032:	b930      	cbnz	r0, 8006042 <_svfiprintf_r+0x32>
 8006034:	230c      	movs	r3, #12
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	b01d      	add	sp, #116	@ 0x74
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	2340      	movs	r3, #64	@ 0x40
 8006044:	616b      	str	r3, [r5, #20]
 8006046:	2300      	movs	r3, #0
 8006048:	9309      	str	r3, [sp, #36]	@ 0x24
 800604a:	2320      	movs	r3, #32
 800604c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006050:	f8cd 800c 	str.w	r8, [sp, #12]
 8006054:	2330      	movs	r3, #48	@ 0x30
 8006056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061f4 <_svfiprintf_r+0x1e4>
 800605a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800605e:	f04f 0901 	mov.w	r9, #1
 8006062:	4623      	mov	r3, r4
 8006064:	469a      	mov	sl, r3
 8006066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606a:	b10a      	cbz	r2, 8006070 <_svfiprintf_r+0x60>
 800606c:	2a25      	cmp	r2, #37	@ 0x25
 800606e:	d1f9      	bne.n	8006064 <_svfiprintf_r+0x54>
 8006070:	ebba 0b04 	subs.w	fp, sl, r4
 8006074:	d00b      	beq.n	800608e <_svfiprintf_r+0x7e>
 8006076:	465b      	mov	r3, fp
 8006078:	4622      	mov	r2, r4
 800607a:	4629      	mov	r1, r5
 800607c:	4638      	mov	r0, r7
 800607e:	f7ff ff6b 	bl	8005f58 <__ssputs_r>
 8006082:	3001      	adds	r0, #1
 8006084:	f000 80a7 	beq.w	80061d6 <_svfiprintf_r+0x1c6>
 8006088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800608a:	445a      	add	r2, fp
 800608c:	9209      	str	r2, [sp, #36]	@ 0x24
 800608e:	f89a 3000 	ldrb.w	r3, [sl]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 809f 	beq.w	80061d6 <_svfiprintf_r+0x1c6>
 8006098:	2300      	movs	r3, #0
 800609a:	f04f 32ff 	mov.w	r2, #4294967295
 800609e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a2:	f10a 0a01 	add.w	sl, sl, #1
 80060a6:	9304      	str	r3, [sp, #16]
 80060a8:	9307      	str	r3, [sp, #28]
 80060aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80060b0:	4654      	mov	r4, sl
 80060b2:	2205      	movs	r2, #5
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	484e      	ldr	r0, [pc, #312]	@ (80061f4 <_svfiprintf_r+0x1e4>)
 80060ba:	f7fa f8a1 	bl	8000200 <memchr>
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	b9d8      	cbnz	r0, 80060fa <_svfiprintf_r+0xea>
 80060c2:	06d0      	lsls	r0, r2, #27
 80060c4:	bf44      	itt	mi
 80060c6:	2320      	movmi	r3, #32
 80060c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060cc:	0711      	lsls	r1, r2, #28
 80060ce:	bf44      	itt	mi
 80060d0:	232b      	movmi	r3, #43	@ 0x2b
 80060d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b2a      	cmp	r3, #42	@ 0x2a
 80060dc:	d015      	beq.n	800610a <_svfiprintf_r+0xfa>
 80060de:	9a07      	ldr	r2, [sp, #28]
 80060e0:	4654      	mov	r4, sl
 80060e2:	2000      	movs	r0, #0
 80060e4:	f04f 0c0a 	mov.w	ip, #10
 80060e8:	4621      	mov	r1, r4
 80060ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ee:	3b30      	subs	r3, #48	@ 0x30
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d94b      	bls.n	800618c <_svfiprintf_r+0x17c>
 80060f4:	b1b0      	cbz	r0, 8006124 <_svfiprintf_r+0x114>
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	e014      	b.n	8006124 <_svfiprintf_r+0x114>
 80060fa:	eba0 0308 	sub.w	r3, r0, r8
 80060fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006102:	4313      	orrs	r3, r2
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	46a2      	mov	sl, r4
 8006108:	e7d2      	b.n	80060b0 <_svfiprintf_r+0xa0>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	1d19      	adds	r1, r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	9103      	str	r1, [sp, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	bfbb      	ittet	lt
 8006116:	425b      	neglt	r3, r3
 8006118:	f042 0202 	orrlt.w	r2, r2, #2
 800611c:	9307      	strge	r3, [sp, #28]
 800611e:	9307      	strlt	r3, [sp, #28]
 8006120:	bfb8      	it	lt
 8006122:	9204      	strlt	r2, [sp, #16]
 8006124:	7823      	ldrb	r3, [r4, #0]
 8006126:	2b2e      	cmp	r3, #46	@ 0x2e
 8006128:	d10a      	bne.n	8006140 <_svfiprintf_r+0x130>
 800612a:	7863      	ldrb	r3, [r4, #1]
 800612c:	2b2a      	cmp	r3, #42	@ 0x2a
 800612e:	d132      	bne.n	8006196 <_svfiprintf_r+0x186>
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	1d1a      	adds	r2, r3, #4
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	9203      	str	r2, [sp, #12]
 8006138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800613c:	3402      	adds	r4, #2
 800613e:	9305      	str	r3, [sp, #20]
 8006140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006204 <_svfiprintf_r+0x1f4>
 8006144:	7821      	ldrb	r1, [r4, #0]
 8006146:	2203      	movs	r2, #3
 8006148:	4650      	mov	r0, sl
 800614a:	f7fa f859 	bl	8000200 <memchr>
 800614e:	b138      	cbz	r0, 8006160 <_svfiprintf_r+0x150>
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	eba0 000a 	sub.w	r0, r0, sl
 8006156:	2240      	movs	r2, #64	@ 0x40
 8006158:	4082      	lsls	r2, r0
 800615a:	4313      	orrs	r3, r2
 800615c:	3401      	adds	r4, #1
 800615e:	9304      	str	r3, [sp, #16]
 8006160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006164:	4824      	ldr	r0, [pc, #144]	@ (80061f8 <_svfiprintf_r+0x1e8>)
 8006166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800616a:	2206      	movs	r2, #6
 800616c:	f7fa f848 	bl	8000200 <memchr>
 8006170:	2800      	cmp	r0, #0
 8006172:	d036      	beq.n	80061e2 <_svfiprintf_r+0x1d2>
 8006174:	4b21      	ldr	r3, [pc, #132]	@ (80061fc <_svfiprintf_r+0x1ec>)
 8006176:	bb1b      	cbnz	r3, 80061c0 <_svfiprintf_r+0x1b0>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	3307      	adds	r3, #7
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	3308      	adds	r3, #8
 8006182:	9303      	str	r3, [sp, #12]
 8006184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006186:	4433      	add	r3, r6
 8006188:	9309      	str	r3, [sp, #36]	@ 0x24
 800618a:	e76a      	b.n	8006062 <_svfiprintf_r+0x52>
 800618c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006190:	460c      	mov	r4, r1
 8006192:	2001      	movs	r0, #1
 8006194:	e7a8      	b.n	80060e8 <_svfiprintf_r+0xd8>
 8006196:	2300      	movs	r3, #0
 8006198:	3401      	adds	r4, #1
 800619a:	9305      	str	r3, [sp, #20]
 800619c:	4619      	mov	r1, r3
 800619e:	f04f 0c0a 	mov.w	ip, #10
 80061a2:	4620      	mov	r0, r4
 80061a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061a8:	3a30      	subs	r2, #48	@ 0x30
 80061aa:	2a09      	cmp	r2, #9
 80061ac:	d903      	bls.n	80061b6 <_svfiprintf_r+0x1a6>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0c6      	beq.n	8006140 <_svfiprintf_r+0x130>
 80061b2:	9105      	str	r1, [sp, #20]
 80061b4:	e7c4      	b.n	8006140 <_svfiprintf_r+0x130>
 80061b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ba:	4604      	mov	r4, r0
 80061bc:	2301      	movs	r3, #1
 80061be:	e7f0      	b.n	80061a2 <_svfiprintf_r+0x192>
 80061c0:	ab03      	add	r3, sp, #12
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	462a      	mov	r2, r5
 80061c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006200 <_svfiprintf_r+0x1f0>)
 80061c8:	a904      	add	r1, sp, #16
 80061ca:	4638      	mov	r0, r7
 80061cc:	f3af 8000 	nop.w
 80061d0:	1c42      	adds	r2, r0, #1
 80061d2:	4606      	mov	r6, r0
 80061d4:	d1d6      	bne.n	8006184 <_svfiprintf_r+0x174>
 80061d6:	89ab      	ldrh	r3, [r5, #12]
 80061d8:	065b      	lsls	r3, r3, #25
 80061da:	f53f af2d 	bmi.w	8006038 <_svfiprintf_r+0x28>
 80061de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061e0:	e72c      	b.n	800603c <_svfiprintf_r+0x2c>
 80061e2:	ab03      	add	r3, sp, #12
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	462a      	mov	r2, r5
 80061e8:	4b05      	ldr	r3, [pc, #20]	@ (8006200 <_svfiprintf_r+0x1f0>)
 80061ea:	a904      	add	r1, sp, #16
 80061ec:	4638      	mov	r0, r7
 80061ee:	f000 f879 	bl	80062e4 <_printf_i>
 80061f2:	e7ed      	b.n	80061d0 <_svfiprintf_r+0x1c0>
 80061f4:	08006d90 	.word	0x08006d90
 80061f8:	08006d9a 	.word	0x08006d9a
 80061fc:	00000000 	.word	0x00000000
 8006200:	08005f59 	.word	0x08005f59
 8006204:	08006d96 	.word	0x08006d96

08006208 <_printf_common>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	4616      	mov	r6, r2
 800620e:	4698      	mov	r8, r3
 8006210:	688a      	ldr	r2, [r1, #8]
 8006212:	690b      	ldr	r3, [r1, #16]
 8006214:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006218:	4293      	cmp	r3, r2
 800621a:	bfb8      	it	lt
 800621c:	4613      	movlt	r3, r2
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006224:	4607      	mov	r7, r0
 8006226:	460c      	mov	r4, r1
 8006228:	b10a      	cbz	r2, 800622e <_printf_common+0x26>
 800622a:	3301      	adds	r3, #1
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	0699      	lsls	r1, r3, #26
 8006232:	bf42      	ittt	mi
 8006234:	6833      	ldrmi	r3, [r6, #0]
 8006236:	3302      	addmi	r3, #2
 8006238:	6033      	strmi	r3, [r6, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	f015 0506 	ands.w	r5, r5, #6
 8006240:	d106      	bne.n	8006250 <_printf_common+0x48>
 8006242:	f104 0a19 	add.w	sl, r4, #25
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	6832      	ldr	r2, [r6, #0]
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	42ab      	cmp	r3, r5
 800624e:	dc26      	bgt.n	800629e <_printf_common+0x96>
 8006250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	3b00      	subs	r3, #0
 8006258:	bf18      	it	ne
 800625a:	2301      	movne	r3, #1
 800625c:	0692      	lsls	r2, r2, #26
 800625e:	d42b      	bmi.n	80062b8 <_printf_common+0xb0>
 8006260:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	47c8      	blx	r9
 800626a:	3001      	adds	r0, #1
 800626c:	d01e      	beq.n	80062ac <_printf_common+0xa4>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	f003 0306 	and.w	r3, r3, #6
 8006276:	2b04      	cmp	r3, #4
 8006278:	bf02      	ittt	eq
 800627a:	68e5      	ldreq	r5, [r4, #12]
 800627c:	6833      	ldreq	r3, [r6, #0]
 800627e:	1aed      	subeq	r5, r5, r3
 8006280:	68a3      	ldr	r3, [r4, #8]
 8006282:	bf0c      	ite	eq
 8006284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006288:	2500      	movne	r5, #0
 800628a:	4293      	cmp	r3, r2
 800628c:	bfc4      	itt	gt
 800628e:	1a9b      	subgt	r3, r3, r2
 8006290:	18ed      	addgt	r5, r5, r3
 8006292:	2600      	movs	r6, #0
 8006294:	341a      	adds	r4, #26
 8006296:	42b5      	cmp	r5, r6
 8006298:	d11a      	bne.n	80062d0 <_printf_common+0xc8>
 800629a:	2000      	movs	r0, #0
 800629c:	e008      	b.n	80062b0 <_printf_common+0xa8>
 800629e:	2301      	movs	r3, #1
 80062a0:	4652      	mov	r2, sl
 80062a2:	4641      	mov	r1, r8
 80062a4:	4638      	mov	r0, r7
 80062a6:	47c8      	blx	r9
 80062a8:	3001      	adds	r0, #1
 80062aa:	d103      	bne.n	80062b4 <_printf_common+0xac>
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b4:	3501      	adds	r5, #1
 80062b6:	e7c6      	b.n	8006246 <_printf_common+0x3e>
 80062b8:	18e1      	adds	r1, r4, r3
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	2030      	movs	r0, #48	@ 0x30
 80062be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062c2:	4422      	add	r2, r4
 80062c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062cc:	3302      	adds	r3, #2
 80062ce:	e7c7      	b.n	8006260 <_printf_common+0x58>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4622      	mov	r2, r4
 80062d4:	4641      	mov	r1, r8
 80062d6:	4638      	mov	r0, r7
 80062d8:	47c8      	blx	r9
 80062da:	3001      	adds	r0, #1
 80062dc:	d0e6      	beq.n	80062ac <_printf_common+0xa4>
 80062de:	3601      	adds	r6, #1
 80062e0:	e7d9      	b.n	8006296 <_printf_common+0x8e>
	...

080062e4 <_printf_i>:
 80062e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e8:	7e0f      	ldrb	r7, [r1, #24]
 80062ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062ec:	2f78      	cmp	r7, #120	@ 0x78
 80062ee:	4691      	mov	r9, r2
 80062f0:	4680      	mov	r8, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	469a      	mov	sl, r3
 80062f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062fa:	d807      	bhi.n	800630c <_printf_i+0x28>
 80062fc:	2f62      	cmp	r7, #98	@ 0x62
 80062fe:	d80a      	bhi.n	8006316 <_printf_i+0x32>
 8006300:	2f00      	cmp	r7, #0
 8006302:	f000 80d1 	beq.w	80064a8 <_printf_i+0x1c4>
 8006306:	2f58      	cmp	r7, #88	@ 0x58
 8006308:	f000 80b8 	beq.w	800647c <_printf_i+0x198>
 800630c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006314:	e03a      	b.n	800638c <_printf_i+0xa8>
 8006316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800631a:	2b15      	cmp	r3, #21
 800631c:	d8f6      	bhi.n	800630c <_printf_i+0x28>
 800631e:	a101      	add	r1, pc, #4	@ (adr r1, 8006324 <_printf_i+0x40>)
 8006320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006324:	0800637d 	.word	0x0800637d
 8006328:	08006391 	.word	0x08006391
 800632c:	0800630d 	.word	0x0800630d
 8006330:	0800630d 	.word	0x0800630d
 8006334:	0800630d 	.word	0x0800630d
 8006338:	0800630d 	.word	0x0800630d
 800633c:	08006391 	.word	0x08006391
 8006340:	0800630d 	.word	0x0800630d
 8006344:	0800630d 	.word	0x0800630d
 8006348:	0800630d 	.word	0x0800630d
 800634c:	0800630d 	.word	0x0800630d
 8006350:	0800648f 	.word	0x0800648f
 8006354:	080063bb 	.word	0x080063bb
 8006358:	08006449 	.word	0x08006449
 800635c:	0800630d 	.word	0x0800630d
 8006360:	0800630d 	.word	0x0800630d
 8006364:	080064b1 	.word	0x080064b1
 8006368:	0800630d 	.word	0x0800630d
 800636c:	080063bb 	.word	0x080063bb
 8006370:	0800630d 	.word	0x0800630d
 8006374:	0800630d 	.word	0x0800630d
 8006378:	08006451 	.word	0x08006451
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	1d1a      	adds	r2, r3, #4
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6032      	str	r2, [r6, #0]
 8006384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800638c:	2301      	movs	r3, #1
 800638e:	e09c      	b.n	80064ca <_printf_i+0x1e6>
 8006390:	6833      	ldr	r3, [r6, #0]
 8006392:	6820      	ldr	r0, [r4, #0]
 8006394:	1d19      	adds	r1, r3, #4
 8006396:	6031      	str	r1, [r6, #0]
 8006398:	0606      	lsls	r6, r0, #24
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0xbc>
 800639c:	681d      	ldr	r5, [r3, #0]
 800639e:	e003      	b.n	80063a8 <_printf_i+0xc4>
 80063a0:	0645      	lsls	r5, r0, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0xb8>
 80063a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	da03      	bge.n	80063b4 <_printf_i+0xd0>
 80063ac:	232d      	movs	r3, #45	@ 0x2d
 80063ae:	426d      	negs	r5, r5
 80063b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063b4:	4858      	ldr	r0, [pc, #352]	@ (8006518 <_printf_i+0x234>)
 80063b6:	230a      	movs	r3, #10
 80063b8:	e011      	b.n	80063de <_printf_i+0xfa>
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	6833      	ldr	r3, [r6, #0]
 80063be:	0608      	lsls	r0, r1, #24
 80063c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063c4:	d402      	bmi.n	80063cc <_printf_i+0xe8>
 80063c6:	0649      	lsls	r1, r1, #25
 80063c8:	bf48      	it	mi
 80063ca:	b2ad      	uxthmi	r5, r5
 80063cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063ce:	4852      	ldr	r0, [pc, #328]	@ (8006518 <_printf_i+0x234>)
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	bf14      	ite	ne
 80063d4:	230a      	movne	r3, #10
 80063d6:	2308      	moveq	r3, #8
 80063d8:	2100      	movs	r1, #0
 80063da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063de:	6866      	ldr	r6, [r4, #4]
 80063e0:	60a6      	str	r6, [r4, #8]
 80063e2:	2e00      	cmp	r6, #0
 80063e4:	db05      	blt.n	80063f2 <_printf_i+0x10e>
 80063e6:	6821      	ldr	r1, [r4, #0]
 80063e8:	432e      	orrs	r6, r5
 80063ea:	f021 0104 	bic.w	r1, r1, #4
 80063ee:	6021      	str	r1, [r4, #0]
 80063f0:	d04b      	beq.n	800648a <_printf_i+0x1a6>
 80063f2:	4616      	mov	r6, r2
 80063f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80063f8:	fb03 5711 	mls	r7, r3, r1, r5
 80063fc:	5dc7      	ldrb	r7, [r0, r7]
 80063fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006402:	462f      	mov	r7, r5
 8006404:	42bb      	cmp	r3, r7
 8006406:	460d      	mov	r5, r1
 8006408:	d9f4      	bls.n	80063f4 <_printf_i+0x110>
 800640a:	2b08      	cmp	r3, #8
 800640c:	d10b      	bne.n	8006426 <_printf_i+0x142>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	07df      	lsls	r7, r3, #31
 8006412:	d508      	bpl.n	8006426 <_printf_i+0x142>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	6861      	ldr	r1, [r4, #4]
 8006418:	4299      	cmp	r1, r3
 800641a:	bfde      	ittt	le
 800641c:	2330      	movle	r3, #48	@ 0x30
 800641e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006422:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006426:	1b92      	subs	r2, r2, r6
 8006428:	6122      	str	r2, [r4, #16]
 800642a:	f8cd a000 	str.w	sl, [sp]
 800642e:	464b      	mov	r3, r9
 8006430:	aa03      	add	r2, sp, #12
 8006432:	4621      	mov	r1, r4
 8006434:	4640      	mov	r0, r8
 8006436:	f7ff fee7 	bl	8006208 <_printf_common>
 800643a:	3001      	adds	r0, #1
 800643c:	d14a      	bne.n	80064d4 <_printf_i+0x1f0>
 800643e:	f04f 30ff 	mov.w	r0, #4294967295
 8006442:	b004      	add	sp, #16
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	f043 0320 	orr.w	r3, r3, #32
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	4832      	ldr	r0, [pc, #200]	@ (800651c <_printf_i+0x238>)
 8006452:	2778      	movs	r7, #120	@ 0x78
 8006454:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	6831      	ldr	r1, [r6, #0]
 800645c:	061f      	lsls	r7, r3, #24
 800645e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006462:	d402      	bmi.n	800646a <_printf_i+0x186>
 8006464:	065f      	lsls	r7, r3, #25
 8006466:	bf48      	it	mi
 8006468:	b2ad      	uxthmi	r5, r5
 800646a:	6031      	str	r1, [r6, #0]
 800646c:	07d9      	lsls	r1, r3, #31
 800646e:	bf44      	itt	mi
 8006470:	f043 0320 	orrmi.w	r3, r3, #32
 8006474:	6023      	strmi	r3, [r4, #0]
 8006476:	b11d      	cbz	r5, 8006480 <_printf_i+0x19c>
 8006478:	2310      	movs	r3, #16
 800647a:	e7ad      	b.n	80063d8 <_printf_i+0xf4>
 800647c:	4826      	ldr	r0, [pc, #152]	@ (8006518 <_printf_i+0x234>)
 800647e:	e7e9      	b.n	8006454 <_printf_i+0x170>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	f023 0320 	bic.w	r3, r3, #32
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	e7f6      	b.n	8006478 <_printf_i+0x194>
 800648a:	4616      	mov	r6, r2
 800648c:	e7bd      	b.n	800640a <_printf_i+0x126>
 800648e:	6833      	ldr	r3, [r6, #0]
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	6961      	ldr	r1, [r4, #20]
 8006494:	1d18      	adds	r0, r3, #4
 8006496:	6030      	str	r0, [r6, #0]
 8006498:	062e      	lsls	r6, r5, #24
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	d501      	bpl.n	80064a2 <_printf_i+0x1be>
 800649e:	6019      	str	r1, [r3, #0]
 80064a0:	e002      	b.n	80064a8 <_printf_i+0x1c4>
 80064a2:	0668      	lsls	r0, r5, #25
 80064a4:	d5fb      	bpl.n	800649e <_printf_i+0x1ba>
 80064a6:	8019      	strh	r1, [r3, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	4616      	mov	r6, r2
 80064ae:	e7bc      	b.n	800642a <_printf_i+0x146>
 80064b0:	6833      	ldr	r3, [r6, #0]
 80064b2:	1d1a      	adds	r2, r3, #4
 80064b4:	6032      	str	r2, [r6, #0]
 80064b6:	681e      	ldr	r6, [r3, #0]
 80064b8:	6862      	ldr	r2, [r4, #4]
 80064ba:	2100      	movs	r1, #0
 80064bc:	4630      	mov	r0, r6
 80064be:	f7f9 fe9f 	bl	8000200 <memchr>
 80064c2:	b108      	cbz	r0, 80064c8 <_printf_i+0x1e4>
 80064c4:	1b80      	subs	r0, r0, r6
 80064c6:	6060      	str	r0, [r4, #4]
 80064c8:	6863      	ldr	r3, [r4, #4]
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	2300      	movs	r3, #0
 80064ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d2:	e7aa      	b.n	800642a <_printf_i+0x146>
 80064d4:	6923      	ldr	r3, [r4, #16]
 80064d6:	4632      	mov	r2, r6
 80064d8:	4649      	mov	r1, r9
 80064da:	4640      	mov	r0, r8
 80064dc:	47d0      	blx	sl
 80064de:	3001      	adds	r0, #1
 80064e0:	d0ad      	beq.n	800643e <_printf_i+0x15a>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	079b      	lsls	r3, r3, #30
 80064e6:	d413      	bmi.n	8006510 <_printf_i+0x22c>
 80064e8:	68e0      	ldr	r0, [r4, #12]
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	4298      	cmp	r0, r3
 80064ee:	bfb8      	it	lt
 80064f0:	4618      	movlt	r0, r3
 80064f2:	e7a6      	b.n	8006442 <_printf_i+0x15e>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4632      	mov	r2, r6
 80064f8:	4649      	mov	r1, r9
 80064fa:	4640      	mov	r0, r8
 80064fc:	47d0      	blx	sl
 80064fe:	3001      	adds	r0, #1
 8006500:	d09d      	beq.n	800643e <_printf_i+0x15a>
 8006502:	3501      	adds	r5, #1
 8006504:	68e3      	ldr	r3, [r4, #12]
 8006506:	9903      	ldr	r1, [sp, #12]
 8006508:	1a5b      	subs	r3, r3, r1
 800650a:	42ab      	cmp	r3, r5
 800650c:	dcf2      	bgt.n	80064f4 <_printf_i+0x210>
 800650e:	e7eb      	b.n	80064e8 <_printf_i+0x204>
 8006510:	2500      	movs	r5, #0
 8006512:	f104 0619 	add.w	r6, r4, #25
 8006516:	e7f5      	b.n	8006504 <_printf_i+0x220>
 8006518:	08006da1 	.word	0x08006da1
 800651c:	08006db2 	.word	0x08006db2

08006520 <memmove>:
 8006520:	4288      	cmp	r0, r1
 8006522:	b510      	push	{r4, lr}
 8006524:	eb01 0402 	add.w	r4, r1, r2
 8006528:	d902      	bls.n	8006530 <memmove+0x10>
 800652a:	4284      	cmp	r4, r0
 800652c:	4623      	mov	r3, r4
 800652e:	d807      	bhi.n	8006540 <memmove+0x20>
 8006530:	1e43      	subs	r3, r0, #1
 8006532:	42a1      	cmp	r1, r4
 8006534:	d008      	beq.n	8006548 <memmove+0x28>
 8006536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800653a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800653e:	e7f8      	b.n	8006532 <memmove+0x12>
 8006540:	4402      	add	r2, r0
 8006542:	4601      	mov	r1, r0
 8006544:	428a      	cmp	r2, r1
 8006546:	d100      	bne.n	800654a <memmove+0x2a>
 8006548:	bd10      	pop	{r4, pc}
 800654a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800654e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006552:	e7f7      	b.n	8006544 <memmove+0x24>

08006554 <_sbrk_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d06      	ldr	r5, [pc, #24]	@ (8006570 <_sbrk_r+0x1c>)
 8006558:	2300      	movs	r3, #0
 800655a:	4604      	mov	r4, r0
 800655c:	4608      	mov	r0, r1
 800655e:	602b      	str	r3, [r5, #0]
 8006560:	f7fb fe60 	bl	8002224 <_sbrk>
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d102      	bne.n	800656e <_sbrk_r+0x1a>
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	b103      	cbz	r3, 800656e <_sbrk_r+0x1a>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	20000368 	.word	0x20000368

08006574 <memcpy>:
 8006574:	440a      	add	r2, r1
 8006576:	4291      	cmp	r1, r2
 8006578:	f100 33ff 	add.w	r3, r0, #4294967295
 800657c:	d100      	bne.n	8006580 <memcpy+0xc>
 800657e:	4770      	bx	lr
 8006580:	b510      	push	{r4, lr}
 8006582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800658a:	4291      	cmp	r1, r2
 800658c:	d1f9      	bne.n	8006582 <memcpy+0xe>
 800658e:	bd10      	pop	{r4, pc}

08006590 <_realloc_r>:
 8006590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	4607      	mov	r7, r0
 8006596:	4614      	mov	r4, r2
 8006598:	460d      	mov	r5, r1
 800659a:	b921      	cbnz	r1, 80065a6 <_realloc_r+0x16>
 800659c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a0:	4611      	mov	r1, r2
 80065a2:	f7ff bc4d 	b.w	8005e40 <_malloc_r>
 80065a6:	b92a      	cbnz	r2, 80065b4 <_realloc_r+0x24>
 80065a8:	f7ff fbde 	bl	8005d68 <_free_r>
 80065ac:	4625      	mov	r5, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	f000 f81a 	bl	80065ec <_malloc_usable_size_r>
 80065b8:	4284      	cmp	r4, r0
 80065ba:	4606      	mov	r6, r0
 80065bc:	d802      	bhi.n	80065c4 <_realloc_r+0x34>
 80065be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065c2:	d8f4      	bhi.n	80065ae <_realloc_r+0x1e>
 80065c4:	4621      	mov	r1, r4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff fc3a 	bl	8005e40 <_malloc_r>
 80065cc:	4680      	mov	r8, r0
 80065ce:	b908      	cbnz	r0, 80065d4 <_realloc_r+0x44>
 80065d0:	4645      	mov	r5, r8
 80065d2:	e7ec      	b.n	80065ae <_realloc_r+0x1e>
 80065d4:	42b4      	cmp	r4, r6
 80065d6:	4622      	mov	r2, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	bf28      	it	cs
 80065dc:	4632      	movcs	r2, r6
 80065de:	f7ff ffc9 	bl	8006574 <memcpy>
 80065e2:	4629      	mov	r1, r5
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff fbbf 	bl	8005d68 <_free_r>
 80065ea:	e7f1      	b.n	80065d0 <_realloc_r+0x40>

080065ec <_malloc_usable_size_r>:
 80065ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065f0:	1f18      	subs	r0, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bfbc      	itt	lt
 80065f6:	580b      	ldrlt	r3, [r1, r0]
 80065f8:	18c0      	addlt	r0, r0, r3
 80065fa:	4770      	bx	lr

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
